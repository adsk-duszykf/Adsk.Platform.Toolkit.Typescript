/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createJobFromDiscriminatorValue, createPaginationFromDiscriminatorValue, serializeJob, serializePagination, type Job, type Pagination } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JobsGetResponse}
 */
// @ts-ignore
export function createJobsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJobsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param JobsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJobsGetResponse(jobsGetResponse: Partial<JobsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { jobsGetResponse.pagination = n.getObjectValue<Pagination>(createPaginationFromDiscriminatorValue); },
        "results": n => { jobsGetResponse.results = n.getCollectionOfObjectValues<Job>(createJobFromDiscriminatorValue); },
    }
}
export type GetSortQueryParameterType = (typeof GetSortQueryParameterTypeObject)[keyof typeof GetSortQueryParameterTypeObject];
export interface JobsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The pagination property
     */
    pagination?: Pagination | null;
    /**
     * The results property
     */
    results?: Job[] | null;
}
/**
 * Builds and executes requests for operations under /accounts/{accountId}/requests/{requestId}/jobs
 */
export interface JobsRequestBuilder extends BaseRequestBuilder<JobsRequestBuilder> {
    /**
     * Retrieves a paginated list of jobs spawned by a specific data request.**Response Body**: Paginated array of job objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<JobsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<JobsRequestBuilderGetQueryParameters> | undefined) : Promise<JobsGetResponse | undefined>;
    /**
     * Retrieves a paginated list of jobs spawned by a specific data request.**Response Body**: Paginated array of job objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<JobsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieves a paginated list of jobs spawned by a specific data request.**Response Body**: Paginated array of job objects
 */
export interface JobsRequestBuilderGetQueryParameters {
    /**
     * The number of data connector objects to return
     */
    limit?: number;
    /**
     * The number of data objects to skip before starting to collect the result set
     */
    offset?: number;
    /**
     * The sort order of returned data connector objects
     */
    sort?: GetSortQueryParameterType;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param JobsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJobsGetResponse(writer: SerializationWriter, jobsGetResponse: Partial<JobsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!jobsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Pagination>("pagination", jobsGetResponse.pagination, serializePagination);
    writer.writeCollectionOfObjectValues<Job>("results", jobsGetResponse.results, serializeJob);
    writer.writeAdditionalData(jobsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const JobsRequestBuilderUriTemplate = "{+baseurl}/accounts/{accountId}/requests/{requestId}/jobs{?limit*,offset*,sort*}";
export const GetSortQueryParameterTypeObject = {
    Asc: "asc",
    Desc: "desc",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const JobsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: JobsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createJobsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
