/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDataRequestFromDiscriminatorValue, serializeDataRequest, type DataRequest } from '../../../../models/index.js';
// @ts-ignore
import { JobsRequestBuilderRequestsMetadata, type JobsRequestBuilder } from './jobs/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithRequestPatchRequestBody}
 */
// @ts-ignore
export function createWithRequestPatchRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithRequestPatchRequestBody;
}
/**
 * The deserialization information for the current model
 * @param WithRequestPatchRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithRequestPatchRequestBody(withRequestPatchRequestBody: Partial<WithRequestPatchRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "callbackUrl": n => { withRequestPatchRequestBody.callbackUrl = n.getStringValue(); },
        "description": n => { withRequestPatchRequestBody.description = n.getStringValue(); },
        "effectiveFrom": n => { withRequestPatchRequestBody.effectiveFrom = n.getDateValue(); },
        "effectiveTo": n => { withRequestPatchRequestBody.effectiveTo = n.getDateValue(); },
        "endDate": n => { withRequestPatchRequestBody.endDate = n.getDateValue(); },
        "isActive": n => { withRequestPatchRequestBody.isActive = n.getBooleanValue(); },
        "projectId": n => { withRequestPatchRequestBody.projectId = n.getStringValue(); },
        "projectIdList": n => { withRequestPatchRequestBody.projectIdList = n.getCollectionOfPrimitiveValues<string>(); },
        "reoccuringInterval": n => { withRequestPatchRequestBody.reoccuringInterval = n.getNumberValue(); },
        "scheduleInterval": n => { withRequestPatchRequestBody.scheduleInterval = n.getEnumValue<WithRequestPatchRequestBody_scheduleInterval>(WithRequestPatchRequestBody_scheduleIntervalObject); },
        "sendEmail": n => { withRequestPatchRequestBody.sendEmail = n.getBooleanValue(); },
        "serviceGroups": n => { withRequestPatchRequestBody.serviceGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "startDate": n => { withRequestPatchRequestBody.startDate = n.getDateValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithRequestPatchRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithRequestPatchRequestBody(writer: SerializationWriter, withRequestPatchRequestBody: Partial<WithRequestPatchRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withRequestPatchRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("callbackUrl", withRequestPatchRequestBody.callbackUrl);
    writer.writeStringValue("description", withRequestPatchRequestBody.description);
    writer.writeDateValue("effectiveFrom", withRequestPatchRequestBody.effectiveFrom);
    writer.writeDateValue("effectiveTo", withRequestPatchRequestBody.effectiveTo);
    writer.writeDateValue("endDate", withRequestPatchRequestBody.endDate);
    writer.writeBooleanValue("isActive", withRequestPatchRequestBody.isActive);
    writer.writeStringValue("projectId", withRequestPatchRequestBody.projectId);
    writer.writeCollectionOfPrimitiveValues<string>("projectIdList", withRequestPatchRequestBody.projectIdList);
    writer.writeNumberValue("reoccuringInterval", withRequestPatchRequestBody.reoccuringInterval);
    writer.writeEnumValue<WithRequestPatchRequestBody_scheduleInterval>("scheduleInterval", withRequestPatchRequestBody.scheduleInterval);
    writer.writeBooleanValue("sendEmail", withRequestPatchRequestBody.sendEmail);
    writer.writeCollectionOfPrimitiveValues<string>("serviceGroups", withRequestPatchRequestBody.serviceGroups);
    writer.writeDateValue("startDate", withRequestPatchRequestBody.startDate);
    writer.writeAdditionalData(withRequestPatchRequestBody.additionalData);
}
/**
 * Builds and executes requests for operations under /accounts/{accountId}/requests/{requestId}
 */
export interface WithRequestItemRequestBuilder extends BaseRequestBuilder<WithRequestItemRequestBuilder> {
    /**
     * The jobs property
     */
    get jobs(): JobsRequestBuilder;
    /**
     * Permanently deletes a data request. This action cannot be undone.**Response**: No response body (204 status)
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Updates specific attributes of an existing data request. Only provided fields will be updated.**Request Body**: JSON object with fields to update**Response Body**: Updated data request object
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DataRequest>}
     */
     patch(body: WithRequestPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DataRequest | undefined>;
    /**
     * Permanently deletes a data request. This action cannot be undone.**Response**: No response body (204 status)
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Updates specific attributes of an existing data request. Only provided fields will be updated.**Request Body**: JSON object with fields to update**Response Body**: Updated data request object
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WithRequestPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithRequestPatchRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The callback URL for job completion notifications
     */
    callbackUrl?: string | null;
    /**
     * The user-entered description of this data request
     */
    description?: string | null;
    /**
     * The date and time when a one-time job execution or a recurring interval schedule begins (ISO 8601)
     */
    effectiveFrom?: Date | null;
    /**
     * The date and time when the recurring interval schedule ends (ISO 8601)
     */
    effectiveTo?: Date | null;
    /**
     * The end date and time for the data extraction (ISO 8601)
     */
    endDate?: Date | null;
    /**
     * The data request's active/inactive status
     */
    isActive?: boolean | null;
    /**
     * (Legacy) A single project ID for the data request. Superseded by projectIdList
     */
    projectId?: string | null;
    /**
     * A list of up to 50 project IDs for the data request
     */
    projectIdList?: string[] | null;
    /**
     * The number of scheduleInterval units to wait between job execution
     */
    reoccuringInterval?: number | null;
    /**
     * The scheduling interval unit for jobs spawned by this data request
     */
    scheduleInterval?: WithRequestPatchRequestBody_scheduleInterval | null;
    /**
     * Send a notification email to the user upon job completion
     */
    sendEmail?: boolean | null;
    /**
     * The service groups from which to extract data
     */
    serviceGroups?: string[] | null;
    /**
     * The start date and time for the data extraction (ISO 8601)
     */
    startDate?: Date | null;
}
export type WithRequestPatchRequestBody_scheduleInterval = (typeof WithRequestPatchRequestBody_scheduleIntervalObject)[keyof typeof WithRequestPatchRequestBody_scheduleIntervalObject];
/**
 * Uri template for the request builder.
 */
export const WithRequestItemRequestBuilderUriTemplate = "{+baseurl}/accounts/{accountId}/requests/{requestId}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithRequestItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithRequestItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    jobs: {
        requestsMetadata: JobsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithRequestItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithRequestItemRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
    },
    patch: {
        uriTemplate: WithRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createDataRequestFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithRequestPatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * The scheduling interval unit for jobs spawned by this data request
 */
export const WithRequestPatchRequestBody_scheduleIntervalObject = {
    ONE_TIME: "ONE_TIME",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    YEAR: "YEAR",
} as const;
/* tslint:enable */
/* eslint-enable */
