/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDataRequestFromDiscriminatorValue, createPaginationFromDiscriminatorValue, serializeDataRequest, serializePagination, type DataRequest, type Pagination } from '../../../models/index.js';
// @ts-ignore
import { type WithRequestItemRequestBuilder, WithRequestItemRequestBuilderNavigationMetadata, WithRequestItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RequestsGetResponse}
 */
// @ts-ignore
export function createRequestsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRequestsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RequestsPostRequestBody}
 */
// @ts-ignore
export function createRequestsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRequestsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param RequestsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRequestsGetResponse(requestsGetResponse: Partial<RequestsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { requestsGetResponse.pagination = n.getObjectValue<Pagination>(createPaginationFromDiscriminatorValue); },
        "results": n => { requestsGetResponse.results = n.getCollectionOfObjectValues<DataRequest>(createDataRequestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RequestsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRequestsPostRequestBody(requestsPostRequestBody: Partial<RequestsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "callbackUrl": n => { requestsPostRequestBody.callbackUrl = n.getStringValue(); },
        "dateRange": n => { requestsPostRequestBody.dateRange = n.getEnumValue<RequestsPostRequestBody_dateRange>(RequestsPostRequestBody_dateRangeObject); },
        "description": n => { requestsPostRequestBody.description = n.getStringValue(); },
        "effectiveFrom": n => { requestsPostRequestBody.effectiveFrom = n.getDateValue(); },
        "effectiveTo": n => { requestsPostRequestBody.effectiveTo = n.getDateValue(); },
        "endDate": n => { requestsPostRequestBody.endDate = n.getDateValue(); },
        "isActive": n => { requestsPostRequestBody.isActive = n.getBooleanValue(); },
        "projectId": n => { requestsPostRequestBody.projectId = n.getStringValue(); },
        "projectIdList": n => { requestsPostRequestBody.projectIdList = n.getCollectionOfPrimitiveValues<string>(); },
        "projectStatus": n => { requestsPostRequestBody.projectStatus = n.getEnumValue<RequestsPostRequestBody_projectStatus>(RequestsPostRequestBody_projectStatusObject) ?? RequestsPostRequestBody_projectStatusObject.All; },
        "reoccuringInterval": n => { requestsPostRequestBody.reoccuringInterval = n.getNumberValue(); },
        "scheduleInterval": n => { requestsPostRequestBody.scheduleInterval = n.getEnumValue<RequestsPostRequestBody_scheduleInterval>(RequestsPostRequestBody_scheduleIntervalObject); },
        "sendEmail": n => { requestsPostRequestBody.sendEmail = n.getBooleanValue(); },
        "serviceGroups": n => { requestsPostRequestBody.serviceGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "startDate": n => { requestsPostRequestBody.startDate = n.getDateValue(); },
    }
}
export type GetSortQueryParameterType = (typeof GetSortQueryParameterTypeObject)[keyof typeof GetSortQueryParameterTypeObject];
export interface RequestsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The pagination property
     */
    pagination?: Pagination | null;
    /**
     * The results property
     */
    results?: DataRequest[] | null;
}
export interface RequestsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The callback URL for job completion notifications
     */
    callbackUrl?: string | null;
    /**
     * Specifies the timeframe for extracting data in a scheduled request
     */
    dateRange?: RequestsPostRequestBody_dateRange | null;
    /**
     * The user-entered description of this data request
     */
    description?: string | null;
    /**
     * The date and time when a one-time job execution or a recurring interval schedule begins (ISO 8601)
     */
    effectiveFrom?: Date | null;
    /**
     * The date and time when the recurring interval schedule ends (ISO 8601)
     */
    effectiveTo?: Date | null;
    /**
     * The end date and time for the data extraction (ISO 8601)
     */
    endDate?: Date | null;
    /**
     * The data request's active/inactive status. Default is true
     */
    isActive?: boolean | null;
    /**
     * (Legacy) A single project ID for the data request. Superseded by projectIdList
     */
    projectId?: string | null;
    /**
     * A list of up to 50 project IDs for the data request
     */
    projectIdList?: string[] | null;
    /**
     * The types of projects to be included in a request. Default is all
     */
    projectStatus?: RequestsPostRequestBody_projectStatus | null;
    /**
     * The number of scheduleInterval units to wait between job execution
     */
    reoccuringInterval?: number | null;
    /**
     * The scheduling interval unit for jobs spawned by this data request
     */
    scheduleInterval?: RequestsPostRequestBody_scheduleInterval | null;
    /**
     * Send a notification email to the user upon job completion. Default is true
     */
    sendEmail?: boolean | null;
    /**
     * The service groups from which to extract data
     */
    serviceGroups?: string[] | null;
    /**
     * The start date and time for the data extraction (ISO 8601)
     */
    startDate?: Date | null;
}
export type RequestsPostRequestBody_dateRange = (typeof RequestsPostRequestBody_dateRangeObject)[keyof typeof RequestsPostRequestBody_dateRangeObject];
export type RequestsPostRequestBody_projectStatus = (typeof RequestsPostRequestBody_projectStatusObject)[keyof typeof RequestsPostRequestBody_projectStatusObject];
export type RequestsPostRequestBody_scheduleInterval = (typeof RequestsPostRequestBody_scheduleIntervalObject)[keyof typeof RequestsPostRequestBody_scheduleIntervalObject];
/**
 * Builds and executes requests for operations under /accounts/{accountId}/requests
 */
export interface RequestsRequestBuilder extends BaseRequestBuilder<RequestsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.ACC.DataConnector.accounts.item.requests.item collection
     * @param requestId The ID of the specified request
     * @returns {WithRequestItemRequestBuilder}
     */
     byRequestId(requestId: Guid) : WithRequestItemRequestBuilder;
    /**
     * Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RequestsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<RequestsRequestBuilderGetQueryParameters> | undefined) : Promise<RequestsGetResponse | undefined>;
    /**
     * Creates a new data request that defines parameters for data extraction including:- Account and project scope- Service groups to extract data from- Scheduling parameters for job execution- Optional callback URL for notifications**Request Body**: JSON object with data request configuration**Response Body**: Complete data request object with generated ID and metadata
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DataRequest>}
     */
     post(body: RequestsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DataRequest | undefined>;
    /**
     * Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RequestsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Creates a new data request that defines parameters for data extraction including:- Account and project scope- Service groups to extract data from- Scheduling parameters for job execution- Optional callback URL for notifications**Request Body**: JSON object with data request configuration**Response Body**: Complete data request object with generated ID and metadata
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RequestsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieves a paginated list of data requests created by the authenticated user.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of data request objects
 */
export interface RequestsRequestBuilderGetQueryParameters {
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filtercreatedAt?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filtereffectiveFrom?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filtereffectiveTo?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterendDate?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterisActive?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterprojectId?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterreoccuringInterval?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterscheduleInterval?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterstartDate?: string;
    /**
     * Return only the data requests in which the specified field has the specified value
     */
    filterupdatedAt?: string;
    /**
     * The number of data connector objects to return
     */
    limit?: number;
    /**
     * The number of data objects to skip before starting to collect the result set
     */
    offset?: number;
    /**
     * The sort order of returned data connector objects
     */
    sort?: GetSortQueryParameterType;
    /**
     * A string of comma-separated names of the fields by which to sort the returned data requests
     */
    sortFields?: string;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RequestsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRequestsGetResponse(writer: SerializationWriter, requestsGetResponse: Partial<RequestsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!requestsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Pagination>("pagination", requestsGetResponse.pagination, serializePagination);
    writer.writeCollectionOfObjectValues<DataRequest>("results", requestsGetResponse.results, serializeDataRequest);
    writer.writeAdditionalData(requestsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RequestsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRequestsPostRequestBody(writer: SerializationWriter, requestsPostRequestBody: Partial<RequestsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!requestsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("callbackUrl", requestsPostRequestBody.callbackUrl);
    writer.writeEnumValue<RequestsPostRequestBody_dateRange>("dateRange", requestsPostRequestBody.dateRange);
    writer.writeStringValue("description", requestsPostRequestBody.description);
    writer.writeDateValue("effectiveFrom", requestsPostRequestBody.effectiveFrom);
    writer.writeDateValue("effectiveTo", requestsPostRequestBody.effectiveTo);
    writer.writeDateValue("endDate", requestsPostRequestBody.endDate);
    writer.writeBooleanValue("isActive", requestsPostRequestBody.isActive);
    writer.writeStringValue("projectId", requestsPostRequestBody.projectId);
    writer.writeCollectionOfPrimitiveValues<string>("projectIdList", requestsPostRequestBody.projectIdList);
    writer.writeEnumValue<RequestsPostRequestBody_projectStatus>("projectStatus", requestsPostRequestBody.projectStatus ?? RequestsPostRequestBody_projectStatusObject.All);
    writer.writeNumberValue("reoccuringInterval", requestsPostRequestBody.reoccuringInterval);
    writer.writeEnumValue<RequestsPostRequestBody_scheduleInterval>("scheduleInterval", requestsPostRequestBody.scheduleInterval);
    writer.writeBooleanValue("sendEmail", requestsPostRequestBody.sendEmail);
    writer.writeCollectionOfPrimitiveValues<string>("serviceGroups", requestsPostRequestBody.serviceGroups);
    writer.writeDateValue("startDate", requestsPostRequestBody.startDate);
    writer.writeAdditionalData(requestsPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RequestsRequestBuilderUriTemplate = "{+baseurl}/accounts/{accountId}/requests{?filter%5BcreatedAt%5D*,filter%5BeffectiveFrom%5D*,filter%5BeffectiveTo%5D*,filter%5BendDate%5D*,filter%5BisActive%5D*,filter%5BprojectId%5D*,filter%5BreoccuringInterval%5D*,filter%5BscheduleInterval%5D*,filter%5BstartDate%5D*,filter%5BupdatedAt%5D*,limit*,offset*,sort*,sortFields*}";
export const GetSortQueryParameterTypeObject = {
    Asc: "asc",
    Desc: "desc",
} as const;
/**
 * Specifies the timeframe for extracting data in a scheduled request
 */
export const RequestsPostRequestBody_dateRangeObject = {
    TODAY: "TODAY",
    YESTERDAY: "YESTERDAY",
    PAST_7_DAYS: "PAST_7_DAYS",
    MONTH_TO_DATE: "MONTH_TO_DATE",
    LAST_MONTH: "LAST_MONTH",
} as const;
/**
 * The types of projects to be included in a request. Default is all
 */
export const RequestsPostRequestBody_projectStatusObject = {
    All: "all",
    Archived: "archived",
    Active: "active",
} as const;
/**
 * The scheduling interval unit for jobs spawned by this data request
 */
export const RequestsPostRequestBody_scheduleIntervalObject = {
    ONE_TIME: "ONE_TIME",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    YEAR: "YEAR",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RequestsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filtercreatedAt": "filter%5BcreatedAt%5D",
    "filtereffectiveFrom": "filter%5BeffectiveFrom%5D",
    "filtereffectiveTo": "filter%5BeffectiveTo%5D",
    "filterendDate": "filter%5BendDate%5D",
    "filterisActive": "filter%5BisActive%5D",
    "filterprojectId": "filter%5BprojectId%5D",
    "filterreoccuringInterval": "filter%5BreoccuringInterval%5D",
    "filterscheduleInterval": "filter%5BscheduleInterval%5D",
    "filterstartDate": "filter%5BstartDate%5D",
    "filterupdatedAt": "filter%5BupdatedAt%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RequestsRequestBuilderNavigationMetadata: Record<Exclude<keyof RequestsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRequestId: {
        requestsMetadata: WithRequestItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithRequestItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["requestId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RequestsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RequestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createRequestsGetResponseFromDiscriminatorValue,
        queryParametersMapper: RequestsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RequestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createDataRequestFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRequestsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
