/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNameGetResponse}
 */
// @ts-ignore
export function createWithNameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithNameGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithNameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNameGetResponse(withNameGetResponse: Partial<WithNameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { withNameGetResponse.name = n.getStringValue(); },
        "signedUrl": n => { withNameGetResponse.signedUrl = n.getStringValue(); },
        "size": n => { withNameGetResponse.size = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithNameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNameGetResponse(writer: SerializationWriter, withNameGetResponse: Partial<WithNameGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withNameGetResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", withNameGetResponse.name);
    writer.writeStringValue("signedUrl", withNameGetResponse.signedUrl);
    writer.writeNumberValue("size", withNameGetResponse.size);
    writer.writeAdditionalData(withNameGetResponse.additionalData);
}
export interface WithNameGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The name of the file
     */
    name?: string | null;
    /**
     * A signed URL valid for 60 seconds to download the file
     */
    signedUrl?: string | null;
    /**
     * The size of the file in bytes
     */
    size?: number | null;
}
/**
 * Builds and executes requests for operations under /accounts/{accountId}/jobs/{jobId}/data/{name}
 */
export interface WithNameItemRequestBuilder extends BaseRequestBuilder<WithNameItemRequestBuilder> {
    /**
     * Returns a signed URL for downloading a specific file from a job's data extract.The signed URL is valid for 60 seconds and can be used to download the file.**Response Body**: Object containing file metadata and signed download URL
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithNameGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithNameGetResponse | undefined>;
    /**
     * Returns a signed URL for downloading a specific file from a job's data extract.The signed URL is valid for 60 seconds and can be used to download the file.**Response Body**: Object containing file metadata and signed download URL
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithNameItemRequestBuilderUriTemplate = "{+baseurl}/accounts/{accountId}/jobs/{jobId}/data/{name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithNameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithNameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
