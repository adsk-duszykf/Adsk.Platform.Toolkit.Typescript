/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createJobFromDiscriminatorValue, createPaginationFromDiscriminatorValue, serializeJob, serializePagination, type Job, type Pagination } from '../../../models/index.js';
// @ts-ignore
import { type WithJobItemRequestBuilder, WithJobItemRequestBuilderNavigationMetadata, WithJobItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JobsGetResponse}
 */
// @ts-ignore
export function createJobsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJobsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param JobsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJobsGetResponse(jobsGetResponse: Partial<JobsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { jobsGetResponse.pagination = n.getObjectValue<Pagination>(createPaginationFromDiscriminatorValue); },
        "results": n => { jobsGetResponse.results = n.getCollectionOfObjectValues<Job>(createJobFromDiscriminatorValue); },
    }
}
export type GetSortQueryParameterType = (typeof GetSortQueryParameterTypeObject)[keyof typeof GetSortQueryParameterTypeObject];
export interface JobsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The pagination property
     */
    pagination?: Pagination | null;
    /**
     * The results property
     */
    results?: Job[] | null;
}
/**
 * Builds and executes requests for operations under /accounts/{accountId}/jobs
 */
export interface JobsRequestBuilder extends BaseRequestBuilder<JobsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.ACC.DataConnector.accounts.item.jobs.item collection
     * @param jobId The job ID
     * @returns {WithJobItemRequestBuilder}
     */
     byJobId(jobId: Guid) : WithJobItemRequestBuilder;
    /**
     * Retrieves a paginated list of all jobs spawned by the authenticated user's data requests.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of job objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<JobsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<JobsRequestBuilderGetQueryParameters> | undefined) : Promise<JobsGetResponse | undefined>;
    /**
     * Retrieves a paginated list of all jobs spawned by the authenticated user's data requests.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of job objects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<JobsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieves a paginated list of all jobs spawned by the authenticated user's data requests.Supports filtering, sorting, and pagination parameters.**Response Body**: Paginated array of job objects
 */
export interface JobsRequestBuilderGetQueryParameters {
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filtercompletedAt?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filtercompletionStatus?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filtercreatedAt?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filterendDate?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filterprojectId?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filterstartDate?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filterstartedAt?: string;
    /**
     * Return only the Data Connector jobs in which the specified field has the specified value
     */
    filterstatus?: string;
    /**
     * The number of data connector objects to return
     */
    limit?: number;
    /**
     * The number of data objects to skip before starting to collect the result set
     */
    offset?: number;
    /**
     * Project ID of the returned Data Connector objects
     */
    projectId?: string;
    /**
     * The sort order of returned data connector objects
     */
    sort?: GetSortQueryParameterType;
    /**
     * A string of comma-separated names of the fields by which to sort the returned jobs
     */
    sortFields?: string;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param JobsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJobsGetResponse(writer: SerializationWriter, jobsGetResponse: Partial<JobsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!jobsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Pagination>("pagination", jobsGetResponse.pagination, serializePagination);
    writer.writeCollectionOfObjectValues<Job>("results", jobsGetResponse.results, serializeJob);
    writer.writeAdditionalData(jobsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const JobsRequestBuilderUriTemplate = "{+baseurl}/accounts/{accountId}/jobs{?filter%5BcompletedAt%5D*,filter%5BcompletionStatus%5D*,filter%5BcreatedAt%5D*,filter%5BendDate%5D*,filter%5BprojectId%5D*,filter%5BstartDate%5D*,filter%5BstartedAt%5D*,filter%5Bstatus%5D*,limit*,offset*,projectId*,sort*,sortFields*}";
export const GetSortQueryParameterTypeObject = {
    Asc: "asc",
    Desc: "desc",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const JobsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filtercompletedAt": "filter%5BcompletedAt%5D",
    "filtercompletionStatus": "filter%5BcompletionStatus%5D",
    "filtercreatedAt": "filter%5BcreatedAt%5D",
    "filterendDate": "filter%5BendDate%5D",
    "filterprojectId": "filter%5BprojectId%5D",
    "filterstartDate": "filter%5BstartDate%5D",
    "filterstartedAt": "filter%5BstartedAt%5D",
    "filterstatus": "filter%5Bstatus%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const JobsRequestBuilderNavigationMetadata: Record<Exclude<keyof JobsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byJobId: {
        requestsMetadata: WithJobItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithJobItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["jobId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const JobsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: JobsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createJobsGetResponseFromDiscriminatorValue,
        queryParametersMapper: JobsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
