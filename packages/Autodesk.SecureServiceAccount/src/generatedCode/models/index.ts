/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyCreationResponse}
 */
// @ts-ignore
export function createKeyCreationResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyCreationResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyDetails}
 */
// @ts-ignore
export function createKeyDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyListResponse}
 */
// @ts-ignore
export function createKeyListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyListResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyStatusUpdateRequest}
 */
// @ts-ignore
export function createKeyStatusUpdateRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyStatusUpdateRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountCreateRequest}
 */
// @ts-ignore
export function createServiceAccountCreateRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountCreateRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountDetails}
 */
// @ts-ignore
export function createServiceAccountDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountListResponse}
 */
// @ts-ignore
export function createServiceAccountListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountListResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountResponse}
 */
// @ts-ignore
export function createServiceAccountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccountStatusUpdateRequest}
 */
// @ts-ignore
export function createServiceAccountStatusUpdateRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccountStatusUpdateRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TokenExchangeRequest}
 */
// @ts-ignore
export function createTokenExchangeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTokenExchangeRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TokenExchangeResponse}
 */
// @ts-ignore
export function createTokenExchangeResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTokenExchangeResponse;
}
/**
 * The deserialization information for the current model
 * @param KeyCreationResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyCreationResponse(keyCreationResponse: Partial<KeyCreationResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "kid": n => { keyCreationResponse.kid = n.getStringValue(); },
        "privateKey": n => { keyCreationResponse.privateKey = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param KeyDetails The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyDetails(keyDetails: Partial<KeyDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessedAt": n => { keyDetails.accessedAt = n.getDateValue(); },
        "createdAt": n => { keyDetails.createdAt = n.getDateValue(); },
        "kid": n => { keyDetails.kid = n.getStringValue(); },
        "status": n => { keyDetails.status = n.getEnumValue<KeyDetails_status>(KeyDetails_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param KeyListResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyListResponse(keyListResponse: Partial<KeyListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "keys": n => { keyListResponse.keys = n.getCollectionOfObjectValues<KeyDetails>(createKeyDetailsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param KeyStatusUpdateRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyStatusUpdateRequest(keyStatusUpdateRequest: Partial<KeyStatusUpdateRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "status": n => { keyStatusUpdateRequest.status = n.getEnumValue<KeyStatusUpdateRequest_status>(KeyStatusUpdateRequest_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServiceAccountCreateRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountCreateRequest(serviceAccountCreateRequest: Partial<ServiceAccountCreateRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { serviceAccountCreateRequest.firstName = n.getStringValue(); },
        "lastName": n => { serviceAccountCreateRequest.lastName = n.getStringValue(); },
        "name": n => { serviceAccountCreateRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServiceAccountDetails The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountDetails(serviceAccountDetails: Partial<ServiceAccountDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessedAt": n => { serviceAccountDetails.accessedAt = n.getDateValue(); },
        "createdAt": n => { serviceAccountDetails.createdAt = n.getDateValue(); },
        "createdBy": n => { serviceAccountDetails.createdBy = n.getStringValue(); },
        "email": n => { serviceAccountDetails.email = n.getStringValue(); },
        "expiresAt": n => { serviceAccountDetails.expiresAt = n.getDateValue(); },
        "serviceAccountId": n => { serviceAccountDetails.serviceAccountId = n.getStringValue(); },
        "status": n => { serviceAccountDetails.status = n.getEnumValue<ServiceAccountDetails_status>(ServiceAccountDetails_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServiceAccountListResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountListResponse(serviceAccountListResponse: Partial<ServiceAccountListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "serviceAccounts": n => { serviceAccountListResponse.serviceAccounts = n.getCollectionOfObjectValues<ServiceAccountDetails>(createServiceAccountDetailsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServiceAccountResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountResponse(serviceAccountResponse: Partial<ServiceAccountResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { serviceAccountResponse.email = n.getStringValue(); },
        "serviceAccountId": n => { serviceAccountResponse.serviceAccountId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServiceAccountStatusUpdateRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccountStatusUpdateRequest(serviceAccountStatusUpdateRequest: Partial<ServiceAccountStatusUpdateRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "status": n => { serviceAccountStatusUpdateRequest.status = n.getEnumValue<ServiceAccountStatusUpdateRequest_status>(ServiceAccountStatusUpdateRequest_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param TokenExchangeRequest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTokenExchangeRequest(tokenExchangeRequest: Partial<TokenExchangeRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "assertion": n => { tokenExchangeRequest.assertion = n.getStringValue(); },
        "client_id": n => { tokenExchangeRequest.clientId = n.getStringValue(); },
        "client_secret": n => { tokenExchangeRequest.clientSecret = n.getStringValue(); },
        "grant_type": n => { tokenExchangeRequest.grantType = n.getEnumValue<TokenExchangeRequest_grant_type>(TokenExchangeRequest_grant_typeObject); },
        "scope": n => { tokenExchangeRequest.scope = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TokenExchangeResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTokenExchangeResponse(tokenExchangeResponse: Partial<TokenExchangeResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "access_token": n => { tokenExchangeResponse.accessToken = n.getStringValue(); },
        "expires_in": n => { tokenExchangeResponse.expiresIn = n.getNumberValue(); },
        "token_type": n => { tokenExchangeResponse.tokenType = n.getEnumValue<TokenExchangeResponse_token_type>(TokenExchangeResponse_token_typeObject); },
    }
}
export interface KeyCreationResponse extends AdditionalDataHolder, Parsable {
    /**
     * The ID of the private key.
     */
    kid?: string | null;
    /**
     * The private key value, in PEM format.
     */
    privateKey?: string | null;
}
export interface KeyDetails extends AdditionalDataHolder, Parsable {
    /**
     * The last access timestamp of the key.
     */
    accessedAt?: Date | null;
    /**
     * The creation timestamp of the key.
     */
    createdAt?: Date | null;
    /**
     * The ID of the private key.
     */
    kid?: string | null;
    /**
     * The status of the key.
     */
    status?: KeyDetails_status | null;
}
export type KeyDetails_status = (typeof KeyDetails_statusObject)[keyof typeof KeyDetails_statusObject];
export interface KeyListResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains the details of a list of keys.
     */
    keys?: KeyDetails[] | null;
}
export interface KeyStatusUpdateRequest extends AdditionalDataHolder, Parsable {
    /**
     * The status of the service account key.
     */
    status?: KeyStatusUpdateRequest_status | null;
}
export type KeyStatusUpdateRequest_status = (typeof KeyStatusUpdateRequest_statusObject)[keyof typeof KeyStatusUpdateRequest_statusObject];
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeyCreationResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyCreationResponse(writer: SerializationWriter, keyCreationResponse: Partial<KeyCreationResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keyCreationResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("kid", keyCreationResponse.kid);
    writer.writeStringValue("privateKey", keyCreationResponse.privateKey);
    writer.writeAdditionalData(keyCreationResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeyDetails The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyDetails(writer: SerializationWriter, keyDetails: Partial<KeyDetails> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keyDetails || isSerializingDerivedType) { return; }
    writer.writeDateValue("accessedAt", keyDetails.accessedAt);
    writer.writeDateValue("createdAt", keyDetails.createdAt);
    writer.writeStringValue("kid", keyDetails.kid);
    writer.writeEnumValue<KeyDetails_status>("status", keyDetails.status);
    writer.writeAdditionalData(keyDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeyListResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyListResponse(writer: SerializationWriter, keyListResponse: Partial<KeyListResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keyListResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<KeyDetails>("keys", keyListResponse.keys, serializeKeyDetails);
    writer.writeAdditionalData(keyListResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeyStatusUpdateRequest The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyStatusUpdateRequest(writer: SerializationWriter, keyStatusUpdateRequest: Partial<KeyStatusUpdateRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keyStatusUpdateRequest || isSerializingDerivedType) { return; }
    writer.writeEnumValue<KeyStatusUpdateRequest_status>("status", keyStatusUpdateRequest.status);
    writer.writeAdditionalData(keyStatusUpdateRequest.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServiceAccountCreateRequest The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountCreateRequest(writer: SerializationWriter, serviceAccountCreateRequest: Partial<ServiceAccountCreateRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serviceAccountCreateRequest || isSerializingDerivedType) { return; }
    writer.writeStringValue("firstName", serviceAccountCreateRequest.firstName);
    writer.writeStringValue("lastName", serviceAccountCreateRequest.lastName);
    writer.writeStringValue("name", serviceAccountCreateRequest.name);
    writer.writeAdditionalData(serviceAccountCreateRequest.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServiceAccountDetails The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountDetails(writer: SerializationWriter, serviceAccountDetails: Partial<ServiceAccountDetails> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serviceAccountDetails || isSerializingDerivedType) { return; }
    writer.writeDateValue("accessedAt", serviceAccountDetails.accessedAt);
    writer.writeDateValue("createdAt", serviceAccountDetails.createdAt);
    writer.writeStringValue("createdBy", serviceAccountDetails.createdBy);
    writer.writeStringValue("email", serviceAccountDetails.email);
    writer.writeDateValue("expiresAt", serviceAccountDetails.expiresAt);
    writer.writeStringValue("serviceAccountId", serviceAccountDetails.serviceAccountId);
    writer.writeEnumValue<ServiceAccountDetails_status>("status", serviceAccountDetails.status);
    writer.writeAdditionalData(serviceAccountDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServiceAccountListResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountListResponse(writer: SerializationWriter, serviceAccountListResponse: Partial<ServiceAccountListResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serviceAccountListResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<ServiceAccountDetails>("serviceAccounts", serviceAccountListResponse.serviceAccounts, serializeServiceAccountDetails);
    writer.writeAdditionalData(serviceAccountListResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServiceAccountResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountResponse(writer: SerializationWriter, serviceAccountResponse: Partial<ServiceAccountResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serviceAccountResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("email", serviceAccountResponse.email);
    writer.writeStringValue("serviceAccountId", serviceAccountResponse.serviceAccountId);
    writer.writeAdditionalData(serviceAccountResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServiceAccountStatusUpdateRequest The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccountStatusUpdateRequest(writer: SerializationWriter, serviceAccountStatusUpdateRequest: Partial<ServiceAccountStatusUpdateRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serviceAccountStatusUpdateRequest || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ServiceAccountStatusUpdateRequest_status>("status", serviceAccountStatusUpdateRequest.status);
    writer.writeAdditionalData(serviceAccountStatusUpdateRequest.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TokenExchangeRequest The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTokenExchangeRequest(writer: SerializationWriter, tokenExchangeRequest: Partial<TokenExchangeRequest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tokenExchangeRequest || isSerializingDerivedType) { return; }
    writer.writeStringValue("assertion", tokenExchangeRequest.assertion);
    writer.writeStringValue("client_id", tokenExchangeRequest.clientId);
    writer.writeStringValue("client_secret", tokenExchangeRequest.clientSecret);
    writer.writeEnumValue<TokenExchangeRequest_grant_type>("grant_type", tokenExchangeRequest.grantType);
    writer.writeStringValue("scope", tokenExchangeRequest.scope);
    writer.writeAdditionalData(tokenExchangeRequest.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TokenExchangeResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTokenExchangeResponse(writer: SerializationWriter, tokenExchangeResponse: Partial<TokenExchangeResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tokenExchangeResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("access_token", tokenExchangeResponse.accessToken);
    writer.writeNumberValue("expires_in", tokenExchangeResponse.expiresIn);
    writer.writeEnumValue<TokenExchangeResponse_token_type>("token_type", tokenExchangeResponse.tokenType);
    writer.writeAdditionalData(tokenExchangeResponse.additionalData);
}
export interface ServiceAccountCreateRequest extends AdditionalDataHolder, Parsable {
    /**
     * The first name of the service account. For display purposes only. Must meet specific conditions (length 5-100, alphanumeric, dashes, underscores, at least one alphanumeric, avoid inappropriate words, exclude invalid characters like % and /).
     */
    firstName?: string | null;
    /**
     * The last name of the service account. For display purposes only. Must meet specific conditions (length 5-100, alphanumeric, dashes, at least one alphanumeric, avoid inappropriate words, exclude invalid characters like % and /).
     */
    lastName?: string | null;
    /**
     * The name of the service account. Must be 5-100 characters long, contain only alphanumeric characters and dashes, and include at least one alphanumeric character.
     */
    name?: string | null;
}
export interface ServiceAccountDetails extends AdditionalDataHolder, Parsable {
    /**
     * The last access timestamp of the service account, in UTC format.
     */
    accessedAt?: Date | null;
    /**
     * The creation timestamp of the service account, in UTC format.
     */
    createdAt?: Date | null;
    /**
     * The ID of the creator of the service account.
     */
    createdBy?: string | null;
    /**
     * The email address of the service account.
     */
    email?: string | null;
    /**
     * The expiration timestamp of the service account, in UTC format.
     */
    expiresAt?: Date | null;
    /**
     * The Autodesk ID of the service account.
     */
    serviceAccountId?: string | null;
    /**
     * The status of the service account.
     */
    status?: ServiceAccountDetails_status | null;
}
export type ServiceAccountDetails_status = (typeof ServiceAccountDetails_statusObject)[keyof typeof ServiceAccountDetails_statusObject];
export interface ServiceAccountListResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains details of a list of service accounts.
     */
    serviceAccounts?: ServiceAccountDetails[] | null;
}
export interface ServiceAccountResponse extends AdditionalDataHolder, Parsable {
    /**
     * The email address of the service account (e.g., <serviceAccountName>@<clientID>.adskserviceaccount.autodesk.com).
     */
    email?: string | null;
    /**
     * The Autodesk ID of the service account.
     */
    serviceAccountId?: string | null;
}
export interface ServiceAccountStatusUpdateRequest extends AdditionalDataHolder, Parsable {
    /**
     * The status of the service account.
     */
    status?: ServiceAccountStatusUpdateRequest_status | null;
}
export type ServiceAccountStatusUpdateRequest_status = (typeof ServiceAccountStatusUpdateRequest_statusObject)[keyof typeof ServiceAccountStatusUpdateRequest_statusObject];
export interface TokenExchangeRequest extends AdditionalDataHolder, Parsable {
    /**
     * The value of the JWT assertion to exchange for a three-legged access-token.
     */
    assertion?: string | null;
    /**
     * Optional; client can use authorization header or send this in the body.
     */
    clientId?: string | null;
    /**
     * Optional; client can use authorization header or send this in the body.
     */
    clientSecret?: string | null;
    /**
     * Must be `'urn:ietf:params:oauth:grant-type:jwt-bearer'`.
     */
    grantType?: TokenExchangeRequest_grant_type | null;
    /**
     * A space-delimited list of scopes. Should be a subset of or the same as the scope specified in the assertion. If not present, the access token will have the same scope as the assertion.
     */
    scope?: string | null;
}
export type TokenExchangeRequest_grant_type = (typeof TokenExchangeRequest_grant_typeObject)[keyof typeof TokenExchangeRequest_grant_typeObject];
export interface TokenExchangeResponse extends AdditionalDataHolder, Parsable {
    /**
     * Access token value.
     */
    accessToken?: string | null;
    /**
     * Access token expiry time in seconds.
     */
    expiresIn?: number | null;
    /**
     * Type of token. Will always be 'Bearer'.
     */
    tokenType?: TokenExchangeResponse_token_type | null;
}
export type TokenExchangeResponse_token_type = (typeof TokenExchangeResponse_token_typeObject)[keyof typeof TokenExchangeResponse_token_typeObject];
/**
 * The status of the key.
 */
export const KeyDetails_statusObject = {
    ENABLED: "ENABLED",
    DISABLED: "DISABLED",
} as const;
/**
 * The status of the service account key.
 */
export const KeyStatusUpdateRequest_statusObject = {
    ENABLED: "ENABLED",
    DISABLED: "DISABLED",
} as const;
/**
 * The status of the service account.
 */
export const ServiceAccountDetails_statusObject = {
    ENABLED: "ENABLED",
    DISABLED: "DISABLED",
    DEACTIVATED: "DEACTIVATED",
} as const;
/**
 * The status of the service account.
 */
export const ServiceAccountStatusUpdateRequest_statusObject = {
    ENABLED: "ENABLED",
    DISABLED: "DISABLED",
} as const;
/**
 * Must be `'urn:ietf:params:oauth:grant-type:jwt-bearer'`.
 */
export const TokenExchangeRequest_grant_typeObject = {
    UrnIetfParamsOauthGrantTypeJwtBearer: "urn:ietf:params:oauth:grant-type:jwt-bearer",
} as const;
/**
 * Type of token. Will always be 'Bearer'.
 */
export const TokenExchangeResponse_token_typeObject = {
    Bearer: "Bearer",
} as const;
/* tslint:enable */
/* eslint-enable */
