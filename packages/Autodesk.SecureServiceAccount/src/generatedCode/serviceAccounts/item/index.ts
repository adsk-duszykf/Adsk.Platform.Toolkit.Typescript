/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createServiceAccountDetailsFromDiscriminatorValue, serializeServiceAccountDetails, serializeServiceAccountStatusUpdateRequest, type ServiceAccountDetails, type ServiceAccountStatusUpdateRequest } from '../../models/index.js';
// @ts-ignore
import { KeysRequestBuilderNavigationMetadata, KeysRequestBuilderRequestsMetadata, type KeysRequestBuilder } from './keys/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /service-accounts/{serviceAccountId}
 */
export interface WithServiceAccountItemRequestBuilder extends BaseRequestBuilder<WithServiceAccountItemRequestBuilder> {
    /**
     * The keys property
     */
    get keys(): KeysRequestBuilder;
    /**
     * Deletes an existing service account. When a service account is deleted, all associated keys will also be deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieves the details for a service account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAccountDetails>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAccountDetails | undefined>;
    /**
     * Enables or disables a service account. When a service account is in the disabled state, it loses its capability to manage its service account key. Assertions signed by the key will be treated as invalid. This operation allows enabling a service account that is in a disabled state.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAccountDetails>}
     */
     patch(body: ServiceAccountStatusUpdateRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAccountDetails | undefined>;
    /**
     * Deletes an existing service account. When a service account is deleted, all associated keys will also be deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieves the details for a service account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Enables or disables a service account. When a service account is in the disabled state, it loses its capability to manage its service account key. Assertions signed by the key will be treated as invalid. This operation allows enabling a service account that is in a disabled state.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ServiceAccountStatusUpdateRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithServiceAccountItemRequestBuilderUriTemplate = "{+baseurl}/service-accounts/{serviceAccountId}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithServiceAccountItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithServiceAccountItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    keys: {
        requestsMetadata: KeysRequestBuilderRequestsMetadata,
        navigationMetadata: KeysRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithServiceAccountItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithServiceAccountItemRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithServiceAccountItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createServiceAccountDetailsFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithServiceAccountItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createServiceAccountDetailsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeServiceAccountStatusUpdateRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
