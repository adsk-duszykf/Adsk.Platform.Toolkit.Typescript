/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createKeyCreationResponseFromDiscriminatorValue, createKeyListResponseFromDiscriminatorValue, type KeyCreationResponse, type KeyListResponse } from '../../../models/index.js';
// @ts-ignore
import { type WithKeyItemRequestBuilder, WithKeyItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /service-accounts/{serviceAccountId}/keys
 */
export interface KeysRequestBuilder extends BaseRequestBuilder<KeysRequestBuilder> {
    /**
     * Gets an item from the Autodesk.SecureServiceAccount.serviceAccounts.item.keys.item collection
     * @param keyId The ID of the private key.
     * @returns {WithKeyItemRequestBuilder}
     */
     byKeyId(keyId: string) : WithKeyItemRequestBuilder;
    /**
     * Lists all keys associated with the service account. This operation will only return key metadata, not the private or public key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeyListResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<KeyListResponse | undefined>;
    /**
     * Creates a service account key. A service account key is a public-private key pair, generated using RSA with a key length of 2048 bits by the Identity Authorization Service (AuthZ). The private key is returned once during its creation. AuthZ only stores the public key. A service account can have up to 3 keys at any given time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeyCreationResponse>}
     */
     post(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<KeyCreationResponse | undefined>;
    /**
     * Lists all keys associated with the service account. This operation will only return key metadata, not the private or public key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a service account key. A service account key is a public-private key pair, generated using RSA with a key length of 2048 bits by the Identity Authorization Service (AuthZ). The private key is returned once during its creation. AuthZ only stores the public key. A service account can have up to 3 keys at any given time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/service-accounts/{serviceAccountId}/keys";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata: Record<Exclude<keyof KeysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byKeyId: {
        requestsMetadata: WithKeyItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["keyId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createKeyListResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createKeyCreationResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
