/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createServiceAccountListResponseFromDiscriminatorValue, createServiceAccountResponseFromDiscriminatorValue, serializeServiceAccountCreateRequest, serializeServiceAccountResponse, type ServiceAccountCreateRequest, type ServiceAccountListResponse, type ServiceAccountResponse } from '../models/index.js';
// @ts-ignore
import { type WithServiceAccountItemRequestBuilder, WithServiceAccountItemRequestBuilderNavigationMetadata, WithServiceAccountItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /service-accounts
 */
export interface ServiceAccountsRequestBuilder extends BaseRequestBuilder<ServiceAccountsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.SecureServiceAccount.serviceAccounts.item collection
     * @param serviceAccountId The Autodesk ID of the service account.
     * @returns {WithServiceAccountItemRequestBuilder}
     */
     byServiceAccountId(serviceAccountId: string) : WithServiceAccountItemRequestBuilder;
    /**
     * Retrieves all service accounts associated with an application.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAccountListResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAccountListResponse | undefined>;
    /**
     * Creates a service account. Only a server-to-server application can own service accounts. An application can have up to 10 service accounts at any given time. Upon a successful response, the operation returns the service account ID and email address.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAccountResponse>}
     */
     post(body: ServiceAccountCreateRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAccountResponse | undefined>;
    /**
     * Retrieves all service accounts associated with an application.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a service account. Only a server-to-server application can own service accounts. An application can have up to 10 service accounts at any given time. Upon a successful response, the operation returns the service account ID and email address.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ServiceAccountCreateRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ServiceAccountsRequestBuilderUriTemplate = "{+baseurl}/service-accounts";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ServiceAccountsRequestBuilderNavigationMetadata: Record<Exclude<keyof ServiceAccountsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byServiceAccountId: {
        requestsMetadata: WithServiceAccountItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithServiceAccountItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["serviceAccountId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ServiceAccountsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ServiceAccountsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createServiceAccountListResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ServiceAccountsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createServiceAccountResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeServiceAccountCreateRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
