/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTokenExchangeResponseFromDiscriminatorValue, serializeTokenExchangeRequest, serializeTokenExchangeResponse, type TokenExchangeRequest, type TokenExchangeResponse } from '../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /token
 */
export interface TokenRequestBuilder extends BaseRequestBuilder<TokenRequestBuilder> {
    /**
     * Returns a three-legged access token for the JWT assertion you provide in the request body. This operation is only for confidential clients. It requires Basic Authorization (`client_id`, `client_secret`). Authentication information (`client_id`, `client_secret`) can be included either in the header or the body, but not both simultaneously.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TokenExchangeResponse>}
     */
     post(body: TokenExchangeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TokenExchangeResponse | undefined>;
    /**
     * Returns a three-legged access token for the JWT assertion you provide in the request body. This operation is only for confidential clients. It requires Basic Authorization (`client_id`, `client_secret`). Authentication information (`client_id`, `client_secret`) can be included either in the header or the body, but not both simultaneously.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TokenExchangeRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TokenRequestBuilderUriTemplate = "{+baseurl}/token";
/**
 * Metadata for all the requests in the request builder.
 */
export const TokenRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: TokenRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createTokenExchangeResponseFromDiscriminatorValue,
        requestBodyContentType: "application/x-www-form-urlencoded",
        requestBodySerializer: serializeTokenExchangeRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
