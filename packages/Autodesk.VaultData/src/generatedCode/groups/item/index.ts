/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createGroupExtendedFromDiscriminatorValue, type ErrorResponse, type GroupExtended } from '../../models/index.js';
// @ts-ignore
import { AccountsRequestBuilderNavigationMetadata, type AccountsRequestBuilder } from './accounts/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /groups/{id}
 */
export interface GroupsItemRequestBuilder extends BaseRequestBuilder<GroupsItemRequestBuilder> {
    /**
     * The accounts property
     */
    get accounts(): AccountsRequestBuilder;
    /**
     * Get group by its ID. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GroupExtended>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GroupExtended | undefined>;
    /**
     * Get group by its ID. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const GroupsItemRequestBuilderUriTemplate = "{+baseurl}/groups/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GroupsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof GroupsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accounts: {
        navigationMetadata: AccountsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GroupsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GroupsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGroupExtendedFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
