/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createUserExtendedFromDiscriminatorValue, type ErrorResponse, type UserExtended } from '../../models/index.js';
// @ts-ignore
import { AccountsRequestBuilderNavigationMetadata, AccountsRequestBuilderRequestsMetadata, type AccountsRequestBuilder } from './accounts/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /users/{id}
 */
export interface UsersItemRequestBuilder extends BaseRequestBuilder<UsersItemRequestBuilder> {
    /**
     * The accounts property
     */
    get accounts(): AccountsRequestBuilder;
    /**
     * Get full user object associated with the specified userId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserExtended>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserExtended | undefined>;
    /**
     * Get full user object associated with the specified userId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UsersItemRequestBuilderUriTemplate = "{+baseurl}/users/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UsersItemRequestBuilderNavigationMetadata: Record<Exclude<keyof UsersItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accounts: {
        requestsMetadata: AccountsRequestBuilderRequestsMetadata,
        navigationMetadata: AccountsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UsersItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UsersItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserExtendedFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
