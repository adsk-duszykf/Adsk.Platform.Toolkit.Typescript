/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAccountCollectionFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type AccountCollection, type ErrorResponse } from '../../../models/index.js';
// @ts-ignore
import { type WithAuthTypeItemRequestBuilder, WithAuthTypeItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /users/{id}/accounts
 */
export interface AccountsRequestBuilder extends BaseRequestBuilder<AccountsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.users.item.accounts.item collection
     * @param authType Unique identifier of the item
     * @returns {WithAuthTypeItemRequestBuilder}
     */
     byAuthType(authType: string) : WithAuthTypeItemRequestBuilder;
    /**
     * Get all accounts associated with the specified userId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccountCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccountCollection | undefined>;
    /**
     * Get all accounts associated with the specified userId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const AccountsRequestBuilderUriTemplate = "{+baseurl}/users/{id}/accounts";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccountsRequestBuilderNavigationMetadata: Record<Exclude<keyof AccountsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAuthType: {
        requestsMetadata: WithAuthTypeItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["authType"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccountsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AccountsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccountCollectionFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
