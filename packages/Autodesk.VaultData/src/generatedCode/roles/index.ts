/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createRoleCollectionFromDiscriminatorValue, type ErrorResponse, type RoleCollection } from '../models/index.js';
// @ts-ignore
import { RolesItemRequestBuilderRequestsMetadata, type RolesItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /roles
 */
export interface RolesRequestBuilder extends BaseRequestBuilder<RolesRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.roles.item collection
     * @param id The unique identifier of a role.
     * @returns {RolesItemRequestBuilder}
     */
     byId(id: string) : RolesItemRequestBuilder;
    /**
     * The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleCollection>}
     * @throws {ErrorResponse} error when the service returns a 401 status code
     */
     get(requestConfiguration?: RequestConfiguration<RolesRequestBuilderGetQueryParameters> | undefined) : Promise<RoleCollection | undefined>;
    /**
     * The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RolesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The returned list of roles depends on the permissions of the user passed in via BearerToken.If the user has AdminUserRead permission, all roles are returned.If not, only the roles that are assigned to the user are returned.
 */
export interface RolesRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const RolesRequestBuilderUriTemplate = "{+baseurl}/roles{?cursorState*,limit*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RolesRequestBuilderNavigationMetadata: Record<Exclude<keyof RolesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: RolesItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RolesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RolesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoleCollectionFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
