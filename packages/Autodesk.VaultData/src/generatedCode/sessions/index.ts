/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createSessionFromDiscriminatorValue, serializeSession, type ErrorResponse, type Session } from '../models/index.js';
// @ts-ignore
import { SessionsItemRequestBuilderRequestsMetadata, type SessionsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type WinAuthRequestBuilder, WinAuthRequestBuilderRequestsMetadata } from './winAuth/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SessionsPostRequestBody_input}
 */
// @ts-ignore
export function createSessionsPostRequestBody_inputFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSessionsPostRequestBody_input;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SessionsPostRequestBody}
 */
// @ts-ignore
export function createSessionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSessionsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param SessionsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSessionsPostRequestBody(sessionsPostRequestBody: Partial<SessionsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "input": n => { sessionsPostRequestBody.input = n.getObjectValue<SessionsPostRequestBody_input>(createSessionsPostRequestBody_inputFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SessionsPostRequestBody_input The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSessionsPostRequestBody_input(sessionsPostRequestBody_input: Partial<SessionsPostRequestBody_input> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "appCode": n => { sessionsPostRequestBody_input.appCode = n.getStringValue(); },
        "password": n => { sessionsPostRequestBody_input.password = n.getStringValue(); },
        "userName": n => { sessionsPostRequestBody_input.userName = n.getStringValue(); },
        "vault": n => { sessionsPostRequestBody_input.vault = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SessionsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSessionsPostRequestBody(writer: SerializationWriter, sessionsPostRequestBody: Partial<SessionsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sessionsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<SessionsPostRequestBody_input>("input", sessionsPostRequestBody.input, serializeSessionsPostRequestBody_input);
    writer.writeAdditionalData(sessionsPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SessionsPostRequestBody_input The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSessionsPostRequestBody_input(writer: SerializationWriter, sessionsPostRequestBody_input: Partial<SessionsPostRequestBody_input> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sessionsPostRequestBody_input || isSerializingDerivedType) { return; }
    writer.writeStringValue("appCode", sessionsPostRequestBody_input.appCode);
    writer.writeStringValue("password", sessionsPostRequestBody_input.password);
    writer.writeStringValue("userName", sessionsPostRequestBody_input.userName);
    writer.writeStringValue("vault", sessionsPostRequestBody_input.vault);
    writer.writeAdditionalData(sessionsPostRequestBody_input.additionalData);
}
export interface SessionsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The input property
     */
    input?: SessionsPostRequestBody_input | null;
}
export interface SessionsPostRequestBody_input extends AdditionalDataHolder, Parsable {
    /**
     * The app name to use for server-side audit logging. 
     */
    appCode?: string | null;
    /**
     * The Vault password.
     */
    password?: string | null;
    /**
     * The Vault user name.
     */
    userName?: string | null;
    /**
     * The knowledge vault to sign in to.
     */
    vault?: string | null;
}
/**
 * Builds and executes requests for operations under /sessions
 */
export interface SessionsRequestBuilder extends BaseRequestBuilder<SessionsRequestBuilder> {
    /**
     * The winAuth property
     */
    get winAuth(): WinAuthRequestBuilder;
    /**
     * Gets an item from the Autodesk.VaultData.sessions.item collection
     * @param id The unique identifier of a login session.
     * @returns {SessionsItemRequestBuilder}
     */
     byId(id: string) : SessionsItemRequestBuilder;
    /**
     * Create a new session with the input username/password and vault name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Session>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     post(body: SessionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Session | undefined>;
    /**
     * Create a new session with the input username/password and vault name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SessionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SessionsRequestBuilderUriTemplate = "{+baseurl}/sessions";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SessionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SessionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: SessionsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    winAuth: {
        requestsMetadata: WinAuthRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SessionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: SessionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSessionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSessionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
