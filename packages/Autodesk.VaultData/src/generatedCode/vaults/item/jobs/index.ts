/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createJobFromDiscriminatorValue, serializeJob, type ErrorResponse, type Job } from '../../../models/index.js';
// @ts-ignore
import { JobsItemRequestBuilderRequestsMetadata, type JobsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { JobQueueEnabledRequestBuilderRequestsMetadata, type JobQueueEnabledRequestBuilder } from './jobQueueEnabled/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/jobs
 */
export interface JobsRequestBuilder extends BaseRequestBuilder<JobsRequestBuilder> {
    /**
     * The jobQueueEnabled property
     */
    get jobQueueEnabled(): JobQueueEnabledRequestBuilder;
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.jobs.item collection
     * @param id The unique identifier of a job.
     * @returns {JobsItemRequestBuilder}
     */
     byId(id: string) : JobsItemRequestBuilder;
    /**
     * Add a job into the job queue.
     * @param body Job object. A job is a task that is run by the job processor.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Job>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     post(body: Job, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Job | undefined>;
    /**
     * Add a job into the job queue.
     * @param body Job object. A job is a task that is run by the job processor.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Job, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const JobsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/jobs";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const JobsRequestBuilderNavigationMetadata: Record<Exclude<keyof JobsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: JobsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    jobQueueEnabled: {
        requestsMetadata: JobQueueEnabledRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const JobsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: JobsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createJobFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeJob,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
