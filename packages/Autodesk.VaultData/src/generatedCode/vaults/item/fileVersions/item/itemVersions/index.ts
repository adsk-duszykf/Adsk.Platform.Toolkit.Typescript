/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createItemVersionCollectionFromDiscriminatorValue, type ErrorResponse, type ItemVersionCollection } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/file-versions/{id}/item-versions
 */
export interface ItemVersionsRequestBuilder extends BaseRequestBuilder<ItemVersionsRequestBuilder> {
    /**
     * Get all of the Items assigned to a file version. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemVersionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<ItemVersionsRequestBuilderGetQueryParameters> | undefined) : Promise<ItemVersionCollection | undefined>;
    /**
     * Get all of the Items assigned to a file version. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ItemVersionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all of the Items assigned to a file version. 
 */
export interface ItemVersionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * ``true``: Include only items that are in consumable state.``false``: (Default) Include all items.
     */
    optionreleasedOnly?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const ItemVersionsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/file-versions/{id}/item-versions{?cursorState*,limit*,option%5BpropDefIds%5D*,option%5BreleasedOnly%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ItemVersionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionreleasedOnly": "option%5BreleasedOnly%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemVersionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemVersionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemVersionCollectionFromDiscriminatorValue,
        queryParametersMapper: ItemVersionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
