/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createFileVersionExtendedFromDiscriminatorValue, type ErrorResponse, type FileVersionExtended } from '../../../../models/index.js';
// @ts-ignore
import { ContentRequestBuilderRequestsMetadata, type ContentRequestBuilder } from './content/index.js';
// @ts-ignore
import { ItemVersionsRequestBuilderRequestsMetadata, type ItemVersionsRequestBuilder } from './itemVersions/index.js';
// @ts-ignore
import { MarkupsRequestBuilderNavigationMetadata, MarkupsRequestBuilderRequestsMetadata, type MarkupsRequestBuilder } from './markups/index.js';
// @ts-ignore
import { ParentsRequestBuilderRequestsMetadata, type ParentsRequestBuilder } from './parents/index.js';
// @ts-ignore
import { SignedurlRequestBuilderRequestsMetadata, type SignedurlRequestBuilder } from './signedurl/index.js';
// @ts-ignore
import { SvfRequestBuilderNavigationMetadata, type SvfRequestBuilder } from './svf/index.js';
// @ts-ignore
import { ThumbnailRequestBuilderRequestsMetadata, type ThumbnailRequestBuilder } from './thumbnail/index.js';
// @ts-ignore
import { type UsesRequestBuilder, UsesRequestBuilderRequestsMetadata } from './uses/index.js';
// @ts-ignore
import { type VisualizationAttachmentsRequestBuilder, VisualizationAttachmentsRequestBuilderRequestsMetadata } from './visualizationAttachments/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/file-versions/{id}
 */
export interface FileVersionsItemRequestBuilder extends BaseRequestBuilder<FileVersionsItemRequestBuilder> {
    /**
     * The content property
     */
    get content(): ContentRequestBuilder;
    /**
     * The itemVersions property
     */
    get itemVersions(): ItemVersionsRequestBuilder;
    /**
     * The markups property
     */
    get markups(): MarkupsRequestBuilder;
    /**
     * The parents property
     */
    get parents(): ParentsRequestBuilder;
    /**
     * The signedurl property
     */
    get signedurl(): SignedurlRequestBuilder;
    /**
     * The svf property
     */
    get svf(): SvfRequestBuilder;
    /**
     * The thumbnail property
     */
    get thumbnail(): ThumbnailRequestBuilder;
    /**
     * The uses property
     */
    get uses(): UsesRequestBuilder;
    /**
     * The visualizationAttachments property
     */
    get visualizationAttachments(): VisualizationAttachmentsRequestBuilder;
    /**
     * Get file version object by Id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FileVersionExtended>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FileVersionExtended | undefined>;
    /**
     * Get file version object by Id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const FileVersionsItemRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/file-versions/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FileVersionsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof FileVersionsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    content: {
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
    itemVersions: {
        requestsMetadata: ItemVersionsRequestBuilderRequestsMetadata,
    },
    markups: {
        requestsMetadata: MarkupsRequestBuilderRequestsMetadata,
        navigationMetadata: MarkupsRequestBuilderNavigationMetadata,
    },
    parents: {
        requestsMetadata: ParentsRequestBuilderRequestsMetadata,
    },
    signedurl: {
        requestsMetadata: SignedurlRequestBuilderRequestsMetadata,
    },
    svf: {
        navigationMetadata: SvfRequestBuilderNavigationMetadata,
    },
    thumbnail: {
        requestsMetadata: ThumbnailRequestBuilderRequestsMetadata,
    },
    uses: {
        requestsMetadata: UsesRequestBuilderRequestsMetadata,
    },
    visualizationAttachments: {
        requestsMetadata: VisualizationAttachmentsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FileVersionsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FileVersionsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFileVersionExtendedFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
