/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, type ErrorResponse } from '../../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BubbleGetResponse extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /vaults/{-id}/file-versions/{id}/svf/bubble.json
 */
export interface BubbleJsonRequestBuilder extends BaseRequestBuilder<BubbleJsonRequestBuilder> {
    /**
     * This endpoint should be invoked only for DWF/DWFx file. Retrieves the bubble.json file, which serves as the root file for the Autodesk Large Model Viewer (LMV) format. It provides essential metadata and structure information required to render 2D/3D models or other complex visualizations in the LMV viewer.Note: When requesting this endpoint for a file version first time, the server would trigger a low priority job in background to generate the bubble.json and other LMV related visualization files, which will be cached for subsequent use. Subsequent calls to this endpoint will retrieve the bubble.json from the cache directly.In order to get the associated DWF/DWFx file (if available) for a CAD file, "visualization-attachments" endpoint should be used.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BubbleGetResponse>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<BubbleJsonRequestBuilderGetQueryParameters> | undefined) : Promise<BubbleGetResponse | undefined>;
    /**
     * This endpoint should be invoked only for DWF/DWFx file. Retrieves the bubble.json file, which serves as the root file for the Autodesk Large Model Viewer (LMV) format. It provides essential metadata and structure information required to render 2D/3D models or other complex visualizations in the LMV viewer.Note: When requesting this endpoint for a file version first time, the server would trigger a low priority job in background to generate the bubble.json and other LMV related visualization files, which will be cached for subsequent use. Subsequent calls to this endpoint will retrieve the bubble.json from the cache directly.In order to get the associated DWF/DWFx file (if available) for a CAD file, "visualization-attachments" endpoint should be used.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BubbleJsonRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * This endpoint should be invoked only for DWF/DWFx file. Retrieves the bubble.json file, which serves as the root file for the Autodesk Large Model Viewer (LMV) format. It provides essential metadata and structure information required to render 2D/3D models or other complex visualizations in the LMV viewer.Note: When requesting this endpoint for a file version first time, the server would trigger a low priority job in background to generate the bubble.json and other LMV related visualization files, which will be cached for subsequent use. Subsequent calls to this endpoint will retrieve the bubble.json from the cache directly.In order to get the associated DWF/DWFx file (if available) for a CAD file, "visualization-attachments" endpoint should be used.
 */
export interface BubbleJsonRequestBuilderGetQueryParameters {
    /**
     * In a multi-site environment, this field tells if the file should be synched to the local site.``true``: File is not on the local site, it will be copied to the local site.``false``: (Default) File is not copied to the local site.
     */
    allowSync?: boolean;
    /**
     * When current file is a dwf associated to an Item, directly or as a CAD file's visualization attachment, to download its watermarked version, supply this File Version's id or its CAD File Version's id as the watermark source.
     */
    wmSrcFileVerId?: string;
    /**
     * When current file is a dwf associated to an Item, to download its watermarked version, supply this Item Version's id as the watermark source.
     */
    wmSrcItemVerId?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BubbleGetResponse}
 */
// @ts-ignore
export function createBubbleGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBubbleGetResponse;
}
/**
 * The deserialization information for the current model
 * @param BubbleGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBubbleGetResponse(bubbleGetResponse: Partial<BubbleGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param BubbleGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBubbleGetResponse(writer: SerializationWriter, bubbleGetResponse: Partial<BubbleGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!bubbleGetResponse || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(bubbleGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const BubbleJsonRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/file-versions/{id}/svf/bubble.json{?allowSync*,wmSrcFileVerId*,wmSrcItemVerId*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const BubbleJsonRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BubbleJsonRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBubbleGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
