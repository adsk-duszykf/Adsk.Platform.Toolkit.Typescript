/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createVaultFromDiscriminatorValue, type ErrorResponse, type Vault } from '../../models/index.js';
// @ts-ignore
import { ChangeOrderCommentsRequestBuilderNavigationMetadata, type ChangeOrderCommentsRequestBuilder } from './changeOrderComments/index.js';
// @ts-ignore
import { ChangeOrdersRequestBuilderNavigationMetadata, ChangeOrdersRequestBuilderRequestsMetadata, type ChangeOrdersRequestBuilder } from './changeOrders/index.js';
// @ts-ignore
import { FilesRequestBuilderNavigationMetadata, type FilesRequestBuilder } from './files/index.js';
// @ts-ignore
import { FileVersionsRequestBuilderNavigationMetadata, FileVersionsRequestBuilderRequestsMetadata, type FileVersionsRequestBuilder } from './fileVersions/index.js';
// @ts-ignore
import { FoldersRequestBuilderNavigationMetadata, type FoldersRequestBuilder } from './folders/index.js';
// @ts-ignore
import { ItemsRequestBuilderNavigationMetadata, ItemsRequestBuilderRequestsMetadata, type ItemsRequestBuilder } from './items/index.js';
// @ts-ignore
import { ItemVersionsRequestBuilderNavigationMetadata, ItemVersionsRequestBuilderRequestsMetadata, type ItemVersionsRequestBuilder } from './itemVersions/index.js';
// @ts-ignore
import { JobsRequestBuilderNavigationMetadata, JobsRequestBuilderRequestsMetadata, type JobsRequestBuilder } from './jobs/index.js';
// @ts-ignore
import { LinksRequestBuilderNavigationMetadata, LinksRequestBuilderRequestsMetadata, type LinksRequestBuilder } from './links/index.js';
// @ts-ignore
import { PropertyDefinitionsRequestBuilderNavigationMetadata, PropertyDefinitionsRequestBuilderRequestsMetadata, type PropertyDefinitionsRequestBuilder } from './propertyDefinitions/index.js';
// @ts-ignore
import { SearchResultsRequestBuilderRequestsMetadata, type SearchResultsRequestBuilder } from './searchResults/index.js';
// @ts-ignore
import { type VaultOptionsRequestBuilder, VaultOptionsRequestBuilderNavigationMetadata, VaultOptionsRequestBuilderRequestsMetadata } from './vaultOptions/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}
 */
export interface ItemRequestBuilder extends BaseRequestBuilder<ItemRequestBuilder> {
    /**
     * The changeOrderComments property
     */
    get changeOrderComments(): ChangeOrderCommentsRequestBuilder;
    /**
     * The changeOrders property
     */
    get changeOrders(): ChangeOrdersRequestBuilder;
    /**
     * The files property
     */
    get files(): FilesRequestBuilder;
    /**
     * The fileVersions property
     */
    get fileVersions(): FileVersionsRequestBuilder;
    /**
     * The folders property
     */
    get folders(): FoldersRequestBuilder;
    /**
     * The items property
     */
    get items(): ItemsRequestBuilder;
    /**
     * The itemVersions property
     */
    get itemVersions(): ItemVersionsRequestBuilder;
    /**
     * The jobs property
     */
    get jobs(): JobsRequestBuilder;
    /**
     * The links property
     */
    get links(): LinksRequestBuilder;
    /**
     * The propertyDefinitions property
     */
    get propertyDefinitions(): PropertyDefinitionsRequestBuilder;
    /**
     * The searchResults property
     */
    get searchResults(): SearchResultsRequestBuilder;
    /**
     * The vaultOptions property
     */
    get vaultOptions(): VaultOptionsRequestBuilder;
    /**
     * Get Knowledge vault based on its ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vault>}
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Vault | undefined>;
    /**
     * Get Knowledge vault based on its ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ItemRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    changeOrderComments: {
        navigationMetadata: ChangeOrderCommentsRequestBuilderNavigationMetadata,
    },
    changeOrders: {
        requestsMetadata: ChangeOrdersRequestBuilderRequestsMetadata,
        navigationMetadata: ChangeOrdersRequestBuilderNavigationMetadata,
    },
    files: {
        navigationMetadata: FilesRequestBuilderNavigationMetadata,
    },
    fileVersions: {
        requestsMetadata: FileVersionsRequestBuilderRequestsMetadata,
        navigationMetadata: FileVersionsRequestBuilderNavigationMetadata,
    },
    folders: {
        navigationMetadata: FoldersRequestBuilderNavigationMetadata,
    },
    items: {
        requestsMetadata: ItemsRequestBuilderRequestsMetadata,
        navigationMetadata: ItemsRequestBuilderNavigationMetadata,
    },
    itemVersions: {
        requestsMetadata: ItemVersionsRequestBuilderRequestsMetadata,
        navigationMetadata: ItemVersionsRequestBuilderNavigationMetadata,
    },
    jobs: {
        requestsMetadata: JobsRequestBuilderRequestsMetadata,
        navigationMetadata: JobsRequestBuilderNavigationMetadata,
    },
    links: {
        requestsMetadata: LinksRequestBuilderRequestsMetadata,
        navigationMetadata: LinksRequestBuilderNavigationMetadata,
    },
    propertyDefinitions: {
        requestsMetadata: PropertyDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: PropertyDefinitionsRequestBuilderNavigationMetadata,
    },
    searchResults: {
        requestsMetadata: SearchResultsRequestBuilderRequestsMetadata,
    },
    vaultOptions: {
        requestsMetadata: VaultOptionsRequestBuilderRequestsMetadata,
        navigationMetadata: VaultOptionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVaultFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
