/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEntityCollectionFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type EntityCollection, type ErrorResponse } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/search-results
 */
export interface SearchResultsRequestBuilder extends BaseRequestBuilder<SearchResultsRequestBuilder> {
    /**
     * Basic Search: Find entities using a query string. The text is searched across all properties or both properties and content based on options passed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EntityCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<SearchResultsRequestBuilderGetQueryParameters> | undefined) : Promise<EntityCollection | undefined>;
    /**
     * Basic Search: Find entities using a query string. The text is searched across all properties or both properties and content based on options passed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SearchResultsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Basic Search: Find entities using a query string. The text is searched across all properties or both properties and content based on options passed.
 */
export interface SearchResultsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * ``true``: (Default) Include only the latest version.``false``: Include all versions.
     */
    optionlatestOnly?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * ``true``: Include only versions that are consumable (released) state.``false``: (Default) Include all versions.
     */
    optionreleasedFilesOnly?: boolean;
    /**
     * ``true``: Include only versions that are consumable (released) state.``false``: (Default) Include all versions.
     */
    optionreleasedItemsOnly?: boolean;
    /**
     * ``true``: Search full content of the file.``false``: (Default) Search only properties of the file.
     */
    optionsearchContent?: boolean;
    /**
     * ``true``: Search sub folders.``false``: (Default) Do not search sub folders.
     */
    optionsearchSubFolders?: boolean;
    /**
     * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned. 
     */
    q?: string;
    /**
     * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
     */
    sort?: string;
}
/**
 * Uri template for the request builder.
 */
export const SearchResultsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/search-results{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*,option%5BsearchContent%5D*,option%5BsearchSubFolders%5D*,q*,sort*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SearchResultsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionlatestOnly": "option%5BlatestOnly%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionreleasedFilesOnly": "option%5BreleasedFilesOnly%5D",
    "optionreleasedItemsOnly": "option%5BreleasedItemsOnly%5D",
    "optionsearchContent": "option%5BsearchContent%5D",
    "optionsearchSubFolders": "option%5BsearchSubFolders%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SearchResultsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SearchResultsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEntityCollectionFromDiscriminatorValue,
        queryParametersMapper: SearchResultsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
