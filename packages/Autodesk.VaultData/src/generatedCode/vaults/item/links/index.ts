/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createLinkCollectionFromDiscriminatorValue, type ErrorResponse, type LinkCollection } from '../../../models/index.js';
// @ts-ignore
import { LinksItemRequestBuilderRequestsMetadata, type LinksItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/links
 */
export interface LinksRequestBuilder extends BaseRequestBuilder<LinksRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.links.item collection
     * @param id The unique identifier of a link.
     * @returns {LinksItemRequestBuilder}
     */
     byId(id: string) : LinksItemRequestBuilder;
    /**
     * Get all links
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LinkCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<LinksRequestBuilderGetQueryParameters> | undefined) : Promise<LinkCollection | undefined>;
    /**
     * Get all links
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<LinksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all links
 */
export interface LinksRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const LinksRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/links{?cursorState*,limit*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LinksRequestBuilderNavigationMetadata: Record<Exclude<keyof LinksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: LinksItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LinksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LinksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createLinkCollectionFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
