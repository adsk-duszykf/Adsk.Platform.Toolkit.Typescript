/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createPropertyDefinitionCollectionFromDiscriminatorValue, type ErrorResponse, type PropertyDefinitionCollection } from '../../../models/index.js';
// @ts-ignore
import { PropertyDefinitionsItemRequestBuilderRequestsMetadata, type PropertyDefinitionsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/property-definitions
 */
export interface PropertyDefinitionsRequestBuilder extends BaseRequestBuilder<PropertyDefinitionsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.propertyDefinitions.item collection
     * @param id The unique identifier of a profile definition.
     * @returns {PropertyDefinitionsItemRequestBuilder}
     */
     byId(id: string) : PropertyDefinitionsItemRequestBuilder;
    /**
     * Get property definitions in the vault.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PropertyDefinitionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<PropertyDefinitionsRequestBuilderGetQueryParameters> | undefined) : Promise<PropertyDefinitionCollection | undefined>;
    /**
     * Get property definitions in the vault.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PropertyDefinitionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get property definitions in the vault.
 */
export interface PropertyDefinitionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * The value should be from EntityClass, e.g., FILE, FLDR, ITEM, CO. if null of empty will return property defs for all Entity Classes.
     */
    filterentityClassId?: string;
    /**
     * Search filter to include only propertyDefs that match Id. PropertyDefIds, separated by ','
     */
    filterpropDefIds?: string;
    /**
     * Search filter to include only propertyDefs that match SystemName. SystemNames, separated by ','
     */
    filtersystemNames?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * ``true``: Include BOM Association Property definitions.``false``: (Default) Exclude BOM Association Property definitions.
     */
    optionincludeBOMAssociationProperty?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const PropertyDefinitionsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/property-definitions{?cursorState*,filter%5BentityClassId%5D*,filter%5BpropDefIds%5D*,filter%5BsystemNames%5D*,limit*,option%5BextendedModels%5D*,option%5BincludeBOMAssociationProperty%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PropertyDefinitionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filterentityClassId": "filter%5BentityClassId%5D",
    "filterpropDefIds": "filter%5BpropDefIds%5D",
    "filtersystemNames": "filter%5BsystemNames%5D",
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionincludeBOMAssociationProperty": "option%5BincludeBOMAssociationProperty%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PropertyDefinitionsRequestBuilderNavigationMetadata: Record<Exclude<keyof PropertyDefinitionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: PropertyDefinitionsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PropertyDefinitionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PropertyDefinitionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPropertyDefinitionCollectionFromDiscriminatorValue,
        queryParametersMapper: PropertyDefinitionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
