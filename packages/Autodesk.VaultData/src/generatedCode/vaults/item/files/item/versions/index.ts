/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createFileVersionCollectionFromDiscriminatorValue, HistoryOptionsEnum, RevisionOptionsEnum, type ErrorResponse, type FileVersionCollection } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/files/{id}/versions
 */
export interface VersionsRequestBuilder extends BaseRequestBuilder<VersionsRequestBuilder> {
    /**
     * Get file versions history for given file. Based on option[history] and option[revision] values, following will be the behavior:When revision is AllRevision: either all file versions (history=All) or all file versions that are in consumable state (history=ReleasedOnly) or all file versions that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).When revision is CurrentRevision: either all file versions in the same revision (history=All) or all file versions in same revision that are in consumable state (history=ReleasedOnly) or all file versions in same revision that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FileVersionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<VersionsRequestBuilderGetQueryParameters> | undefined) : Promise<FileVersionCollection | undefined>;
    /**
     * Get file versions history for given file. Based on option[history] and option[revision] values, following will be the behavior:When revision is AllRevision: either all file versions (history=All) or all file versions that are in consumable state (history=ReleasedOnly) or all file versions that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).When revision is CurrentRevision: either all file versions in the same revision (history=All) or all file versions in same revision that are in consumable state (history=ReleasedOnly) or all file versions in same revision that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VersionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get file versions history for given file. Based on option[history] and option[revision] values, following will be the behavior:When revision is AllRevision: either all file versions (history=All) or all file versions that are in consumable state (history=ReleasedOnly) or all file versions that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).When revision is CurrentRevision: either all file versions in the same revision (history=All) or all file versions in same revision that are in consumable state (history=ReleasedOnly) or all file versions in same revision that are either highest version in revision or consumable state is returned (history=ReleasedAndRevisionTip).
 */
export interface VersionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * ``true``: Return latest file version at top.``false``: (Default) Return latest file version at bottom.
     */
    descending?: boolean;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * Allow option is: All, ReleasedOnly or ReleasedAndRevisionTip. Default value is All
     */
    optionhistory?: HistoryOptionsEnum;
    /**
     * ``true``: (Default) Only show the tip released version for each revision.``false``: Show all released versions for each revision.This parameter won''t take effect if option[history]=All
     */
    optiononlyShowTipReleasedForEachRev?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * Allow option is: AllRevision or CurrentRevision. Default value is AllRevision
     */
    optionrevision?: RevisionOptionsEnum;
}
/**
 * Uri template for the request builder.
 */
export const VersionsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/files/{id}/versions{?cursorState*,descending*,limit*,option%5BextendedModels%5D*,option%5Bhistory%5D*,option%5BonlyShowTipReleasedForEachRev%5D*,option%5BpropDefIds%5D*,option%5Brevision%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VersionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionhistory": "option%5Bhistory%5D",
    "optiononlyShowTipReleasedForEachRev": "option%5BonlyShowTipReleasedForEachRev%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionrevision": "option%5Brevision%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VersionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: VersionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFileVersionCollectionFromDiscriminatorValue,
        queryParametersMapper: VersionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
