/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createFileObjectFromDiscriminatorValue, type ErrorResponse, type FileObject } from '../../../../models/index.js';
// @ts-ignore
import { ChangeOrdersRequestBuilderRequestsMetadata, type ChangeOrdersRequestBuilder } from './changeOrders/index.js';
// @ts-ignore
import { type VersionsRequestBuilder, VersionsRequestBuilderRequestsMetadata } from './versions/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/files/{id}
 */
export interface FilesItemRequestBuilder extends BaseRequestBuilder<FilesItemRequestBuilder> {
    /**
     * The changeOrders property
     */
    get changeOrders(): ChangeOrdersRequestBuilder;
    /**
     * The versions property
     */
    get versions(): VersionsRequestBuilder;
    /**
     * Get file object by id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FileObject>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<FilesItemRequestBuilderGetQueryParameters> | undefined) : Promise<FileObject | undefined>;
    /**
     * Get file object by id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FilesItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get file object by id.
 */
export interface FilesItemRequestBuilderGetQueryParameters {
    /**
     * ``true``: Return latest consumable version.``false``: (Default) Return latest version.
     */
    optionreleasedOnly?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const FilesItemRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/files/{id}{?option%5BreleasedOnly%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FilesItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionreleasedOnly": "option%5BreleasedOnly%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FilesItemRequestBuilderNavigationMetadata: Record<Exclude<keyof FilesItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    changeOrders: {
        requestsMetadata: ChangeOrdersRequestBuilderRequestsMetadata,
    },
    versions: {
        requestsMetadata: VersionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FilesItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FilesItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFileObjectFromDiscriminatorValue,
        queryParametersMapper: FilesItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
