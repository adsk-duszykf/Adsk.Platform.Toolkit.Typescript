/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createItemCollectionFromDiscriminatorValue, type ErrorResponse, type ItemCollection } from '../../../models/index.js';
// @ts-ignore
import { ItemsItemRequestBuilderNavigationMetadata, ItemsItemRequestBuilderRequestsMetadata, type ItemsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/items
 */
export interface ItemsRequestBuilder extends BaseRequestBuilder<ItemsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.items.item collection
     * @param id The unique identifier of an item used to group all the versions of an Item. In other words, different versions of an item will have a different Id(version/iteration) but the same MasterId.
     * @returns {ItemsItemRequestBuilder}
     */
     byId(id: string) : ItemsItemRequestBuilder;
    /**
     * Get all Items in the given Vault with vaultId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<ItemsRequestBuilderGetQueryParameters> | undefined) : Promise<ItemCollection | undefined>;
    /**
     * Get all Items in the given Vault with vaultId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ItemsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all Items in the given Vault with vaultId.
 */
export interface ItemsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const ItemsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/items{?cursorState*,limit*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ItemsRequestBuilderNavigationMetadata: Record<Exclude<keyof ItemsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ItemsItemRequestBuilderRequestsMetadata,
        navigationMetadata: ItemsItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemCollectionFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
