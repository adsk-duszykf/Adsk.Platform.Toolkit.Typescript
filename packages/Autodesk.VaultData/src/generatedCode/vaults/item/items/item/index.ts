/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createItemFromDiscriminatorValue, type ErrorResponse, type Item } from '../../../../models/index.js';
// @ts-ignore
import { ChangeOrdersRequestBuilderRequestsMetadata, type ChangeOrdersRequestBuilder } from './changeOrders/index.js';
// @ts-ignore
import { type VersionsRequestBuilder, VersionsRequestBuilderRequestsMetadata } from './versions/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/items/{id}
 */
export interface ItemsItemRequestBuilder extends BaseRequestBuilder<ItemsItemRequestBuilder> {
    /**
     * The changeOrders property
     */
    get changeOrders(): ChangeOrdersRequestBuilder;
    /**
     * The versions property
     */
    get versions(): VersionsRequestBuilder;
    /**
     * Get item by id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Item>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<ItemsItemRequestBuilderGetQueryParameters> | undefined) : Promise<Item | undefined>;
    /**
     * Get item by id.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ItemsItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get item by id.
 */
export interface ItemsItemRequestBuilderGetQueryParameters {
    /**
     * ``true``: Return latest consumable(released) item revision.``false``: (Default) Return tip item revision.
     */
    optionreleasedOnly?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const ItemsItemRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/items/{id}{?option%5BreleasedOnly%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ItemsItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionreleasedOnly": "option%5BreleasedOnly%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ItemsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ItemsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    changeOrders: {
        requestsMetadata: ChangeOrdersRequestBuilderRequestsMetadata,
    },
    versions: {
        requestsMetadata: VersionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemFromDiscriminatorValue,
        queryParametersMapper: ItemsItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
