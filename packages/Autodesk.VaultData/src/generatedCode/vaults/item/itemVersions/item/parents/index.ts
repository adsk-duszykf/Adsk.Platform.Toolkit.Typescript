/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { BOMTypeEnum, createBOMLinksAndRevisionsFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type BOMLinksAndRevisions, type ErrorResponse } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/item-versions/{id}/parents
 */
export interface ParentsRequestBuilder extends BaseRequestBuilder<ParentsRequestBuilder> {
    /**
     * Get item where used for item version
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BOMLinksAndRevisions>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<ParentsRequestBuilderGetQueryParameters> | undefined) : Promise<BOMLinksAndRevisions | undefined>;
    /**
     * Get item where used for item version
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ParentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get item where used for item version
 */
export interface ParentsRequestBuilderGetQueryParameters {
    /**
     * The type of BOM. Possible values: Effective, Historic, Latest, Tip. Default value is Latest
     */
    optionbomType?: BOMTypeEnum;
    /**
     * The date that it was effective
     */
    optiondate?: string;
}
/**
 * Uri template for the request builder.
 */
export const ParentsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/item-versions/{id}/parents{?option%5BbomType%5D*,option%5Bdate%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ParentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionbomType": "option%5BbomType%5D",
    "optiondate": "option%5Bdate%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ParentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ParentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBOMLinksAndRevisionsFromDiscriminatorValue,
        queryParametersMapper: ParentsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
