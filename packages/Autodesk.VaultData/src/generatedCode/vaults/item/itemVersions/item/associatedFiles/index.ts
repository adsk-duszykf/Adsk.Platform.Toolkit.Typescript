/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createItemAssociatedFileVersionCollectionFromDiscriminatorValue, type ErrorResponse, type ItemAssociatedFileVersionCollection } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/item-versions/{id}/associated-files
 */
export interface AssociatedFilesRequestBuilder extends BaseRequestBuilder<AssociatedFilesRequestBuilder> {
    /**
     * Get all File associations on a given item version id
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemAssociatedFileVersionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<AssociatedFilesRequestBuilderGetQueryParameters> | undefined) : Promise<ItemAssociatedFileVersionCollection | undefined>;
    /**
     * Get all File associations on a given item version id
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AssociatedFilesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all File associations on a given item version id
 */
export interface AssociatedFilesRequestBuilderGetQueryParameters {
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
}
/**
 * Uri template for the request builder.
 */
export const AssociatedFilesRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/item-versions/{id}/associated-files{?option%5BextendedModels%5D*,option%5BpropDefIds%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AssociatedFilesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AssociatedFilesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AssociatedFilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemAssociatedFileVersionCollectionFromDiscriminatorValue,
        queryParametersMapper: AssociatedFilesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
