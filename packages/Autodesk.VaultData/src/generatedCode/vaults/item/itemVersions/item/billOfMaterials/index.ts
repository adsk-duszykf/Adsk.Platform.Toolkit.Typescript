/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { BOMTypeEnum, createBOMLinksAndRevisionsFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type BOMLinksAndRevisions, type ErrorResponse } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/item-versions/{id}/bill-of-materials
 */
export interface BillOfMaterialsRequestBuilder extends BaseRequestBuilder<BillOfMaterialsRequestBuilder> {
    /**
     * Get Bill of Materials for the item version that was effective for the given date
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BOMLinksAndRevisions>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<BillOfMaterialsRequestBuilderGetQueryParameters> | undefined) : Promise<BOMLinksAndRevisions | undefined>;
    /**
     * Get Bill of Materials for the item version that was effective for the given date
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BillOfMaterialsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get Bill of Materials for the item version that was effective for the given date
 */
export interface BillOfMaterialsRequestBuilderGetQueryParameters {
    /**
     * The type of BOM. Possible values: Effective, Historic, Latest, Tip. Default value is Latest 
     */
    optionbomType?: BOMTypeEnum;
    /**
     * The date that it was effective. Default value is DateTime.MinValue
     */
    optiondate?: string;
    /**
     * ``true``: Include excluded BOM rows.``false``: (Default) Return included BOM rows.
     */
    optionexcludedBOMLinks?: boolean;
    /**
     * ``true``: Include properties on BOM associations.``false``: (Default) Exclude properties on BOM associations.
     */
    optionincludeBOMAssociationProperty?: boolean;
    /**
     * ``true``: Include the occurrences.``false``: (Default) Exclude the occurrences.
     */
    optionoccurrences?: boolean;
    /**
     * ``true``: Include only the current level and immediate children.``false``: (Default) Include all level.
     */
    optiononeLevel?: boolean;
    /**
     * ``true``: Include reference designators.``false``: (Default) Exclude reference designators.
     */
    optionreferenceDesignators?: boolean;
    /**
     * ``true``: Include a linear view of the BOM, BOM items for parts only. Only available for view operations.``false``: (Default) Return a tree view of the BOM.
     */
    optionrolledUp?: boolean;
    /**
     * ``true``: Include unassigned components (BOM rows without associated items) in BOM rows.``false``: (Default) Include only components with assigned items.
     */
    optionunassignedComponents?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const BillOfMaterialsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/item-versions/{id}/bill-of-materials{?option%5BbomType%5D*,option%5Bdate%5D*,option%5BexcludedBOMLinks%5D*,option%5BincludeBOMAssociationProperty%5D*,option%5Boccurrences%5D*,option%5BoneLevel%5D*,option%5BreferenceDesignators%5D*,option%5BrolledUp%5D*,option%5BunassignedComponents%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BillOfMaterialsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionbomType": "option%5BbomType%5D",
    "optiondate": "option%5Bdate%5D",
    "optionexcludedBOMLinks": "option%5BexcludedBOMLinks%5D",
    "optionincludeBOMAssociationProperty": "option%5BincludeBOMAssociationProperty%5D",
    "optionoccurrences": "option%5Boccurrences%5D",
    "optiononeLevel": "option%5BoneLevel%5D",
    "optionreferenceDesignators": "option%5BreferenceDesignators%5D",
    "optionrolledUp": "option%5BrolledUp%5D",
    "optionunassignedComponents": "option%5BunassignedComponents%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BillOfMaterialsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BillOfMaterialsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBOMLinksAndRevisionsFromDiscriminatorValue,
        queryParametersMapper: BillOfMaterialsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
