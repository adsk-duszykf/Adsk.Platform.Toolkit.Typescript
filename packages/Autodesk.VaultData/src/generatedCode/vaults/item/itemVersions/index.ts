/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createItemVersionCollectionFromDiscriminatorValue, type ErrorResponse, type ItemVersionCollection } from '../../../models/index.js';
// @ts-ignore
import { ItemVersionsItemRequestBuilderNavigationMetadata, ItemVersionsItemRequestBuilderRequestsMetadata, type ItemVersionsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/item-versions
 */
export interface ItemVersionsRequestBuilder extends BaseRequestBuilder<ItemVersionsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.itemVersions.item collection
     * @param id The unique identifier of an item version.
     * @returns {ItemVersionsItemRequestBuilder}
     */
     byId(id: string) : ItemVersionsItemRequestBuilder;
    /**
     * Get item versions in the given Vault with vaultId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemVersionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<ItemVersionsRequestBuilderGetQueryParameters> | undefined) : Promise<ItemVersionCollection | undefined>;
    /**
     * Get item versions in the given Vault with vaultId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ItemVersionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get item versions in the given Vault with vaultId.
 */
export interface ItemVersionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: (Default) Include only the latest version.``false``: Include all versions.
     */
    optionlatestOnly?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * ``true``: Includeonly versions that are consumable (released) state.``false``: (Default) Include all versions.
     */
    optionreleasedItemsOnly?: boolean;
    /**
     * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned. 
     */
    q?: string;
    /**
     * Specifies sorting criteria for search results. Format: {propertyDefSysName} {sort-order} Accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
     */
    sort?: string;
}
/**
 * Uri template for the request builder.
 */
export const ItemVersionsRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/item-versions{?cursorState*,limit*,option%5BlatestOnly%5D*,option%5BpropDefIds%5D*,option%5BreleasedItemsOnly%5D*,q*,sort*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ItemVersionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionlatestOnly": "option%5BlatestOnly%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionreleasedItemsOnly": "option%5BreleasedItemsOnly%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ItemVersionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ItemVersionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ItemVersionsItemRequestBuilderRequestsMetadata,
        navigationMetadata: ItemVersionsItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemVersionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemVersionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemVersionCollectionFromDiscriminatorValue,
        queryParametersMapper: ItemVersionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
