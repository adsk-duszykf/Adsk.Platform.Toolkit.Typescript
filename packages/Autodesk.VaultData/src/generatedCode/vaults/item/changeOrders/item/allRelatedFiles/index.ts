/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createFileVersionCollectionFromDiscriminatorValue, type ErrorResponse, type FileVersionCollection } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/change-orders/{id}/all-related-files
 */
export interface AllRelatedFilesRequestBuilder extends BaseRequestBuilder<AllRelatedFilesRequestBuilder> {
    /**
     * Get all change order related Files by its Id. This includes files that are not only tracked by the change order, but also its associated items file associations as well. Note: The result also includes related attachments.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FileVersionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<AllRelatedFilesRequestBuilderGetQueryParameters> | undefined) : Promise<FileVersionCollection | undefined>;
    /**
     * Get all change order related Files by its Id. This includes files that are not only tracked by the change order, but also its associated items file associations as well. Note: The result also includes related attachments.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AllRelatedFilesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all change order related Files by its Id. This includes files that are not only tracked by the change order, but also its associated items file associations as well. Note: The result also includes related attachments.
 */
export interface AllRelatedFilesRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * ``true``: Include only associated files that are in consumable(released) state.``false``: (Default) Include all associated files.
     */
    optionreleasedOnly?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const AllRelatedFilesRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/change-orders/{id}/all-related-files{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BpropDefIds%5D*,option%5BreleasedOnly%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AllRelatedFilesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionreleasedOnly": "option%5BreleasedOnly%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AllRelatedFilesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AllRelatedFilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFileVersionCollectionFromDiscriminatorValue,
        queryParametersMapper: AllRelatedFilesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
