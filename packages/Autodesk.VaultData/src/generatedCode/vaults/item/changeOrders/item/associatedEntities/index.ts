/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEntityCollectionFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type EntityCollection, type ErrorResponse } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/change-orders/{id}/associated-entities
 */
export interface AssociatedEntitiesRequestBuilder extends BaseRequestBuilder<AssociatedEntitiesRequestBuilder> {
    /**
     * Get all change order associated entities by its Id. The returned result include files which are being tracked by the change order, along with items that are associated with the change order.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EntityCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<AssociatedEntitiesRequestBuilderGetQueryParameters> | undefined) : Promise<EntityCollection | undefined>;
    /**
     * Get all change order associated entities by its Id. The returned result include files which are being tracked by the change order, along with items that are associated with the change order.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AssociatedEntitiesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all change order associated entities by its Id. The returned result include files which are being tracked by the change order, along with items that are associated with the change order.
 */
export interface AssociatedEntitiesRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * ``true``: Include only associated files that are in consumable(released) state.``false``: (Default) Include all associated files.
     */
    optionreleasedFilesOnly?: boolean;
    /**
     * ``true``: Include only associated items that are consumable.``false``: (Default) Include all associated items.
     */
    optionreleasedItemsOnly?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const AssociatedEntitiesRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/change-orders/{id}/associated-entities{?cursorState*,limit*,option%5BextendedModels%5D*,option%5BpropDefIds%5D*,option%5BreleasedFilesOnly%5D*,option%5BreleasedItemsOnly%5D*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AssociatedEntitiesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
    "optionreleasedFilesOnly": "option%5BreleasedFilesOnly%5D",
    "optionreleasedItemsOnly": "option%5BreleasedItemsOnly%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AssociatedEntitiesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AssociatedEntitiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEntityCollectionFromDiscriminatorValue,
        queryParametersMapper: AssociatedEntitiesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
