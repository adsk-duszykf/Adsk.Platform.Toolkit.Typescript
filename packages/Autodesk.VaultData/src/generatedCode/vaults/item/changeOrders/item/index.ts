/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChangeOrderFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type ChangeOrder, type ErrorResponse } from '../../../../models/index.js';
// @ts-ignore
import { AllRelatedFilesRequestBuilderRequestsMetadata, type AllRelatedFilesRequestBuilder } from './allRelatedFiles/index.js';
// @ts-ignore
import { AssociatedEntitiesRequestBuilderRequestsMetadata, type AssociatedEntitiesRequestBuilder } from './associatedEntities/index.js';
// @ts-ignore
import { CommentsRequestBuilderRequestsMetadata, type CommentsRequestBuilder } from './comments/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/change-orders/{id}
 */
export interface ChangeOrdersItemRequestBuilder extends BaseRequestBuilder<ChangeOrdersItemRequestBuilder> {
    /**
     * The allRelatedFiles property
     */
    get allRelatedFiles(): AllRelatedFilesRequestBuilder;
    /**
     * The associatedEntities property
     */
    get associatedEntities(): AssociatedEntitiesRequestBuilder;
    /**
     * The comments property
     */
    get comments(): CommentsRequestBuilder;
    /**
     * Get change order by its ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChangeOrder>}
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ChangeOrder | undefined>;
    /**
     * Get change order by its ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ChangeOrdersItemRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/change-orders/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChangeOrdersItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ChangeOrdersItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    allRelatedFiles: {
        requestsMetadata: AllRelatedFilesRequestBuilderRequestsMetadata,
    },
    associatedEntities: {
        requestsMetadata: AssociatedEntitiesRequestBuilderRequestsMetadata,
    },
    comments: {
        requestsMetadata: CommentsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChangeOrdersItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ChangeOrdersItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChangeOrderFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
