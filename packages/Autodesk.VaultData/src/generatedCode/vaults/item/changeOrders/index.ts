/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChangeOrderCollectionFromDiscriminatorValue, createErrorResponseFromDiscriminatorValue, type ChangeOrderCollection, type ErrorResponse } from '../../../models/index.js';
// @ts-ignore
import { ChangeOrdersItemRequestBuilderNavigationMetadata, ChangeOrdersItemRequestBuilderRequestsMetadata, type ChangeOrdersItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults/{-id}/change-orders
 */
export interface ChangeOrdersRequestBuilder extends BaseRequestBuilder<ChangeOrdersRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item.changeOrders.item collection
     * @param id The unique identifier of a change order.
     * @returns {ChangeOrdersItemRequestBuilder}
     */
     byId(id: string) : ChangeOrdersItemRequestBuilder;
    /**
     * Get list of change orders based on a set of conditions. E.g. /vaults/{vaultId}/change-orders?filter[state]=open&filter[assignees]=1,2,3,4Note that [assignees] is an additional filter that does not exists in property definitions.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChangeOrderCollection>}
     * @throws {ErrorResponse} error when the service returns a 401 status code
     */
     get(requestConfiguration?: RequestConfiguration<ChangeOrdersRequestBuilderGetQueryParameters> | undefined) : Promise<ChangeOrderCollection | undefined>;
    /**
     * Get list of change orders based on a set of conditions. E.g. /vaults/{vaultId}/change-orders?filter[state]=open&filter[assignees]=1,2,3,4Note that [assignees] is an additional filter that does not exists in property definitions.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChangeOrdersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get list of change orders based on a set of conditions. E.g. /vaults/{vaultId}/change-orders?filter[state]=open&filter[assignees]=1,2,3,4Note that [assignees] is an additional filter that does not exists in property definitions.
 */
export interface ChangeOrdersRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Search filter to include only change orders that assignees user list can perform. ex: filter[assignees]=1,2,3,4
     */
    filterassignees?: string;
    /**
     * ``true``: Include only open change orders.``false``: (Default) Include all change orders.
     */
    filteropenCOsOnly?: boolean;
    /**
     * Search filter to include only change orders that match state property. e.g. filter[state]=open
     */
    filterState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
    /**
     * ``true``: The response will include additional detailed information for each entity. Examples include:- For folders (getFolders), it will return `FolderExtended` instead of `Folder`, which includes additional information such as the parent folder.- For file versions (getFileVersions), it will return `FileVersionExtended` instead of `FileVersion`, which includes extra details like the checkout user ID.- For change orders (getChangeOrders), it will return `ChangeOrderExtended` instead of `ChangeOrder`, which provides further information such as the list of assignees.- For property definitions (getPropertyDefinitions), it will return `PropertyDefinitionExtended` instead of `PropertyDefinition`, which includes extra details like list values.``false``: (Default) The response will include basic information for each entity.
     */
    optionextendedModels?: boolean;
    /**
     * The properties that need to be returned. property ids separated by ',', e.g. '1,2,3' 'all' means return all properties.
     */
    optionpropDefIds?: string;
    /**
     * The value to use for the search. Based on 'SearchContent' option, this parameter will either search across all properties  or across all properties and content. Ex: q=Assembly, all objects that contain 'Assembly' within their properties will be returned. 
     */
    q?: string;
    /**
     * Specifies sorting criteria for search results. Supports multi-sort and accepted values for sort-order: asc, desc.  Ex: sort = Revision desc,Name asc
     */
    sort?: string;
}
/**
 * Uri template for the request builder.
 */
export const ChangeOrdersRequestBuilderUriTemplate = "{+baseurl}/vaults/{%2Did}/change-orders{?cursorState*,filter%5BState%5D*,filter%5Bassignees%5D*,filter%5BopenCOsOnly%5D*,limit*,option%5BextendedModels%5D*,option%5BpropDefIds%5D*,q*,sort*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChangeOrdersRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filterassignees": "filter%5Bassignees%5D",
    "filteropenCOsOnly": "filter%5BopenCOsOnly%5D",
    "filterState": "filter%5BState%5D",
    "optionextendedModels": "option%5BextendedModels%5D",
    "optionpropDefIds": "option%5BpropDefIds%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChangeOrdersRequestBuilderNavigationMetadata: Record<Exclude<keyof ChangeOrdersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ChangeOrdersItemRequestBuilderRequestsMetadata,
        navigationMetadata: ChangeOrdersItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChangeOrdersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ChangeOrdersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChangeOrderCollectionFromDiscriminatorValue,
        queryParametersMapper: ChangeOrdersRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
