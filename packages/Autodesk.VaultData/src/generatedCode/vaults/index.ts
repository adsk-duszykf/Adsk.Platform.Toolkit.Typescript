/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createVaultCollectionFromDiscriminatorValue, type VaultCollection } from '../models/index.js';
// @ts-ignore
import { ItemRequestBuilderNavigationMetadata, ItemRequestBuilderRequestsMetadata, type ItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type WithVaultIdAdvancedSearchRequestBuilder, WithVaultIdAdvancedSearchRequestBuilderRequestsMetadata } from './withVaultIdAdvancedSearch/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /vaults
 */
export interface VaultsRequestBuilder extends BaseRequestBuilder<VaultsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.vaults.item collection
     * @param id The unique identifier of a vault.
     * @returns {ItemRequestBuilder}
     */
     byId(id: string) : ItemRequestBuilder;
    /**
     * Get the list of all knowledge vaults on the server without logging in.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VaultCollection>}
     */
     get(requestConfiguration?: RequestConfiguration<VaultsRequestBuilderGetQueryParameters> | undefined) : Promise<VaultCollection | undefined>;
    /**
     * Get the list of all knowledge vaults on the server without logging in.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VaultsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Builds and executes requests for operations under /vaults/{vaultId}:advanced-search
     * @param vaultId The unique identifier of a vault.
     * @returns {WithVaultIdAdvancedSearchRequestBuilder}
     */
     withVaultIdAdvancedSearch(vaultId: string | undefined) : WithVaultIdAdvancedSearchRequestBuilder;
}
/**
 * Get the list of all knowledge vaults on the server without logging in.
 */
export interface VaultsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const VaultsRequestBuilderUriTemplate = "{+baseurl}/vaults{?cursorState*,limit*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const VaultsRequestBuilderNavigationMetadata: Record<Exclude<keyof VaultsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ItemRequestBuilderRequestsMetadata,
        navigationMetadata: ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["%2Did"],
    },
    withVaultIdAdvancedSearch: {
        requestsMetadata: WithVaultIdAdvancedSearchRequestBuilderRequestsMetadata,
        pathParametersMappings: ["vaultId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VaultsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: VaultsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createVaultCollectionFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
