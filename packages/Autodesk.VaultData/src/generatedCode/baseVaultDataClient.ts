/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { GroupsRequestBuilderNavigationMetadata, GroupsRequestBuilderRequestsMetadata, type GroupsRequestBuilder } from './groups/index.js';
// @ts-ignore
import { OpenapiSpecYmlRequestBuilderRequestsMetadata, type OpenapiSpecYmlRequestBuilder } from './openapiSpecYml/index.js';
// @ts-ignore
import { ProfileAttributeDefinitionsRequestBuilderNavigationMetadata, ProfileAttributeDefinitionsRequestBuilderRequestsMetadata, type ProfileAttributeDefinitionsRequestBuilder } from './profileAttributeDefinitions/index.js';
// @ts-ignore
import { RolesRequestBuilderNavigationMetadata, RolesRequestBuilderRequestsMetadata, type RolesRequestBuilder } from './roles/index.js';
// @ts-ignore
import { ServerInfoRequestBuilderRequestsMetadata, type ServerInfoRequestBuilder } from './serverInfo/index.js';
// @ts-ignore
import { SessionsRequestBuilderNavigationMetadata, SessionsRequestBuilderRequestsMetadata, type SessionsRequestBuilder } from './sessions/index.js';
// @ts-ignore
import { SystemOptionsRequestBuilderNavigationMetadata, SystemOptionsRequestBuilderRequestsMetadata, type SystemOptionsRequestBuilder } from './systemOptions/index.js';
// @ts-ignore
import { type UsersRequestBuilder, UsersRequestBuilderNavigationMetadata, UsersRequestBuilderRequestsMetadata } from './users/index.js';
// @ts-ignore
import { type VaultsRequestBuilder, VaultsRequestBuilderNavigationMetadata, VaultsRequestBuilderRequestsMetadata } from './vaults/index.js';
// @ts-ignore
import { apiClientProxifier, ParseNodeFactoryRegistry, SerializationWriterFactoryRegistry, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type RequestAdapter } from '@microsoft/kiota-abstractions';
// @ts-ignore
import { FormParseNodeFactory, FormSerializationWriterFactory } from '@microsoft/kiota-serialization-form';
// @ts-ignore
import { JsonParseNodeFactory, JsonSerializationWriterFactory } from '@microsoft/kiota-serialization-json';
// @ts-ignore
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
// @ts-ignore
import { TextParseNodeFactory, TextSerializationWriterFactory } from '@microsoft/kiota-serialization-text';

/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export interface BaseVaultDataClient extends BaseRequestBuilder<BaseVaultDataClient> {
    /**
     * The groups property
     */
    get groups(): GroupsRequestBuilder;
    /**
     * The openapiSpecYml property
     */
    get openapiSpecYml(): OpenapiSpecYmlRequestBuilder;
    /**
     * The profileAttributeDefinitions property
     */
    get profileAttributeDefinitions(): ProfileAttributeDefinitionsRequestBuilder;
    /**
     * The roles property
     */
    get roles(): RolesRequestBuilder;
    /**
     * The serverInfo property
     */
    get serverInfo(): ServerInfoRequestBuilder;
    /**
     * The sessions property
     */
    get sessions(): SessionsRequestBuilder;
    /**
     * The systemOptions property
     */
    get systemOptions(): SystemOptionsRequestBuilder;
    /**
     * The users property
     */
    get users(): UsersRequestBuilder;
    /**
     * The vaults property
     */
    get vaults(): VaultsRequestBuilder;
}
/**
 * Instantiates a new {@link BaseVaultDataClient} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createBaseVaultDataClient(requestAdapter: RequestAdapter) {
    if (requestAdapter === undefined) {
        throw new Error("requestAdapter cannot be undefined");
    }
    const serializationWriterFactory = requestAdapter.getSerializationWriterFactory() as SerializationWriterFactoryRegistry;
    const parseNodeFactoryRegistry = requestAdapter.getParseNodeFactory() as ParseNodeFactoryRegistry;
    const backingStoreFactory = requestAdapter.getBackingStoreFactory();
    
    if (parseNodeFactoryRegistry.registerDefaultDeserializer) {
        parseNodeFactoryRegistry.registerDefaultDeserializer(JsonParseNodeFactory, backingStoreFactory);
        parseNodeFactoryRegistry.registerDefaultDeserializer(TextParseNodeFactory, backingStoreFactory);
        parseNodeFactoryRegistry.registerDefaultDeserializer(FormParseNodeFactory, backingStoreFactory);
    }
    
    if (serializationWriterFactory.registerDefaultSerializer) {
        serializationWriterFactory.registerDefaultSerializer(JsonSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(TextSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(FormSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(MultipartSerializationWriterFactory);
    }
    
    if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === null || requestAdapter.baseUrl === "") {
        requestAdapter.baseUrl = "https://vaultGateway/AutodeskDM/Services/api/vault/v2";
    }
    const pathParameters: Record<string, unknown> = {
        "baseurl": requestAdapter.baseUrl,
    };
    return apiClientProxifier<BaseVaultDataClient>(requestAdapter, pathParameters, BaseVaultDataClientNavigationMetadata, undefined);
}
/**
 * Uri template for the request builder.
 */
export const BaseVaultDataClientUriTemplate = "{+baseurl}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BaseVaultDataClientNavigationMetadata: Record<Exclude<keyof BaseVaultDataClient, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    groups: {
        requestsMetadata: GroupsRequestBuilderRequestsMetadata,
        navigationMetadata: GroupsRequestBuilderNavigationMetadata,
    },
    openapiSpecYml: {
        requestsMetadata: OpenapiSpecYmlRequestBuilderRequestsMetadata,
    },
    profileAttributeDefinitions: {
        requestsMetadata: ProfileAttributeDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: ProfileAttributeDefinitionsRequestBuilderNavigationMetadata,
    },
    roles: {
        requestsMetadata: RolesRequestBuilderRequestsMetadata,
        navigationMetadata: RolesRequestBuilderNavigationMetadata,
    },
    serverInfo: {
        requestsMetadata: ServerInfoRequestBuilderRequestsMetadata,
    },
    sessions: {
        requestsMetadata: SessionsRequestBuilderRequestsMetadata,
        navigationMetadata: SessionsRequestBuilderNavigationMetadata,
    },
    systemOptions: {
        requestsMetadata: SystemOptionsRequestBuilderRequestsMetadata,
        navigationMetadata: SystemOptionsRequestBuilderNavigationMetadata,
    },
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
        navigationMetadata: UsersRequestBuilderNavigationMetadata,
    },
    vaults: {
        requestsMetadata: VaultsRequestBuilderRequestsMetadata,
        navigationMetadata: VaultsRequestBuilderNavigationMetadata,
    },
};
/* tslint:enable */
/* eslint-enable */
