/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServerInfoGetResponse}
 */
// @ts-ignore
export function createServerInfoGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServerInfoGetResponse;
}
/**
 * The deserialization information for the current model
 * @param ServerInfoGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServerInfoGetResponse(serverInfoGetResponse: Partial<ServerInfoGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { serverInfoGetResponse.name = n.getStringValue(); },
        "productVersion": n => { serverInfoGetResponse.productVersion = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServerInfoGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServerInfoGetResponse(writer: SerializationWriter, serverInfoGetResponse: Partial<ServerInfoGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!serverInfoGetResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", serverInfoGetResponse.name);
    writer.writeStringValue("productVersion", serverInfoGetResponse.productVersion);
    writer.writeAdditionalData(serverInfoGetResponse.additionalData);
}
export interface ServerInfoGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The internal product name. For backward compatibility, this value contains the original product name, which may not be the same as the current product name. 
     */
    name?: string | null;
    /**
     * The product version currently installed. ex:30.0.91.0
     */
    productVersion?: string | null;
}
/**
 * Builds and executes requests for operations under /server-info
 */
export interface ServerInfoRequestBuilder extends BaseRequestBuilder<ServerInfoRequestBuilder> {
    /**
     * Get some metadata information about server such as product version, etc.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServerInfoGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServerInfoGetResponse | undefined>;
    /**
     * Get some metadata information about server such as product version, etc.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ServerInfoRequestBuilderUriTemplate = "{+baseurl}/server-info";
/**
 * Metadata for all the requests in the request builder.
 */
export const ServerInfoRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ServerInfoRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createServerInfoGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
