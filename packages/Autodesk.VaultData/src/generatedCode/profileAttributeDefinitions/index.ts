/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createProfileAttributeDefinitionCollectionFromDiscriminatorValue, type ErrorResponse, type ProfileAttributeDefinitionCollection } from '../models/index.js';
// @ts-ignore
import { ProfileAttributeDefinitionsItemRequestBuilderRequestsMetadata, type ProfileAttributeDefinitionsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /profile-attribute-definitions
 */
export interface ProfileAttributeDefinitionsRequestBuilder extends BaseRequestBuilder<ProfileAttributeDefinitionsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.profileAttributeDefinitions.item collection
     * @param id The unique identifier of a profile attribute definition.
     * @returns {ProfileAttributeDefinitionsItemRequestBuilder}
     */
     byId(id: string) : ProfileAttributeDefinitionsItemRequestBuilder;
    /**
     * Get all profile attribute definitions 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProfileAttributeDefinitionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     */
     get(requestConfiguration?: RequestConfiguration<ProfileAttributeDefinitionsRequestBuilderGetQueryParameters> | undefined) : Promise<ProfileAttributeDefinitionCollection | undefined>;
    /**
     * Get all profile attribute definitions 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProfileAttributeDefinitionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get all profile attribute definitions 
 */
export interface ProfileAttributeDefinitionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Types the profile attribute definition is associated with. Allowed values: User, Group or All
     */
    filterassociation?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const ProfileAttributeDefinitionsRequestBuilderUriTemplate = "{+baseurl}/profile-attribute-definitions{?cursorState*,filter%5Bassociation%5D*,limit*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProfileAttributeDefinitionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filterassociation": "filter%5Bassociation%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProfileAttributeDefinitionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ProfileAttributeDefinitionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ProfileAttributeDefinitionsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProfileAttributeDefinitionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProfileAttributeDefinitionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProfileAttributeDefinitionCollectionFromDiscriminatorValue,
        queryParametersMapper: ProfileAttributeDefinitionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
