/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createVaultOptionCollectionFromDiscriminatorValue, createVaultOptionFromDiscriminatorValue, serializeVaultOption, type ErrorResponse, type VaultOption, type VaultOptionCollection } from '../models/index.js';
// @ts-ignore
import { SystemOptionsItemRequestBuilderRequestsMetadata, type SystemOptionsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SystemOptionsPostRequestBody}
 */
// @ts-ignore
export function createSystemOptionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSystemOptionsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param SystemOptionsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSystemOptionsPostRequestBody(systemOptionsPostRequestBody: Partial<SystemOptionsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { systemOptionsPostRequestBody.name = n.getStringValue(); },
        "value": n => { systemOptionsPostRequestBody.value = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SystemOptionsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSystemOptionsPostRequestBody(writer: SerializationWriter, systemOptionsPostRequestBody: Partial<SystemOptionsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!systemOptionsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", systemOptionsPostRequestBody.name);
    writer.writeStringValue("value", systemOptionsPostRequestBody.value);
    writer.writeAdditionalData(systemOptionsPostRequestBody.additionalData);
}
export interface SystemOptionsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The name of the option.
     */
    name?: string | null;
    /**
     * The value of the option.
     */
    value?: string | null;
}
/**
 * Builds and executes requests for operations under /system-options
 */
export interface SystemOptionsRequestBuilder extends BaseRequestBuilder<SystemOptionsRequestBuilder> {
    /**
     * Gets an item from the Autodesk.VaultData.systemOptions.item collection
     * @param id The unique identifier of an option.
     * @returns {SystemOptionsItemRequestBuilder}
     */
     byId(id: string) : SystemOptionsItemRequestBuilder;
    /**
     * Returns list of options which applies to the entire system. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VaultOptionCollection>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     */
     get(requestConfiguration?: RequestConfiguration<SystemOptionsRequestBuilderGetQueryParameters> | undefined) : Promise<VaultOptionCollection | undefined>;
    /**
     * Creates a system wide option with input name and value
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VaultOption>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 409 status code
     */
     post(body: SystemOptionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VaultOption | undefined>;
    /**
     * Returns list of options which applies to the entire system. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SystemOptionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Creates a system wide option with input name and value
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SystemOptionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Returns list of options which applies to the entire system. 
 */
export interface SystemOptionsRequestBuilderGetQueryParameters {
    /**
     * Indicates the state of the cursor for pagination. Use this parameter to navigate through paged results
     */
    cursorState?: string;
    /**
     * Filters and returns items with exact match
     */
    filtername?: string;
    /**
     * Specifies the number of results to return per page. Maximum limit is controlled by "Page size conifguration" settingwhich could be updated using ADMS ("Global Setting" -> "Page size conifguration").
     */
    limit?: number;
}
/**
 * Uri template for the request builder.
 */
export const SystemOptionsRequestBuilderUriTemplate = "{+baseurl}/system-options{?cursorState*,filter%5Bname%5D*,limit*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SystemOptionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filtername": "filter%5Bname%5D",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SystemOptionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SystemOptionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: SystemOptionsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SystemOptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SystemOptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVaultOptionCollectionFromDiscriminatorValue,
        queryParametersMapper: SystemOptionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SystemOptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVaultOptionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSystemOptionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
