/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorResponseFromDiscriminatorValue, createVaultOptionFromDiscriminatorValue, serializeVaultOption, type ErrorResponse, type VaultOption } from '../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SystemOptionsPatchRequestBody}
 */
// @ts-ignore
export function createSystemOptionsPatchRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSystemOptionsPatchRequestBody;
}
/**
 * The deserialization information for the current model
 * @param SystemOptionsPatchRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSystemOptionsPatchRequestBody(systemOptionsPatchRequestBody: Partial<SystemOptionsPatchRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { systemOptionsPatchRequestBody.value = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SystemOptionsPatchRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSystemOptionsPatchRequestBody(writer: SerializationWriter, systemOptionsPatchRequestBody: Partial<SystemOptionsPatchRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!systemOptionsPatchRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("value", systemOptionsPatchRequestBody.value);
    writer.writeAdditionalData(systemOptionsPatchRequestBody.additionalData);
}
/**
 * Builds and executes requests for operations under /system-options/{id}
 */
export interface SystemOptionsItemRequestBuilder extends BaseRequestBuilder<SystemOptionsItemRequestBuilder> {
    /**
     * Delete an option (By ID) which applies to the entire system
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get an option (By ID) which applies to the entire system
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VaultOption>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VaultOption | undefined>;
    /**
     * Update an option (By ID) which applies to the entire system
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VaultOption>}
     * @throws {ErrorResponse} error when the service returns a 400 status code
     * @throws {ErrorResponse} error when the service returns a 401 status code
     * @throws {ErrorResponse} error when the service returns a 403 status code
     * @throws {ErrorResponse} error when the service returns a 404 status code
     */
     patch(body: SystemOptionsPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VaultOption | undefined>;
    /**
     * Delete an option (By ID) which applies to the entire system
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get an option (By ID) which applies to the entire system
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update an option (By ID) which applies to the entire system
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SystemOptionsPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface SystemOptionsPatchRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The value of the option
     */
    value?: string | null;
}
/**
 * Uri template for the request builder.
 */
export const SystemOptionsItemRequestBuilderUriTemplate = "{+baseurl}/system-options/{id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const SystemOptionsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SystemOptionsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: SystemOptionsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVaultOptionFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: SystemOptionsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVaultOptionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSystemOptionsPatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
