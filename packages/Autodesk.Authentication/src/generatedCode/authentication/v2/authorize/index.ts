/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /authentication/v2/authorize
 */
export interface AuthorizeRequestBuilder extends BaseRequestBuilder<AuthorizeRequestBuilder> {
    /**
     * To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details <Link>
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     get(requestConfiguration?: RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters> | undefined) : Promise<void>;
    /**
     * To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details <Link>
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details <Link>
 */
export interface AuthorizeRequestBuilderGetQueryParameters {
    /**
     * A Json object carries information to Identity.
     */
    authoptions?: string;
    /**
     * Client ID.
     */
    clientId?: string;
    /**
     * A challenge for PKCE. The challenge is verified in the access token request.
     */
    codeChallenge?: string;
    /**
     * Method used to derive the code challenge for PKCE. Must be S256 if `code_challenge` is present.
     */
    codeChallengeMethod?: string;
    /**
     * A string value used to associate a Client session with an ID Token, and to mitigate replay attacks. Required if `response_type` is `id_token` or `token`
     */
    nonce?: string;
    /**
     * Values supported: `login` and `none`.`login`: Always prompt the user for authentication, regardless of the login session.`prompt`: Do not prompt user for authentication. If user is not logged in, the calling application receives an error.
     */
    prompt?: string;
    /**
     * URL-encoded callback URL.
     */
    redirectUri?: string;
    /**
     * The mode of response for the supplied `response_type`. Supported values are `fragment`, `form_post` or `query`. `query` is not supported if the `response_type` is `token`.
     */
    responseMode?: string;
    /**
     * Must be `code` for authorization code grant, `id_token` for an OpenID Connect ID token.
     */
    responseType?: string;
    /**
     * URL-encoded, a space-delimited list of scopes. Supported values:1. device_sso2. All scopes mentioned in [Forge Developers Guide](https://forge.autodesk.com/en/docs/oauth/v3/developers_guide/scopes/)
     */
    scope?: string;
    /**
     * The payload that authorization flow will pass back verbatim in state query parameter to the callback URL. It can contain alphanumeric, comma, period, underscore, and hyphen characters.
     */
    state?: string;
}
/**
 * Uri template for the request builder.
 */
export const AuthorizeRequestBuilderUriTemplate = "{+baseurl}/authentication/v2/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&state={state}{&authoptions*,code_challenge*,code_challenge_method*,nonce*,prompt*,response_mode*,scope*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuthorizeRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "clientId": "client_id",
    "codeChallenge": "code_challenge",
    "codeChallengeMethod": "code_challenge_method",
    "redirectUri": "redirect_uri",
    "responseMode": "response_mode",
    "responseType": "response_type",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuthorizeRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AuthorizeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendNoResponseContent",
        queryParametersMapper: AuthorizeRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
