/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createIntrospecttokenFromDiscriminatorValue, serializeIntrospecttoken, type Introspecttoken } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IntrospectPostRequestBody}
 */
// @ts-ignore
export function createIntrospectPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIntrospectPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Introspecttoken400Error}
 */
// @ts-ignore
export function createIntrospecttoken400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIntrospecttoken400Error;
}
/**
 * The deserialization information for the current model
 * @param IntrospectPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIntrospectPostRequestBody(introspectPostRequestBody: Partial<IntrospectPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "client_id": n => { introspectPostRequestBody.clientId = n.getStringValue(); },
        "token": n => { introspectPostRequestBody.token = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Introspecttoken400Error The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIntrospecttoken400Error(introspecttoken400Error: Partial<Introspecttoken400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error_description": n => { introspecttoken400Error.errorDescription = n.getStringValue(); },
        "error": n => { introspecttoken400Error.errorEscaped = n.getStringValue(); },
    }
}
export interface IntrospectPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The client_id property
     */
    clientId?: string | null;
    /**
     * The token property
     */
    token?: string | null;
}
/**
 * Builds and executes requests for operations under /authentication/v2/introspect
 */
export interface IntrospectRequestBuilder extends BaseRequestBuilder<IntrospectRequestBuilder> {
    /**
     * Examines an access token including the reference token and returns the status information of the tokens.If the token is active, additional information is returned.If the token is expired, invalid or revoked, it returns the response as status: inactive.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Introspecttoken>}
     * @throws {Introspecttoken400Error} error when the service returns a 400 status code
     */
     post(body: IntrospectPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Introspecttoken | undefined>;
    /**
     * Examines an access token including the reference token and returns the status information of the tokens.If the token is active, additional information is returned.If the token is expired, invalid or revoked, it returns the response as status: inactive.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: IntrospectPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface Introspecttoken400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The error_description property
     */
    errorDescription?: string | null;
    /**
     * The error property
     */
    errorEscaped?: string | null;
}
/**
 * Serializes information the current object
 * @param IntrospectPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIntrospectPostRequestBody(writer: SerializationWriter, introspectPostRequestBody: Partial<IntrospectPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!introspectPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("client_id", introspectPostRequestBody.clientId);
    writer.writeStringValue("token", introspectPostRequestBody.token);
    writer.writeAdditionalData(introspectPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param Introspecttoken400Error The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIntrospecttoken400Error(writer: SerializationWriter, introspecttoken400Error: Partial<Introspecttoken400Error> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!introspecttoken400Error || isSerializingDerivedType) { return; }
    writer.writeStringValue("error_description", introspecttoken400Error.errorDescription);
    writer.writeStringValue("error", introspecttoken400Error.errorEscaped);
    writer.writeAdditionalData(introspecttoken400Error.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const IntrospectRequestBuilderUriTemplate = "{+baseurl}/authentication/v2/introspect";
/**
 * Metadata for all the requests in the request builder.
 */
export const IntrospectRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: IntrospectRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createIntrospecttoken400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createIntrospecttokenFromDiscriminatorValue,
        requestBodyContentType: "application/x-www-form-urlencoded",
        requestBodySerializer: serializeIntrospectPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
