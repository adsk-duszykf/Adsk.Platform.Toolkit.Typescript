/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type UsersRequestBuilder, UsersRequestBuilderNavigationMetadata, UsersRequestBuilderRequestsMetadata } from './users/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProjectGetResponse_products}
 */
// @ts-ignore
export function createWithProjectGetResponse_productsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithProjectGetResponse_products;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProjectGetResponse_projectValue}
 */
// @ts-ignore
export function createWithProjectGetResponse_projectValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithProjectGetResponse_projectValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProjectGetResponse}
 */
// @ts-ignore
export function createWithProjectGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithProjectGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithProjectGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProjectGetResponse(withProjectGetResponse: Partial<WithProjectGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accountId": n => { withProjectGetResponse.accountId = n.getGuidValue(); },
        "addressLine1": n => { withProjectGetResponse.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { withProjectGetResponse.addressLine2 = n.getStringValue(); },
        "adminGroupId": n => { withProjectGetResponse.adminGroupId = n.getStringValue(); },
        "businessUnitId": n => { withProjectGetResponse.businessUnitId = n.getGuidValue(); },
        "city": n => { withProjectGetResponse.city = n.getStringValue(); },
        "classification": n => { withProjectGetResponse.classification = n.getEnumValue<WithProjectGetResponse_classification>(WithProjectGetResponse_classificationObject); },
        "companyCount": n => { withProjectGetResponse.companyCount = n.getNumberValue(); },
        "constructionType": n => { withProjectGetResponse.constructionType = n.getStringValue(); },
        "contractType": n => { withProjectGetResponse.contractType = n.getStringValue(); },
        "country": n => { withProjectGetResponse.country = n.getStringValue(); },
        "createdAt": n => { withProjectGetResponse.createdAt = n.getDateValue(); },
        "currentPhase": n => { withProjectGetResponse.currentPhase = n.getStringValue(); },
        "deliveryMethod": n => { withProjectGetResponse.deliveryMethod = n.getStringValue(); },
        "endDate": n => { withProjectGetResponse.endDate = n.getStringValue(); },
        "id": n => { withProjectGetResponse.id = n.getGuidValue(); },
        "imageUrl": n => { withProjectGetResponse.imageUrl = n.getStringValue(); },
        "jobNumber": n => { withProjectGetResponse.jobNumber = n.getStringValue(); },
        "lastSignIn": n => { withProjectGetResponse.lastSignIn = n.getDateValue(); },
        "latitude": n => { withProjectGetResponse.latitude = n.getStringValue(); },
        "longitude": n => { withProjectGetResponse.longitude = n.getStringValue(); },
        "memberCount": n => { withProjectGetResponse.memberCount = n.getNumberValue(); },
        "memberGroupId": n => { withProjectGetResponse.memberGroupId = n.getStringValue(); },
        "name": n => { withProjectGetResponse.name = n.getStringValue(); },
        "platform": n => { withProjectGetResponse.platform = n.getEnumValue<WithProjectGetResponse_platform>(WithProjectGetResponse_platformObject); },
        "postalCode": n => { withProjectGetResponse.postalCode = n.getStringValue(); },
        "products": n => { withProjectGetResponse.products = n.getCollectionOfObjectValues<WithProjectGetResponse_products>(createWithProjectGetResponse_productsFromDiscriminatorValue); },
        "projectValue": n => { withProjectGetResponse.projectValue = n.getObjectValue<WithProjectGetResponse_projectValue>(createWithProjectGetResponse_projectValueFromDiscriminatorValue); },
        "sheetCount": n => { withProjectGetResponse.sheetCount = n.getNumberValue(); },
        "startDate": n => { withProjectGetResponse.startDate = n.getStringValue(); },
        "stateOrProvince": n => { withProjectGetResponse.stateOrProvince = n.getStringValue(); },
        "status": n => { withProjectGetResponse.status = n.getEnumValue<WithProjectGetResponse_status>(WithProjectGetResponse_statusObject); },
        "templateId": n => { withProjectGetResponse.templateId = n.getGuidValue(); },
        "thumbnailImageUrl": n => { withProjectGetResponse.thumbnailImageUrl = n.getStringValue(); },
        "timezone": n => { withProjectGetResponse.timezone = n.getStringValue(); },
        "type": n => { withProjectGetResponse.type = n.getStringValue(); },
        "updatedAt": n => { withProjectGetResponse.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithProjectGetResponse_products The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProjectGetResponse_products(withProjectGetResponse_products: Partial<WithProjectGetResponse_products> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "icon": n => { withProjectGetResponse_products.icon = n.getStringValue(); },
        "key": n => { withProjectGetResponse_products.key = n.getEnumValue<WithProjectGetResponse_products_key>(WithProjectGetResponse_products_keyObject); },
        "language": n => { withProjectGetResponse_products.language = n.getEnumValue<WithProjectGetResponse_products_language>(WithProjectGetResponse_products_languageObject); },
        "name": n => { withProjectGetResponse_products.name = n.getStringValue(); },
        "status": n => { withProjectGetResponse_products.status = n.getEnumValue<WithProjectGetResponse_products_status>(WithProjectGetResponse_products_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithProjectGetResponse_projectValue The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProjectGetResponse_projectValue(withProjectGetResponse_projectValue: Partial<WithProjectGetResponse_projectValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { withProjectGetResponse_projectValue.currency = n.getEnumValue<WithProjectGetResponse_projectValue_currency>(WithProjectGetResponse_projectValue_currencyObject) ?? WithProjectGetResponse_projectValue_currencyObject.USD; },
        "value": n => { withProjectGetResponse_projectValue.value = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProjectGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProjectGetResponse(writer: SerializationWriter, withProjectGetResponse: Partial<WithProjectGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withProjectGetResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("accountId", withProjectGetResponse.accountId);
    writer.writeStringValue("addressLine1", withProjectGetResponse.addressLine1);
    writer.writeStringValue("addressLine2", withProjectGetResponse.addressLine2);
    writer.writeStringValue("adminGroupId", withProjectGetResponse.adminGroupId);
    writer.writeGuidValue("businessUnitId", withProjectGetResponse.businessUnitId);
    writer.writeStringValue("city", withProjectGetResponse.city);
    writer.writeEnumValue<WithProjectGetResponse_classification>("classification", withProjectGetResponse.classification);
    writer.writeNumberValue("companyCount", withProjectGetResponse.companyCount);
    writer.writeStringValue("constructionType", withProjectGetResponse.constructionType);
    writer.writeStringValue("contractType", withProjectGetResponse.contractType);
    writer.writeStringValue("country", withProjectGetResponse.country);
    writer.writeDateValue("createdAt", withProjectGetResponse.createdAt);
    writer.writeStringValue("currentPhase", withProjectGetResponse.currentPhase);
    writer.writeStringValue("deliveryMethod", withProjectGetResponse.deliveryMethod);
    writer.writeStringValue("endDate", withProjectGetResponse.endDate);
    writer.writeGuidValue("id", withProjectGetResponse.id);
    writer.writeStringValue("imageUrl", withProjectGetResponse.imageUrl);
    writer.writeStringValue("jobNumber", withProjectGetResponse.jobNumber);
    writer.writeDateValue("lastSignIn", withProjectGetResponse.lastSignIn);
    writer.writeStringValue("latitude", withProjectGetResponse.latitude);
    writer.writeStringValue("longitude", withProjectGetResponse.longitude);
    writer.writeNumberValue("memberCount", withProjectGetResponse.memberCount);
    writer.writeStringValue("memberGroupId", withProjectGetResponse.memberGroupId);
    writer.writeStringValue("name", withProjectGetResponse.name);
    writer.writeEnumValue<WithProjectGetResponse_platform>("platform", withProjectGetResponse.platform);
    writer.writeStringValue("postalCode", withProjectGetResponse.postalCode);
    writer.writeCollectionOfObjectValues<WithProjectGetResponse_products>("products", withProjectGetResponse.products, serializeWithProjectGetResponse_products);
    writer.writeObjectValue<WithProjectGetResponse_projectValue>("projectValue", withProjectGetResponse.projectValue, serializeWithProjectGetResponse_projectValue);
    writer.writeNumberValue("sheetCount", withProjectGetResponse.sheetCount);
    writer.writeStringValue("startDate", withProjectGetResponse.startDate);
    writer.writeStringValue("stateOrProvince", withProjectGetResponse.stateOrProvince);
    writer.writeEnumValue<WithProjectGetResponse_status>("status", withProjectGetResponse.status);
    writer.writeGuidValue("templateId", withProjectGetResponse.templateId);
    writer.writeStringValue("thumbnailImageUrl", withProjectGetResponse.thumbnailImageUrl);
    writer.writeStringValue("timezone", withProjectGetResponse.timezone);
    writer.writeStringValue("type", withProjectGetResponse.type);
    writer.writeDateValue("updatedAt", withProjectGetResponse.updatedAt);
    writer.writeAdditionalData(withProjectGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProjectGetResponse_products The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProjectGetResponse_products(writer: SerializationWriter, withProjectGetResponse_products: Partial<WithProjectGetResponse_products> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withProjectGetResponse_products || isSerializingDerivedType) { return; }
    writer.writeStringValue("icon", withProjectGetResponse_products.icon);
    writer.writeEnumValue<WithProjectGetResponse_products_key>("key", withProjectGetResponse_products.key);
    writer.writeEnumValue<WithProjectGetResponse_products_language>("language", withProjectGetResponse_products.language);
    writer.writeStringValue("name", withProjectGetResponse_products.name);
    writer.writeEnumValue<WithProjectGetResponse_products_status>("status", withProjectGetResponse_products.status);
    writer.writeAdditionalData(withProjectGetResponse_products.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProjectGetResponse_projectValue The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProjectGetResponse_projectValue(writer: SerializationWriter, withProjectGetResponse_projectValue: Partial<WithProjectGetResponse_projectValue> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withProjectGetResponse_projectValue || isSerializingDerivedType) { return; }
    writer.writeEnumValue<WithProjectGetResponse_projectValue_currency>("currency", withProjectGetResponse_projectValue.currency ?? WithProjectGetResponse_projectValue_currencyObject.USD);
    writer.writeNumberValue("value", withProjectGetResponse_projectValue.value);
    writer.writeAdditionalData(withProjectGetResponse_projectValue.additionalData);
}
export interface WithProjectGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The account ID associated with the project.
     */
    accountId?: Guid | null;
    /**
     * The first line of the project’s address.Max length: 255
     */
    addressLine1?: string | null;
    /**
     * Additional address details for the project location.Max length: 255
     */
    addressLine2?: string | null;
    /**
     * Not relevantMax length: 25
     */
    adminGroupId?: string | null;
    /**
     * The ID of the business unit that the project is associated with.
     */
    businessUnitId?: Guid | null;
    /**
     * The city wher the project is located.Max length: 255
     */
    city?: string | null;
    /**
     * The classification of the project. Possible values:- ``production`` – Standard project.- ``template`` – A project that serves as a template for creating new projects.- ``component`` – A placeholder project containing reusable components (e.g., forms). Only one component project is allowed per account. Known as a library in the ACC UI.- ``sample`` – A single sample project automatically created for ACC trials (limited to one per account).
     */
    classification?: WithProjectGetResponse_classification | null;
    /**
     * The total number of companies associated with the project.Note that this field is relevant only in responses. It is ignored in requests.
     */
    companyCount?: number | null;
    /**
     * The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.
     */
    constructionType?: string | null;
    /**
     * The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.
     */
    contractType?: string | null;
    /**
     * The country where the project is located, using an ISO 3166-1 code.Max length: 255
     */
    country?: string | null;
    /**
     * The timestamp when the project was created, in ISO 8601 format. This value is set at creation and does not change.
     */
    createdAt?: Date | null;
    /**
     * The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.Any value is accepted.
     */
    currentPhase?: string | null;
    /**
     * The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.
     */
    deliveryMethod?: string | null;
    /**
     * The estimated end date for the project, in ISO 8601 format.
     */
    endDate?: string | null;
    /**
     * The internally generated ID for the project.
     */
    id?: Guid | null;
    /**
     * The URL of the main image associated with the project. This field can be ``null``.Max length: 255
     */
    imageUrl?: string | null;
    /**
     * A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.Max length: 100
     */
    jobNumber?: string | null;
    /**
     * The timestamp of the last time someone signed into the project.
     */
    lastSignIn?: Date | null;
    /**
     * The latitude coordinate of the project location.Max length: 25
     */
    latitude?: string | null;
    /**
     * The longitude coordinate of the project location.Max length: 25
     */
    longitude?: string | null;
    /**
     * The total number of members on the project.Note that this field is relevant only in responses. It is ignored in requests.
     */
    memberCount?: number | null;
    /**
     * Not relevantMax length: 25
     */
    memberGroupId?: string | null;
    /**
     * The name of the project.Max length: 255
     */
    name?: string | null;
    /**
     * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.Note that this field is relevant only in responses. It is ignored in requests.
     */
    platform?: WithProjectGetResponse_platform | null;
    /**
     * The postal or ZIP code of the project location.Max length: 255
     */
    postalCode?: string | null;
    /**
     * An array of the product objects associated with the project.Note that this array is relevant only in responses. It is ignored in requests.When a project is created, every product in the same account as the project is activated for the project. You can call `PATCH users/:userId </en/docs/acc/v1/reference/http/admin-projects-projectId-users-userId-PATCH/>`_ to separately activate one or more of the returned products for each user assigned to the project.
     */
    products?: WithProjectGetResponse_products[] | null;
    /**
     * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
     */
    projectValue?: WithProjectGetResponse_projectValue | null;
    /**
     * The total number of sheets associated with the project.Note that this field is relevant only in responses. It is ignored in requests.
     */
    sheetCount?: number | null;
    /**
     * The estimated start date for the project, in ISO 8601 format.
     */
    startDate?: string | null;
    /**
     * The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.Max length: 255
     */
    stateOrProvince?: string | null;
    /**
     * The status of the project.Possible values: ``active``, ``pending``, ``archived`` and ``suspended``.
     */
    status?: WithProjectGetResponse_status | null;
    /**
     * The ID of the project that was used as a template to create this project.
     */
    templateId?: Guid | null;
    /**
     * The URL of the project’s thumbnail image. This field can be ``null``.Max length: 255
     */
    thumbnailImageUrl?: string | null;
    /**
     * The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database <https://www.iana.org/time-zones>`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``.Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``
     */
    timezone?: string | null;
    /**
     * The type of the project. Any value is accepted, but the following are recommended:Possible values: ``Convention Center``, ``Data Center``, ``Hotel / Motel``, ``Office``, ``Parking Structure / Garage``, ``Performing Arts``, ``Restaurant``, ``Retail``, ``Stadium / Arena``, ``Theme Park``, ``Warehouse (non-manufacturing)``, ``Assisted Living / Nursing Home``, ``Hospital``, ``Medical Laboratory``, ``Medical Office``, ``OutPatient Surgery Center``, ``Court House``, ``Dormitory``, ``Education Facility``, ``Government Building``, ``Library``, ``Military Facility``, ``Museum``, ``Prison / Correctional Facility``, ``Recreation Building``, ``Religious Building``, ``Research Facility / Laboratory``, ``Multi-Family Housing``, ``Single-Family Housing``, ``Airport``, ``Bridge``, ``Canal / Waterway``, ``Dams / Flood Control / Reservoirs``, ``Harbor / River Development``, ``Rail``, ``Seaport``, ``Streets / Roads / Highways``, ``Transportation Building``, ``Tunnel``, ``Waste Water / Sewers``, ``Water Supply``, ``Manufacturing / Factory``, ``Mining Facility``, ``Oil & Gas``, ``Plant``, ``Power Plant``, ``Solar Farm``, ``Utilities``, ``Wind Farm``, ``Demonstration Project``, ``Template Project`` and ``Training Project``.Max length: 255
     */
    type?: string | null;
    /**
     * The timestamp when the project was last updated, in ISO 8601 format. This reflects changes to project fields but not updates to resources within the project.
     */
    updatedAt?: Date | null;
}
export type WithProjectGetResponse_classification = (typeof WithProjectGetResponse_classificationObject)[keyof typeof WithProjectGetResponse_classificationObject];
export type WithProjectGetResponse_platform = (typeof WithProjectGetResponse_platformObject)[keyof typeof WithProjectGetResponse_platformObject];
export interface WithProjectGetResponse_products extends AdditionalDataHolder, Parsable {
    /**
     * The URL of the icon associated with the product.
     */
    icon?: string | null;
    /**
     * A machine-readable identifier for the product (e.g., docs, build).Each product has a unique key used throughout the API for identification, filtering, and integration logic (e.g., in query parameters like ``filter[key]``).Possible values:ACC - ``autoSpecs``, ``build``, ``cost``, ``designCollaboration``, ``docs``, ``insight``, ``modelCoordination``, ``projectAdministration``, and ``takeoff``.BIM 360 - ``assets``, ``costManagement``, ``designCollaboration``, ``documentManagement``, ``field``, ``fieldManagement``, ``glue``, ``insight``, ``modelCoordination``, ``plan``, ``projectAdministration``, ``projectHome``, ``projectManagement``, and ``quantification``.Note that this endpoint returns only ACC products. Other endpoints, such as `GET projects </en/docs/acc/v1/reference/http/admin-accountsaccountidprojects-GET/>`_ and `GET projects/:projectId </en/docs/acc/v1/reference/http/admin-projects-projectId-GET/>`_, may return both ACC and BIM 360 projects. In those responses, product keys may include BIM 360 values.
     */
    key?: WithProjectGetResponse_products_key | null;
    /**
     * The language for the project. Only valid for the ``field`` product.Possible values: ``en``, ``de``, ``nl``, ``zh``, ``de-CH``
     */
    language?: WithProjectGetResponse_products_language | null;
    /**
     * The name of the product.
     */
    name?: string | null;
    /**
     * The current status of the product. Possible values:- ``activating``: Product activation is in progress.- ``activationFailed``: Product activation has failed.- ``active``: Product activation is completed.- ``deactivating``: Product deactivation is in progress. (Applicable to BIM 360 only)- ``deactivationFailed``: Product deactivation has failed. (Applicable to BIM 360 only)- ``inactive``: Product deactivation is completed. (Applicable to BIM 360 only)- ``available``: Product is available for activation. (Applicable to BIM 360 only)
     */
    status?: WithProjectGetResponse_products_status | null;
}
export type WithProjectGetResponse_products_key = (typeof WithProjectGetResponse_products_keyObject)[keyof typeof WithProjectGetResponse_products_keyObject];
export type WithProjectGetResponse_products_language = (typeof WithProjectGetResponse_products_languageObject)[keyof typeof WithProjectGetResponse_products_languageObject];
export type WithProjectGetResponse_products_status = (typeof WithProjectGetResponse_products_statusObject)[keyof typeof WithProjectGetResponse_products_statusObject];
/**
 * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
 */
export interface WithProjectGetResponse_projectValue extends AdditionalDataHolder, Parsable {
    /**
     * The currency of the project value. Default: ``USD``.Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
     */
    currency?: WithProjectGetResponse_projectValue_currency | null;
    /**
     * The estimated cost of the project, based on the ``currency`` specified in the currency field. Default: ``0``.
     */
    value?: number | null;
}
export type WithProjectGetResponse_projectValue_currency = (typeof WithProjectGetResponse_projectValue_currencyObject)[keyof typeof WithProjectGetResponse_projectValue_currencyObject];
export type WithProjectGetResponse_status = (typeof WithProjectGetResponse_statusObject)[keyof typeof WithProjectGetResponse_statusObject];
/**
 * Builds and executes requests for operations under /construction/admin/v1/projects/{projectId}
 */
export interface WithProjectItemRequestBuilder extends BaseRequestBuilder<WithProjectItemRequestBuilder> {
    /**
     * The users property
     */
    get users(): UsersRequestBuilder;
    /**
     * .. include:: ../../../../_snippets/forward-compatible.rst
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithProjectGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<WithProjectItemRequestBuilderGetQueryParameters> | undefined) : Promise<WithProjectGetResponse | undefined>;
    /**
     * .. include:: ../../../../_snippets/forward-compatible.rst
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithProjectItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * .. include:: ../../../../_snippets/forward-compatible.rst
 */
export interface WithProjectItemRequestBuilderGetQueryParameters {
    /**
     * A comma-separated list of the project fields to include in the response. Default value: all fields.Possible values: ``accountId``, ``addressLine1``, ``addressLine2``, ``businessUnitId``, ``city``, ``companyCount``, ``constructionType``, ``country``, ``createdAt``, ``deliveryMethod``, ``endDate``, ``imageUrl``, ``jobNumber``, ``lastSignIn``, ``latitude``, ``longitude``, ``memberCount``, ``name``, ``platform``, ``postalCode``, ``products``, ``projectValue``, ``sheetCount``, ``startDate``, ``stateOrProvince``, ``status``, ``thumbnailImageUrl``, ``timezone``, ``type`` and ``updatedAt``.
     */
    fields?: string[];
}
/**
 * Uri template for the request builder.
 */
export const WithProjectItemRequestBuilderUriTemplate = "{+baseurl}/construction/admin/v1/projects/{projectId}{?fields*}";
/**
 * The classification of the project. Possible values:- ``production`` – Standard project.- ``template`` – A project that serves as a template for creating new projects.- ``component`` – A placeholder project containing reusable components (e.g., forms). Only one component project is allowed per account. Known as a library in the ACC UI.- ``sample`` – A single sample project automatically created for ACC trials (limited to one per account).
 */
export const WithProjectGetResponse_classificationObject = {
    Production: "production",
    Template: "template",
    Component: "component",
    Sample: "sample",
} as const;
/**
 * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.Note that this field is relevant only in responses. It is ignored in requests.
 */
export const WithProjectGetResponse_platformObject = {
    Acc: "acc",
    Bim360: "bim360",
} as const;
/**
 * A machine-readable identifier for the product (e.g., docs, build).Each product has a unique key used throughout the API for identification, filtering, and integration logic (e.g., in query parameters like ``filter[key]``).Possible values:ACC - ``autoSpecs``, ``build``, ``cost``, ``designCollaboration``, ``docs``, ``insight``, ``modelCoordination``, ``projectAdministration``, and ``takeoff``.BIM 360 - ``assets``, ``costManagement``, ``designCollaboration``, ``documentManagement``, ``field``, ``fieldManagement``, ``glue``, ``insight``, ``modelCoordination``, ``plan``, ``projectAdministration``, ``projectHome``, ``projectManagement``, and ``quantification``.Note that this endpoint returns only ACC products. Other endpoints, such as `GET projects </en/docs/acc/v1/reference/http/admin-accountsaccountidprojects-GET/>`_ and `GET projects/:projectId </en/docs/acc/v1/reference/http/admin-projects-projectId-GET/>`_, may return both ACC and BIM 360 projects. In those responses, product keys may include BIM 360 values.
 */
export const WithProjectGetResponse_products_keyObject = {
    FilterKey: "filter[key]",
    AutoSpecs: "autoSpecs",
    Build: "build",
    Cost: "cost",
    DesignCollaboration: "designCollaboration",
    Docs: "docs",
    Insight: "insight",
    ModelCoordination: "modelCoordination",
    ProjectAdministration: "projectAdministration",
    Takeoff: "takeoff",
    Assets: "assets",
    CostManagement: "costManagement",
    DocumentManagement: "documentManagement",
    Field: "field",
    FieldManagement: "fieldManagement",
    Glue: "glue",
    Plan: "plan",
    ProjectHome: "projectHome",
    ProjectManagement: "projectManagement",
    Quantification: "quantification",
} as const;
/**
 * The language for the project. Only valid for the ``field`` product.Possible values: ``en``, ``de``, ``nl``, ``zh``, ``de-CH``
 */
export const WithProjectGetResponse_products_languageObject = {
    Field: "field",
    En: "en",
    De: "de",
    Nl: "nl",
    Zh: "zh",
} as const;
/**
 * The current status of the product. Possible values:- ``activating``: Product activation is in progress.- ``activationFailed``: Product activation has failed.- ``active``: Product activation is completed.- ``deactivating``: Product deactivation is in progress. (Applicable to BIM 360 only)- ``deactivationFailed``: Product deactivation has failed. (Applicable to BIM 360 only)- ``inactive``: Product deactivation is completed. (Applicable to BIM 360 only)- ``available``: Product is available for activation. (Applicable to BIM 360 only)
 */
export const WithProjectGetResponse_products_statusObject = {
    Activating: "activating",
    ActivationFailed: "activationFailed",
    Active: "active",
    Deactivating: "deactivating",
    DeactivationFailed: "deactivationFailed",
    Inactive: "inactive",
    Available: "available",
} as const;
/**
 * The currency of the project value. Default: ``USD``.Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
 */
export const WithProjectGetResponse_projectValue_currencyObject = {
    USD: "USD",
    AED: "AED",
    AFN: "AFN",
    ALL: "ALL",
    AMD: "AMD",
    ANG: "ANG",
    AOA: "AOA",
    ARS: "ARS",
    AUD: "AUD",
    AWG: "AWG",
    AZN: "AZN",
    BAM: "BAM",
    BBD: "BBD",
    BDT: "BDT",
    BGN: "BGN",
    BHD: "BHD",
    BIF: "BIF",
    BMD: "BMD",
    BND: "BND",
    BOB: "BOB",
    BOV: "BOV",
    BRL: "BRL",
    BSD: "BSD",
    BTN: "BTN",
    BWP: "BWP",
    BYN: "BYN",
    BYR: "BYR",
    BZD: "BZD",
    CAD: "CAD",
    CDF: "CDF",
    CHE: "CHE",
    CHF: "CHF",
    CHW: "CHW",
    CLF: "CLF",
    CLP: "CLP",
    CNY: "CNY",
    COP: "COP",
    COU: "COU",
    CRC: "CRC",
    CUC: "CUC",
    CUP: "CUP",
    CVE: "CVE",
    CZK: "CZK",
    DJF: "DJF",
    DKK: "DKK",
    DOP: "DOP",
    DZD: "DZD",
    EEK: "EEK",
    EGP: "EGP",
    ERN: "ERN",
    ETB: "ETB",
    EUR: "EUR",
    FJD: "FJD",
    FKP: "FKP",
    GBP: "GBP",
    GEL: "GEL",
    GHS: "GHS",
    GIP: "GIP",
    GMD: "GMD",
    GNF: "GNF",
    GTQ: "GTQ",
    GYD: "GYD",
    HKD: "HKD",
    HNL: "HNL",
    HRK: "HRK",
    HTG: "HTG",
    HUF: "HUF",
    IDR: "IDR",
    ILS: "ILS",
    INR: "INR",
    IQD: "IQD",
    IRR: "IRR",
    ISK: "ISK",
    JMD: "JMD",
    JOD: "JOD",
    JPY: "JPY",
    KES: "KES",
    KGS: "KGS",
    KHR: "KHR",
    KMF: "KMF",
    KPW: "KPW",
    KRW: "KRW",
    KWD: "KWD",
    KYD: "KYD",
    KZT: "KZT",
    LAK: "LAK",
    LBP: "LBP",
    LKR: "LKR",
    LRD: "LRD",
    LSL: "LSL",
    LTL: "LTL",
    LVL: "LVL",
    LYD: "LYD",
    MAD: "MAD",
    MDL: "MDL",
    MGA: "MGA",
    MKD: "MKD",
    MMK: "MMK",
    MNT: "MNT",
    MOP: "MOP",
    MRU: "MRU",
    MUR: "MUR",
    MVR: "MVR",
    MWK: "MWK",
    MXN: "MXN",
    MXV: "MXV",
    MYR: "MYR",
    MZN: "MZN",
    NAD: "NAD",
    NGN: "NGN",
    NIO: "NIO",
    NOK: "NOK",
    NPR: "NPR",
    NZD: "NZD",
    OMR: "OMR",
    PAB: "PAB",
    PEN: "PEN",
    PGK: "PGK",
    PHP: "PHP",
    PKR: "PKR",
    PLN: "PLN",
    PYG: "PYG",
    QAR: "QAR",
    RON: "RON",
    RSD: "RSD",
    RUB: "RUB",
    RWF: "RWF",
    SAR: "SAR",
    SBD: "SBD",
    SCR: "SCR",
    SDG: "SDG",
    SEK: "SEK",
    SGD: "SGD",
    SHP: "SHP",
    SLE: "SLE",
    SLL: "SLL",
    SOS: "SOS",
    SRD: "SRD",
    SSP: "SSP",
    STN: "STN",
    SVC: "SVC",
    SYP: "SYP",
    SZL: "SZL",
    THB: "THB",
    TJS: "TJS",
    TMT: "TMT",
    TND: "TND",
    TOP: "TOP",
    TRL: "TRL",
    TRYEscaped: "TRY",
    TTD: "TTD",
    TWD: "TWD",
    TZS: "TZS",
    UAH: "UAH",
    UGX: "UGX",
    USN: "USN",
    UYI: "UYI",
    UYU: "UYU",
    UYW: "UYW",
    UZS: "UZS",
    VED: "VED",
    VES: "VES",
    VND: "VND",
    VUV: "VUV",
    WST: "WST",
    XAF: "XAF",
    XAG: "XAG",
    XAU: "XAU",
    XBA: "XBA",
    XBB: "XBB",
    XBC: "XBC",
    XBD: "XBD",
    XCD: "XCD",
    XDR: "XDR",
    XOF: "XOF",
    XPD: "XPD",
    XPF: "XPF",
    XPT: "XPT",
    XSU: "XSU",
    XTS: "XTS",
    XUA: "XUA",
    XXX: "XXX",
    YER: "YER",
    ZAR: "ZAR",
    ZMW: "ZMW",
    ZWL: "ZWL",
} as const;
/**
 * The status of the project.Possible values: ``active``, ``pending``, ``archived`` and ``suspended``.
 */
export const WithProjectGetResponse_statusObject = {
    Active: "active",
    Pending: "pending",
    Archived: "archived",
    Suspended: "suspended",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithProjectItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithProjectItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
        navigationMetadata: UsersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithProjectItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithProjectItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithProjectGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
