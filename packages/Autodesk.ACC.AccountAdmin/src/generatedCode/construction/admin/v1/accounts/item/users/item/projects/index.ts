/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_pagination}
 */
// @ts-ignore
export function createProjectsGetResponse_paginationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_pagination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_results_accessLevels}
 */
// @ts-ignore
export function createProjectsGetResponse_results_accessLevelsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_results_accessLevels;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_results_projectValue}
 */
// @ts-ignore
export function createProjectsGetResponse_results_projectValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_results_projectValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_results}
 */
// @ts-ignore
export function createProjectsGetResponse_resultsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_results;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse}
 */
// @ts-ignore
export function createProjectsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse(projectsGetResponse: Partial<ProjectsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { projectsGetResponse.pagination = n.getObjectValue<ProjectsGetResponse_pagination>(createProjectsGetResponse_paginationFromDiscriminatorValue); },
        "results": n => { projectsGetResponse.results = n.getCollectionOfObjectValues<ProjectsGetResponse_results>(createProjectsGetResponse_resultsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_pagination The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_pagination(projectsGetResponse_pagination: Partial<ProjectsGetResponse_pagination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "limit": n => { projectsGetResponse_pagination.limit = n.getNumberValue(); },
        "nextUrl": n => { projectsGetResponse_pagination.nextUrl = n.getStringValue(); },
        "offset": n => { projectsGetResponse_pagination.offset = n.getNumberValue(); },
        "previousUrl": n => { projectsGetResponse_pagination.previousUrl = n.getStringValue(); },
        "totalResults": n => { projectsGetResponse_pagination.totalResults = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_results The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_results(projectsGetResponse_results: Partial<ProjectsGetResponse_results> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessLevels": n => { projectsGetResponse_results.accessLevels = n.getObjectValue<ProjectsGetResponse_results_accessLevels>(createProjectsGetResponse_results_accessLevelsFromDiscriminatorValue); },
        "accountId": n => { projectsGetResponse_results.accountId = n.getGuidValue(); },
        "addressLine1": n => { projectsGetResponse_results.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { projectsGetResponse_results.addressLine2 = n.getStringValue(); },
        "city": n => { projectsGetResponse_results.city = n.getStringValue(); },
        "classification": n => { projectsGetResponse_results.classification = n.getEnumValue<ProjectsGetResponse_results_classification>(ProjectsGetResponse_results_classificationObject); },
        "constructionType": n => { projectsGetResponse_results.constructionType = n.getStringValue(); },
        "contractType": n => { projectsGetResponse_results.contractType = n.getStringValue(); },
        "country": n => { projectsGetResponse_results.country = n.getStringValue(); },
        "createdAt": n => { projectsGetResponse_results.createdAt = n.getDateValue(); },
        "currentPhase": n => { projectsGetResponse_results.currentPhase = n.getStringValue(); },
        "deliveryMethod": n => { projectsGetResponse_results.deliveryMethod = n.getStringValue(); },
        "endDate": n => { projectsGetResponse_results.endDate = n.getStringValue(); },
        "id": n => { projectsGetResponse_results.id = n.getGuidValue(); },
        "imageUrl": n => { projectsGetResponse_results.imageUrl = n.getStringValue(); },
        "jobNumber": n => { projectsGetResponse_results.jobNumber = n.getStringValue(); },
        "latitude": n => { projectsGetResponse_results.latitude = n.getStringValue(); },
        "longitude": n => { projectsGetResponse_results.longitude = n.getStringValue(); },
        "name": n => { projectsGetResponse_results.name = n.getStringValue(); },
        "platform": n => { projectsGetResponse_results.platform = n.getEnumValue<ProjectsGetResponse_results_platform>(ProjectsGetResponse_results_platformObject); },
        "postalCode": n => { projectsGetResponse_results.postalCode = n.getStringValue(); },
        "projectValue": n => { projectsGetResponse_results.projectValue = n.getObjectValue<ProjectsGetResponse_results_projectValue>(createProjectsGetResponse_results_projectValueFromDiscriminatorValue); },
        "sheetCount": n => { projectsGetResponse_results.sheetCount = n.getNumberValue(); },
        "startDate": n => { projectsGetResponse_results.startDate = n.getStringValue(); },
        "stateOrProvince": n => { projectsGetResponse_results.stateOrProvince = n.getStringValue(); },
        "status": n => { projectsGetResponse_results.status = n.getEnumValue<ProjectsGetResponse_results_status>(ProjectsGetResponse_results_statusObject); },
        "thumbnailImageUrl": n => { projectsGetResponse_results.thumbnailImageUrl = n.getStringValue(); },
        "timezone": n => { projectsGetResponse_results.timezone = n.getStringValue(); },
        "type": n => { projectsGetResponse_results.type = n.getStringValue(); },
        "updatedAt": n => { projectsGetResponse_results.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_results_accessLevels The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_results_accessLevels(projectsGetResponse_results_accessLevels: Partial<ProjectsGetResponse_results_accessLevels> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "projectAdmin": n => { projectsGetResponse_results_accessLevels.projectAdmin = n.getBooleanValue(); },
        "projectMember": n => { projectsGetResponse_results_accessLevels.projectMember = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_results_projectValue The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_results_projectValue(projectsGetResponse_results_projectValue: Partial<ProjectsGetResponse_results_projectValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { projectsGetResponse_results_projectValue.currency = n.getEnumValue<ProjectsGetResponse_results_projectValue_currency>(ProjectsGetResponse_results_projectValue_currencyObject) ?? ProjectsGetResponse_results_projectValue_currencyObject.USD; },
        "value": n => { projectsGetResponse_results_projectValue.value = n.getNumberValue(); },
    }
}
export type GetFilterTextMatchQueryParameterType = (typeof GetFilterTextMatchQueryParameterTypeObject)[keyof typeof GetFilterTextMatchQueryParameterTypeObject];
export interface ProjectsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains pagination details for the records returned by the endpoint.
     */
    pagination?: ProjectsGetResponse_pagination | null;
    /**
     * A list of user projects matching the request criteria.
     */
    results?: ProjectsGetResponse_results[] | null;
}
/**
 * Contains pagination details for the records returned by the endpoint.
 */
export interface ProjectsGetResponse_pagination extends AdditionalDataHolder, Parsable {
    /**
     * The maximum number of records returned per page. The last page may contain fewer records than the specified limit.
     */
    limit?: number | null;
    /**
     * The URL for the next page of records, if more results are available. Max length: 2000 characters.Max length: 2000
     */
    nextUrl?: string | null;
    /**
     * The index of the first record in the returned page. Used for pagination.
     */
    offset?: number | null;
    /**
     * The URL for the previous page of records, if applicable. Max length: 2000 characters.Max length: 2000
     */
    previousUrl?: string | null;
    /**
     * The total number of records matching the request.
     */
    totalResults?: number | null;
}
export interface ProjectsGetResponse_results extends AdditionalDataHolder, Parsable {
    /**
     * Information about the user’s access roles in the project.
     */
    accessLevels?: ProjectsGetResponse_results_accessLevels | null;
    /**
     * The account ID associated with the project.
     */
    accountId?: Guid | null;
    /**
     * The first line of the project’s address.Max length: 255
     */
    addressLine1?: string | null;
    /**
     * Additional address details for the project location.Max length: 255
     */
    addressLine2?: string | null;
    /**
     * The city wher the project is located.Max length: 255
     */
    city?: string | null;
    /**
     * The classification of the project. Possible values:- ``production`` – Standard project.- ``template`` – A project that serves as a template for creating new projects.- ``component`` – A placeholder project containing reusable components (e.g., forms). Only one component project is allowed per account. Known as a library in the ACC UI.- ``sample`` – A single sample project automatically created for ACC trials (limited to one per account).
     */
    classification?: ProjectsGetResponse_results_classification | null;
    /**
     * The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.
     */
    constructionType?: string | null;
    /**
     * The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.
     */
    contractType?: string | null;
    /**
     * The country where the project is located, using an ISO 3166-1 code.Max length: 255
     */
    country?: string | null;
    /**
     * The timestamp when the project was created, in ISO 8601 format. This value is set at creation and does not change.
     */
    createdAt?: Date | null;
    /**
     * The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.Any value is accepted.
     */
    currentPhase?: string | null;
    /**
     * The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.
     */
    deliveryMethod?: string | null;
    /**
     * The estimated end date for the project, in ISO 8601 format.
     */
    endDate?: string | null;
    /**
     * The internally generated ID for the project.
     */
    id?: Guid | null;
    /**
     * The URL of the main image associated with the project. This field can be ``null``.Max length: 255
     */
    imageUrl?: string | null;
    /**
     * A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.Max length: 100
     */
    jobNumber?: string | null;
    /**
     * The latitude coordinate of the project location.Max length: 25
     */
    latitude?: string | null;
    /**
     * The longitude coordinate of the project location.Max length: 25
     */
    longitude?: string | null;
    /**
     * The name of the project.Max length: 255
     */
    name?: string | null;
    /**
     * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.Note that this field is relevant only in responses. It is ignored in requests.
     */
    platform?: ProjectsGetResponse_results_platform | null;
    /**
     * The postal or ZIP code of the project location.Max length: 255
     */
    postalCode?: string | null;
    /**
     * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
     */
    projectValue?: ProjectsGetResponse_results_projectValue | null;
    /**
     * The total number of sheets associated with the project.Note that this field is relevant only in responses. It is ignored in requests.
     */
    sheetCount?: number | null;
    /**
     * The estimated start date for the project, in ISO 8601 format.
     */
    startDate?: string | null;
    /**
     * The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.Max length: 255
     */
    stateOrProvince?: string | null;
    /**
     * The status of the project.Possible values: ``active``, ``pending``, ``archived`` and ``suspended``.
     */
    status?: ProjectsGetResponse_results_status | null;
    /**
     * The URL of the project’s thumbnail image. This field can be ``null``.Max length: 255
     */
    thumbnailImageUrl?: string | null;
    /**
     * The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database <https://www.iana.org/time-zones>`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``.Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``
     */
    timezone?: string | null;
    /**
     * The type of the project. Any value is accepted, but the following are recommended:Possible values: ``Convention Center``, ``Data Center``, ``Hotel / Motel``, ``Office``, ``Parking Structure / Garage``, ``Performing Arts``, ``Restaurant``, ``Retail``, ``Stadium / Arena``, ``Theme Park``, ``Warehouse (non-manufacturing)``, ``Assisted Living / Nursing Home``, ``Hospital``, ``Medical Laboratory``, ``Medical Office``, ``OutPatient Surgery Center``, ``Court House``, ``Dormitory``, ``Education Facility``, ``Government Building``, ``Library``, ``Military Facility``, ``Museum``, ``Prison / Correctional Facility``, ``Recreation Building``, ``Religious Building``, ``Research Facility / Laboratory``, ``Multi-Family Housing``, ``Single-Family Housing``, ``Airport``, ``Bridge``, ``Canal / Waterway``, ``Dams / Flood Control / Reservoirs``, ``Harbor / River Development``, ``Rail``, ``Seaport``, ``Streets / Roads / Highways``, ``Transportation Building``, ``Tunnel``, ``Waste Water / Sewers``, ``Water Supply``, ``Manufacturing / Factory``, ``Mining Facility``, ``Oil & Gas``, ``Plant``, ``Power Plant``, ``Solar Farm``, ``Utilities``, ``Wind Farm``, ``Demonstration Project``, ``Template Project`` and ``Training Project``.Max length: 255
     */
    type?: string | null;
    /**
     * The timestamp when the project was last updated, in ISO 8601 format. This reflects changes to project fields but not updates to resources within the project.
     */
    updatedAt?: Date | null;
}
/**
 * Information about the user’s access roles in the project.
 */
export interface ProjectsGetResponse_results_accessLevels extends AdditionalDataHolder, Parsable {
    /**
     * Indicates whether the user is a project administrator for the project. Possible values:- ``true``: The user is a project administrator.- ``false``: The user is not a project administrator.
     */
    projectAdmin?: boolean | null;
    /**
     * Indicates whether the user is a project member but not a project administrator. Possible values:- ``true``: The user is a project member but not an administrator.- ``false``: The user is not a project member.
     */
    projectMember?: boolean | null;
}
export type ProjectsGetResponse_results_classification = (typeof ProjectsGetResponse_results_classificationObject)[keyof typeof ProjectsGetResponse_results_classificationObject];
export type ProjectsGetResponse_results_platform = (typeof ProjectsGetResponse_results_platformObject)[keyof typeof ProjectsGetResponse_results_platformObject];
/**
 * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
 */
export interface ProjectsGetResponse_results_projectValue extends AdditionalDataHolder, Parsable {
    /**
     * The currency of the project value. Default: ``USD``.Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
     */
    currency?: ProjectsGetResponse_results_projectValue_currency | null;
    /**
     * The estimated cost of the project, based on the ``currency`` specified in the currency field. Default: ``0``.
     */
    value?: number | null;
}
export type ProjectsGetResponse_results_projectValue_currency = (typeof ProjectsGetResponse_results_projectValue_currencyObject)[keyof typeof ProjectsGetResponse_results_projectValue_currencyObject];
export type ProjectsGetResponse_results_status = (typeof ProjectsGetResponse_results_statusObject)[keyof typeof ProjectsGetResponse_results_statusObject];
/**
 * Builds and executes requests for operations under /construction/admin/v1/accounts/{accountId}/users/{userId}/projects
 */
export interface ProjectsRequestBuilder extends BaseRequestBuilder<ProjectsRequestBuilder> {
    /**
     * .. include:: ../../../../_snippets/forward-compatible.rst
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProjectsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : Promise<ProjectsGetResponse | undefined>;
    /**
     * .. include:: ../../../../_snippets/forward-compatible.rst
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * .. include:: ../../../../_snippets/forward-compatible.rst
 */
export interface ProjectsRequestBuilderGetQueryParameters {
    /**
     * A comma-separated list of user project fields to include in the response. If not specified, all available fields are included by default.Possible values: ``accessLevels``, ``accountId``, ``addressLine1``, ``addressLine2``, ``city``, ``constructionType``, ``country``, ``createdAt``, ``classification``, ``deliveryMethod``, ``endDate``, ``imageUrl``, ``jobNumber``, ``latitude``, ``longitude``, ``name``, ``platform``, ``postalCode``, ``projectValue``, ``sheetCount``, ``startDate``, ``stateOrProvince``, ``status``, ``thumbnailImageUrl``, ``timezone``, ``type``, ``updatedAt``, ``contractType`` and ``currentPhase``.
     */
    fields?: string[];
    /**
     * Filters projects by user access level. Possible values: ``projectAdmin``, ``projectMember``.Max length: 255
     */
    filteraccessLevels?: string[];
    /**
     * Filters projects by classification. Possible values:``production`` – Standard production projects.``template`` – Project templates that can be cloned to create production projects.``component`` – Placeholder projects that contain standardized components (e.g., forms) for use across projects. Only one component project is permitted per account. Known as a library in the ACC unified products UI.``sample`` – The single sample project automatically created upon ACC trial setup. Only one sample project is permitted per account.Max length: 255
     */
    filterclassification?: string[];
    /**
     * A list of project IDs to filter by.
     */
    filterid?: string[];
    /**
     * Filters by a user-defined project identifier. Supports partial matches when used with ``filterTextMatch``. For example, ``filter[jobNumber]=HP-0002&filterTextMatch=equals`` returns projects where the job number is exactly ``HP-0002``.Max length: 255
     */
    filterjobNumber?: string;
    /**
     * Filters projects by name. Supports partial matches when used with ``filterTextMatch``. For example ``filter[name]=ABCco&filterTextMatch=startsWith`` returns projects whose names start with ``ABCco``.Max length: 255
     */
    filtername?: string;
    /**
     * Filters by platform. Possible values: ``acc`` (Autodesk Construction Cloud) and ``bim360`` (BIM 360).Max length: 255
     */
    filterplatform?: string[];
    /**
     * Filters projects by status. Possible values: ``active``, ``pending``, ``archived``, ``suspended``.
     */
    filterstatus?: string[];
    /**
     * Specifies how text-based filters should match values in supported fields.This parameter can be used in any endpoint that supports text-based filtering (e.g., ``filter[name]``, ``filter[jobNumber]``, ``filter[companyName]``, etc.).Possible values:``contains`` (default) – Matches if the field contains the specified text anywhere``startsWith`` – Matches if the field starts with the specified text``endsWith`` – Matches if the field ends with the specified text``equals`` – Matches only if the field exactly matches the specified textMatching is case-insensitive.Wildcards and regular expressions are not supported.
     */
    filterTextMatch?: GetFilterTextMatchQueryParameterType;
    /**
     * Filters by project type. To exclude a type, prefix it with ``-`` (e.g., ``-Bridge`` excludes bridge projects).Possible values: ``Airport``, ``Assisted Living / Nursing Home``, ``Bridge``, ``Canal / Waterway``, ``Convention Center``, ``Court House``, ``Data Center``, ``Dams / Flood Control / Reservoirs``, ``Demonstration Project``, ``Dormitory``, ``Education Facility``, ``Government Building``, ``Harbor / River Development``, ``Hospital``, ``Hotel / Motel``, ``Library``, ``Manufacturing / Factory``, ``Medical Laboratory``, ``Medical Office``, ``Military Facility``, ``Mining Facility``, ``Multi-Family Housing``, ``Museum``, ``Oil & Gas``,``Plant``, ``Office``, ``OutPatient Surgery Center``, ``Parking Structure / Garage``, ``Performing Arts``, ``Power Plant``, ``Prison / Correctional Facility``, ``Rail``, ``Recreation Building``, ``Religious Building``, ``Research Facility / Laboratory``, ``Restaurant``, ``Retail``, ``Seaport``, ``Single-Family Housing``, ``Solar Farm``, ``Stadium/Arena``, ``Streets / Roads / Highways``, ``Template Project``, ``Theme Park``, ``Training Project``, ``Transportation Building``, ``Tunnel``, ``Utilities``, ``Warehouse (non-manufacturing)``, ``Waste Water / Sewers``, ``Water Supply``, ``Wind Farm``.
     */
    filtertype?: string[];
    /**
     * Filters projects updated within a specific date range in ISO 8601 format. For example:Date range: ``2023-03-02T00:00:00.000Z..2023-03-03T23:59:59 .999Z``Specific start date: ``2023-03-02T00:00:00.000Z..``Specific end date: ``..2023-03-02T23:59:59.999Z``For more details, see `JSON API Filtering <https://jsonapi.org/format/#fetching-filtering>`_.Max length: 100
     */
    filterupdatedAt?: string;
    /**
     * The maximum number of records to return in the response.Default: ``20``Minimum: ``1``Maximum: ``200`` (If a larger value is provided, only 200 records are returned)
     */
    limit?: number;
    /**
     * The index of the first record to return.Used for pagination in combination with the ``limit`` parameter.Example: ``limit=20`` and ``offset=40`` returns records 41–60.
     */
    offset?: number;
    /**
     * A list of fields to sort the returned user projects by. Multiple sort fields are applied in sequence order — each sort field produces groupings of projects with the same values of that field; the next sort field applies within the groupings produced by the previous sort field.Each property can be followed by a direction modifier of either ``asc`` (ascending) or ``desc`` (descending). The default is ``asc``.Possible values: ``name`` (the default), ``startDate``, ``endDate``, ``type``, ``status``, ``jobNumber``, ``constructionType``, ``deliveryMethod``, ``contractType``, ``currentPhase``, ``createdAt``, ``updatedAt`` and ``platform``.
     */
    sort?: string[];
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse(writer: SerializationWriter, projectsGetResponse: Partial<ProjectsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ProjectsGetResponse_pagination>("pagination", projectsGetResponse.pagination, serializeProjectsGetResponse_pagination);
    writer.writeCollectionOfObjectValues<ProjectsGetResponse_results>("results", projectsGetResponse.results, serializeProjectsGetResponse_results);
    writer.writeAdditionalData(projectsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_pagination The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_pagination(writer: SerializationWriter, projectsGetResponse_pagination: Partial<ProjectsGetResponse_pagination> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_pagination || isSerializingDerivedType) { return; }
    writer.writeNumberValue("limit", projectsGetResponse_pagination.limit);
    writer.writeStringValue("nextUrl", projectsGetResponse_pagination.nextUrl);
    writer.writeNumberValue("offset", projectsGetResponse_pagination.offset);
    writer.writeStringValue("previousUrl", projectsGetResponse_pagination.previousUrl);
    writer.writeNumberValue("totalResults", projectsGetResponse_pagination.totalResults);
    writer.writeAdditionalData(projectsGetResponse_pagination.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_results The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_results(writer: SerializationWriter, projectsGetResponse_results: Partial<ProjectsGetResponse_results> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_results || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ProjectsGetResponse_results_accessLevels>("accessLevels", projectsGetResponse_results.accessLevels, serializeProjectsGetResponse_results_accessLevels);
    writer.writeGuidValue("accountId", projectsGetResponse_results.accountId);
    writer.writeStringValue("addressLine1", projectsGetResponse_results.addressLine1);
    writer.writeStringValue("addressLine2", projectsGetResponse_results.addressLine2);
    writer.writeStringValue("city", projectsGetResponse_results.city);
    writer.writeEnumValue<ProjectsGetResponse_results_classification>("classification", projectsGetResponse_results.classification);
    writer.writeStringValue("constructionType", projectsGetResponse_results.constructionType);
    writer.writeStringValue("contractType", projectsGetResponse_results.contractType);
    writer.writeStringValue("country", projectsGetResponse_results.country);
    writer.writeDateValue("createdAt", projectsGetResponse_results.createdAt);
    writer.writeStringValue("currentPhase", projectsGetResponse_results.currentPhase);
    writer.writeStringValue("deliveryMethod", projectsGetResponse_results.deliveryMethod);
    writer.writeStringValue("endDate", projectsGetResponse_results.endDate);
    writer.writeGuidValue("id", projectsGetResponse_results.id);
    writer.writeStringValue("imageUrl", projectsGetResponse_results.imageUrl);
    writer.writeStringValue("jobNumber", projectsGetResponse_results.jobNumber);
    writer.writeStringValue("latitude", projectsGetResponse_results.latitude);
    writer.writeStringValue("longitude", projectsGetResponse_results.longitude);
    writer.writeStringValue("name", projectsGetResponse_results.name);
    writer.writeEnumValue<ProjectsGetResponse_results_platform>("platform", projectsGetResponse_results.platform);
    writer.writeStringValue("postalCode", projectsGetResponse_results.postalCode);
    writer.writeObjectValue<ProjectsGetResponse_results_projectValue>("projectValue", projectsGetResponse_results.projectValue, serializeProjectsGetResponse_results_projectValue);
    writer.writeNumberValue("sheetCount", projectsGetResponse_results.sheetCount);
    writer.writeStringValue("startDate", projectsGetResponse_results.startDate);
    writer.writeStringValue("stateOrProvince", projectsGetResponse_results.stateOrProvince);
    writer.writeEnumValue<ProjectsGetResponse_results_status>("status", projectsGetResponse_results.status);
    writer.writeStringValue("thumbnailImageUrl", projectsGetResponse_results.thumbnailImageUrl);
    writer.writeStringValue("timezone", projectsGetResponse_results.timezone);
    writer.writeStringValue("type", projectsGetResponse_results.type);
    writer.writeDateValue("updatedAt", projectsGetResponse_results.updatedAt);
    writer.writeAdditionalData(projectsGetResponse_results.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_results_accessLevels The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_results_accessLevels(writer: SerializationWriter, projectsGetResponse_results_accessLevels: Partial<ProjectsGetResponse_results_accessLevels> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_results_accessLevels || isSerializingDerivedType) { return; }
    writer.writeBooleanValue("projectAdmin", projectsGetResponse_results_accessLevels.projectAdmin);
    writer.writeBooleanValue("projectMember", projectsGetResponse_results_accessLevels.projectMember);
    writer.writeAdditionalData(projectsGetResponse_results_accessLevels.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_results_projectValue The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_results_projectValue(writer: SerializationWriter, projectsGetResponse_results_projectValue: Partial<ProjectsGetResponse_results_projectValue> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_results_projectValue || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ProjectsGetResponse_results_projectValue_currency>("currency", projectsGetResponse_results_projectValue.currency ?? ProjectsGetResponse_results_projectValue_currencyObject.USD);
    writer.writeNumberValue("value", projectsGetResponse_results_projectValue.value);
    writer.writeAdditionalData(projectsGetResponse_results_projectValue.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ProjectsRequestBuilderUriTemplate = "{+baseurl}/construction/admin/v1/accounts/{accountId}/users/{userId}/projects{?fields*,filterTextMatch*,filter%5BaccessLevels%5D*,filter%5Bclassification%5D*,filter%5Bid%5D*,filter%5BjobNumber%5D*,filter%5Bname%5D*,filter%5Bplatform%5D*,filter%5Bstatus%5D*,filter%5Btype%5D*,filter%5BupdatedAt%5D*,limit*,offset*,sort*}";
export const GetFilterTextMatchQueryParameterTypeObject = {
    FilterName: "filter[name]",
    FilterJobNumber: "filter[jobNumber]",
    FilterCompanyName: "filter[companyName]",
    Contains: "contains",
    StartsWith: "startsWith",
    EndsWith: "endsWith",
    Equals: "equals",
} as const;
/**
 * The classification of the project. Possible values:- ``production`` – Standard project.- ``template`` – A project that serves as a template for creating new projects.- ``component`` – A placeholder project containing reusable components (e.g., forms). Only one component project is allowed per account. Known as a library in the ACC UI.- ``sample`` – A single sample project automatically created for ACC trials (limited to one per account).
 */
export const ProjectsGetResponse_results_classificationObject = {
    Production: "production",
    Template: "template",
    Component: "component",
    Sample: "sample",
} as const;
/**
 * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.Note that this field is relevant only in responses. It is ignored in requests.
 */
export const ProjectsGetResponse_results_platformObject = {
    Acc: "acc",
    Bim360: "bim360",
} as const;
/**
 * The currency of the project value. Default: ``USD``.Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
 */
export const ProjectsGetResponse_results_projectValue_currencyObject = {
    USD: "USD",
    AED: "AED",
    AFN: "AFN",
    ALL: "ALL",
    AMD: "AMD",
    ANG: "ANG",
    AOA: "AOA",
    ARS: "ARS",
    AUD: "AUD",
    AWG: "AWG",
    AZN: "AZN",
    BAM: "BAM",
    BBD: "BBD",
    BDT: "BDT",
    BGN: "BGN",
    BHD: "BHD",
    BIF: "BIF",
    BMD: "BMD",
    BND: "BND",
    BOB: "BOB",
    BOV: "BOV",
    BRL: "BRL",
    BSD: "BSD",
    BTN: "BTN",
    BWP: "BWP",
    BYN: "BYN",
    BYR: "BYR",
    BZD: "BZD",
    CAD: "CAD",
    CDF: "CDF",
    CHE: "CHE",
    CHF: "CHF",
    CHW: "CHW",
    CLF: "CLF",
    CLP: "CLP",
    CNY: "CNY",
    COP: "COP",
    COU: "COU",
    CRC: "CRC",
    CUC: "CUC",
    CUP: "CUP",
    CVE: "CVE",
    CZK: "CZK",
    DJF: "DJF",
    DKK: "DKK",
    DOP: "DOP",
    DZD: "DZD",
    EEK: "EEK",
    EGP: "EGP",
    ERN: "ERN",
    ETB: "ETB",
    EUR: "EUR",
    FJD: "FJD",
    FKP: "FKP",
    GBP: "GBP",
    GEL: "GEL",
    GHS: "GHS",
    GIP: "GIP",
    GMD: "GMD",
    GNF: "GNF",
    GTQ: "GTQ",
    GYD: "GYD",
    HKD: "HKD",
    HNL: "HNL",
    HRK: "HRK",
    HTG: "HTG",
    HUF: "HUF",
    IDR: "IDR",
    ILS: "ILS",
    INR: "INR",
    IQD: "IQD",
    IRR: "IRR",
    ISK: "ISK",
    JMD: "JMD",
    JOD: "JOD",
    JPY: "JPY",
    KES: "KES",
    KGS: "KGS",
    KHR: "KHR",
    KMF: "KMF",
    KPW: "KPW",
    KRW: "KRW",
    KWD: "KWD",
    KYD: "KYD",
    KZT: "KZT",
    LAK: "LAK",
    LBP: "LBP",
    LKR: "LKR",
    LRD: "LRD",
    LSL: "LSL",
    LTL: "LTL",
    LVL: "LVL",
    LYD: "LYD",
    MAD: "MAD",
    MDL: "MDL",
    MGA: "MGA",
    MKD: "MKD",
    MMK: "MMK",
    MNT: "MNT",
    MOP: "MOP",
    MRU: "MRU",
    MUR: "MUR",
    MVR: "MVR",
    MWK: "MWK",
    MXN: "MXN",
    MXV: "MXV",
    MYR: "MYR",
    MZN: "MZN",
    NAD: "NAD",
    NGN: "NGN",
    NIO: "NIO",
    NOK: "NOK",
    NPR: "NPR",
    NZD: "NZD",
    OMR: "OMR",
    PAB: "PAB",
    PEN: "PEN",
    PGK: "PGK",
    PHP: "PHP",
    PKR: "PKR",
    PLN: "PLN",
    PYG: "PYG",
    QAR: "QAR",
    RON: "RON",
    RSD: "RSD",
    RUB: "RUB",
    RWF: "RWF",
    SAR: "SAR",
    SBD: "SBD",
    SCR: "SCR",
    SDG: "SDG",
    SEK: "SEK",
    SGD: "SGD",
    SHP: "SHP",
    SLE: "SLE",
    SLL: "SLL",
    SOS: "SOS",
    SRD: "SRD",
    SSP: "SSP",
    STN: "STN",
    SVC: "SVC",
    SYP: "SYP",
    SZL: "SZL",
    THB: "THB",
    TJS: "TJS",
    TMT: "TMT",
    TND: "TND",
    TOP: "TOP",
    TRL: "TRL",
    TRYEscaped: "TRY",
    TTD: "TTD",
    TWD: "TWD",
    TZS: "TZS",
    UAH: "UAH",
    UGX: "UGX",
    USN: "USN",
    UYI: "UYI",
    UYU: "UYU",
    UYW: "UYW",
    UZS: "UZS",
    VED: "VED",
    VES: "VES",
    VND: "VND",
    VUV: "VUV",
    WST: "WST",
    XAF: "XAF",
    XAG: "XAG",
    XAU: "XAU",
    XBA: "XBA",
    XBB: "XBB",
    XBC: "XBC",
    XBD: "XBD",
    XCD: "XCD",
    XDR: "XDR",
    XOF: "XOF",
    XPD: "XPD",
    XPF: "XPF",
    XPT: "XPT",
    XSU: "XSU",
    XTS: "XTS",
    XUA: "XUA",
    XXX: "XXX",
    YER: "YER",
    ZAR: "ZAR",
    ZMW: "ZMW",
    ZWL: "ZWL",
} as const;
/**
 * The status of the project.Possible values: ``active``, ``pending``, ``archived`` and ``suspended``.
 */
export const ProjectsGetResponse_results_statusObject = {
    Active: "active",
    Pending: "pending",
    Archived: "archived",
    Suspended: "suspended",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProjectsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filteraccessLevels": "filter%5BaccessLevels%5D",
    "filterclassification": "filter%5Bclassification%5D",
    "filterid": "filter%5Bid%5D",
    "filterjobNumber": "filter%5BjobNumber%5D",
    "filtername": "filter%5Bname%5D",
    "filterplatform": "filter%5Bplatform%5D",
    "filterstatus": "filter%5Bstatus%5D",
    "filtertype": "filter%5Btype%5D",
    "filterupdatedAt": "filter%5BupdatedAt%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProjectsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createProjectsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ProjectsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
