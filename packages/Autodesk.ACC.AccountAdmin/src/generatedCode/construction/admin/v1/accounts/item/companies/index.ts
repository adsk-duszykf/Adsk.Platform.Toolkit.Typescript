/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CompaniesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains pagination details for the records returned by the endpoint.
     */
    pagination?: CompaniesGetResponse_pagination | null;
    /**
     * The requested page of companies.
     */
    results?: CompaniesGetResponse_results[] | null;
}
/**
 * Contains pagination details for the records returned by the endpoint.
 */
export interface CompaniesGetResponse_pagination extends AdditionalDataHolder, Parsable {
    /**
     * The maximum number of records returned per page. The last page may contain fewer records than the specified limit.
     */
    limit?: number | null;
    /**
     * The URL for the next page of records, if more results are available. Max length: 2000 characters.Max length: 2000
     */
    nextUrl?: string | null;
    /**
     * The index of the first record in the returned page. Used for pagination.
     */
    offset?: number | null;
    /**
     * The URL for the previous page of records, if applicable. Max length: 2000 characters.Max length: 2000
     */
    previousUrl?: string | null;
    /**
     * The total number of records matching the request.
     */
    totalResults?: number | null;
}
export interface CompaniesGetResponse_results extends AdditionalDataHolder, Parsable {
    /**
     * The identifier of the account this company is associated with.
     */
    accountId?: Guid | null;
    /**
     * The company addresses.
     */
    addresses?: CompaniesGetResponse_results_addresses[] | null;
    /**
     * The timestamp when this company was created.
     */
    createdAt?: Date | null;
    /**
     * The description of the company.Max length: 255
     */
    description?: string | null;
    /**
     * The ERP Partner Company ID.Max length: 255
     */
    erpId?: string | null;
    /**
     * Id of the company.
     */
    id?: Guid | null;
    /**
     * The URL of the image associated to the company.Max length: 255
     */
    imageUrl?: string | null;
    /**
     * The name of the company. The company name should be unique under an account.Max length: 255
     */
    name?: string | null;
    /**
     * Original name of the company. Only returned when a company is deleted, since, in this case, the company ``name`` will be updated to ``removed at MMDDYYYY``.
     */
    originalName?: string | null;
    /**
     * The number of projects associated with the company.
     */
    projectSize?: number | null;
    /**
     * The status of the company.Possible values: ``deleted``, ``active``
     */
    status?: CompaniesGetResponse_results_status | null;
    /**
     * The Tax ID.Max length: 255
     */
    taxId?: string | null;
    /**
     * Trade or company type based on specialization.Max length: 255
     */
    trade?: string | null;
    /**
     * The timestamp when this company was last updated. This will only reflect changes to the company fields and not changes to any resources in the company.
     */
    updatedAt?: Date | null;
    /**
     * The number of users that are associated with the company.
     */
    userSize?: number | null;
    /**
     * The URL of the company website.Max length: 255
     */
    websiteUrl?: string | null;
}
export interface CompaniesGetResponse_results_addresses extends AdditionalDataHolder, Parsable {
    /**
     * The street address line 1.Max length: 255
     */
    addressLine1?: string | null;
    /**
     * The street address line 2.Max length: 255
     */
    addressLine2?: string | null;
    /**
     * City.Max length: 255
     */
    city?: string | null;
    /**
     * Only valid country names and ISO 3166-1 alpha-2 codes will be accepted.Max length: 255
     */
    country?: string | null;
    /**
     * Phone Number.Max length: 255
     */
    phone?: string | null;
    /**
     * The zip or postal code in which this address is located.Max length: 255
     */
    postalCode?: string | null;
    /**
     * The state or province location. Only valid state/province names and ISO 3166-1 alpha-2 codes will be accepted. The provided state or province must exist in the provided country.Max length: 255
     */
    stateOrProvince?: string | null;
    /**
     * The address type. Will always be: ``Main``
     */
    type?: CompaniesGetResponse_results_addresses_type | null;
}
export type CompaniesGetResponse_results_addresses_type = (typeof CompaniesGetResponse_results_addresses_typeObject)[keyof typeof CompaniesGetResponse_results_addresses_typeObject];
export type CompaniesGetResponse_results_status = (typeof CompaniesGetResponse_results_statusObject)[keyof typeof CompaniesGetResponse_results_statusObject];
/**
 * Builds and executes requests for operations under /construction/admin/v1/accounts/{accountId}/companies
 */
export interface CompaniesRequestBuilder extends BaseRequestBuilder<CompaniesRequestBuilder> {
    /**
     * Returns a list of companies in an account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompaniesGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<CompaniesRequestBuilderGetQueryParameters> | undefined) : Promise<CompaniesGetResponse | undefined>;
    /**
     * Returns a list of companies in an account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CompaniesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Returns a list of companies in an account.
 */
export interface CompaniesRequestBuilderGetQueryParameters {
    /**
     * List of fields to return in the response.  Defaults to all fields.  Valid list of fields are `accountId`, `name`, `trade`, `addresses`, `websiteUrl`, `description`, `erpId`, `taxId`, `imageUrl`, `status`, `createdAt`, `updatedAt`, `projectSize`, `userSize` and `originalName`.
     */
    fields?: string[];
    /**
     * Filter companies by ERP Id.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255
     */
    filtererpId?: string;
    /**
     * Filter companies by name.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255
     */
    filtername?: string;
    /**
     * Filter companies by tax Id.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255
     */
    filtertaxId?: string;
    /**
     * Specifies how text-based filters should match values in supported fields.This parameter can be used in any endpoint that supports text-based filtering (e.g., ``filter[name]``, ``filter[jobNumber]``, ``filter[companyName]``, etc.).Possible values:``contains`` (default) – Matches if the field contains the specified text anywhere``startsWith`` – Matches if the field starts with the specified text``endsWith`` – Matches if the field ends with the specified text``equals`` – Matches only if the field exactly matches the specified textMatching is case-insensitive.Wildcards and regular expressions are not supported.
     */
    filterTextMatch?: GetFilterTextMatchQueryParameterType;
    /**
     * Filter companies by trade.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255
     */
    filtertrade?: string;
    /**
     * Filter companies by updated at date range. The range must be specified with dates in an ISO-8601 format with time required.  The start and end dates of the range should be separated by `..`  One of the dates in the range may be omitted. For example, to get everything on or before June 1, 2019 the range would be `..2019-06-01T23:59:59.999Z`. To get everything after June 1, 2019 the range would be `2019-06-01T00:00:00.000Z..`.Max length: 100
     */
    filterupdatedAt?: string;
    /**
     * The maximum number of records to return in the response.Default: ``20``Minimum: ``1``Maximum: ``200`` (If a larger value is provided, only 200 records are returned)
     */
    limit?: number;
    /**
     * The index of the first record to return.Used for pagination in combination with the ``limit`` parameter.Example: ``limit=20`` and ``offset=40`` returns records 41–60.
     */
    offset?: number;
    /**
     * List of filtered fields to apply an ``or`` operator. Valid list of fields are `erpId`, `name`, `taxId`, `trade`, `updatedAt`.
     */
    orFilters?: string[];
    /**
     * The list of fields to sort by.  When multiple fields are listed the later property is used to sort the resources where the previous fields have the same value. Each property can be followed by a direction modifier of either `asc` (ascending) or `desc` (descending).  If no direction is specified then `asc` is assumed.  Valid fields for sorting are `name`, `trade`, `erpId`, `taxId`, `status`, `createdAt`, `updatedAt`, `projectSize` and `userSize`.  Default sort is `name`.
     */
    sort?: string[];
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesGetResponse_pagination}
 */
// @ts-ignore
export function createCompaniesGetResponse_paginationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesGetResponse_pagination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesGetResponse_results_addresses}
 */
// @ts-ignore
export function createCompaniesGetResponse_results_addressesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesGetResponse_results_addresses;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesGetResponse_results}
 */
// @ts-ignore
export function createCompaniesGetResponse_resultsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesGetResponse_results;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesGetResponse}
 */
// @ts-ignore
export function createCompaniesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesGetResponse;
}
/**
 * The deserialization information for the current model
 * @param CompaniesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesGetResponse(companiesGetResponse: Partial<CompaniesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { companiesGetResponse.pagination = n.getObjectValue<CompaniesGetResponse_pagination>(createCompaniesGetResponse_paginationFromDiscriminatorValue); },
        "results": n => { companiesGetResponse.results = n.getCollectionOfObjectValues<CompaniesGetResponse_results>(createCompaniesGetResponse_resultsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CompaniesGetResponse_pagination The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesGetResponse_pagination(companiesGetResponse_pagination: Partial<CompaniesGetResponse_pagination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "limit": n => { companiesGetResponse_pagination.limit = n.getNumberValue(); },
        "nextUrl": n => { companiesGetResponse_pagination.nextUrl = n.getStringValue(); },
        "offset": n => { companiesGetResponse_pagination.offset = n.getNumberValue(); },
        "previousUrl": n => { companiesGetResponse_pagination.previousUrl = n.getStringValue(); },
        "totalResults": n => { companiesGetResponse_pagination.totalResults = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CompaniesGetResponse_results The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesGetResponse_results(companiesGetResponse_results: Partial<CompaniesGetResponse_results> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accountId": n => { companiesGetResponse_results.accountId = n.getGuidValue(); },
        "addresses": n => { companiesGetResponse_results.addresses = n.getCollectionOfObjectValues<CompaniesGetResponse_results_addresses>(createCompaniesGetResponse_results_addressesFromDiscriminatorValue); },
        "createdAt": n => { companiesGetResponse_results.createdAt = n.getDateValue(); },
        "description": n => { companiesGetResponse_results.description = n.getStringValue(); },
        "erpId": n => { companiesGetResponse_results.erpId = n.getStringValue(); },
        "id": n => { companiesGetResponse_results.id = n.getGuidValue(); },
        "imageUrl": n => { companiesGetResponse_results.imageUrl = n.getStringValue(); },
        "name": n => { companiesGetResponse_results.name = n.getStringValue(); },
        "originalName": n => { companiesGetResponse_results.originalName = n.getStringValue(); },
        "projectSize": n => { companiesGetResponse_results.projectSize = n.getNumberValue(); },
        "status": n => { companiesGetResponse_results.status = n.getEnumValue<CompaniesGetResponse_results_status>(CompaniesGetResponse_results_statusObject); },
        "taxId": n => { companiesGetResponse_results.taxId = n.getStringValue(); },
        "trade": n => { companiesGetResponse_results.trade = n.getStringValue(); },
        "updatedAt": n => { companiesGetResponse_results.updatedAt = n.getDateValue(); },
        "userSize": n => { companiesGetResponse_results.userSize = n.getNumberValue(); },
        "websiteUrl": n => { companiesGetResponse_results.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CompaniesGetResponse_results_addresses The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesGetResponse_results_addresses(companiesGetResponse_results_addresses: Partial<CompaniesGetResponse_results_addresses> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "addressLine1": n => { companiesGetResponse_results_addresses.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { companiesGetResponse_results_addresses.addressLine2 = n.getStringValue(); },
        "city": n => { companiesGetResponse_results_addresses.city = n.getStringValue(); },
        "country": n => { companiesGetResponse_results_addresses.country = n.getStringValue(); },
        "phone": n => { companiesGetResponse_results_addresses.phone = n.getStringValue(); },
        "postalCode": n => { companiesGetResponse_results_addresses.postalCode = n.getStringValue(); },
        "stateOrProvince": n => { companiesGetResponse_results_addresses.stateOrProvince = n.getStringValue(); },
        "type": n => { companiesGetResponse_results_addresses.type = n.getEnumValue<CompaniesGetResponse_results_addresses_type>(CompaniesGetResponse_results_addresses_typeObject); },
    }
}
export type GetFilterTextMatchQueryParameterType = (typeof GetFilterTextMatchQueryParameterTypeObject)[keyof typeof GetFilterTextMatchQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param CompaniesGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesGetResponse(writer: SerializationWriter, companiesGetResponse: Partial<CompaniesGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<CompaniesGetResponse_pagination>("pagination", companiesGetResponse.pagination, serializeCompaniesGetResponse_pagination);
    writer.writeCollectionOfObjectValues<CompaniesGetResponse_results>("results", companiesGetResponse.results, serializeCompaniesGetResponse_results);
    writer.writeAdditionalData(companiesGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param CompaniesGetResponse_pagination The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesGetResponse_pagination(writer: SerializationWriter, companiesGetResponse_pagination: Partial<CompaniesGetResponse_pagination> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesGetResponse_pagination || isSerializingDerivedType) { return; }
    writer.writeNumberValue("limit", companiesGetResponse_pagination.limit);
    writer.writeStringValue("nextUrl", companiesGetResponse_pagination.nextUrl);
    writer.writeNumberValue("offset", companiesGetResponse_pagination.offset);
    writer.writeStringValue("previousUrl", companiesGetResponse_pagination.previousUrl);
    writer.writeNumberValue("totalResults", companiesGetResponse_pagination.totalResults);
    writer.writeAdditionalData(companiesGetResponse_pagination.additionalData);
}
/**
 * Serializes information the current object
 * @param CompaniesGetResponse_results The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesGetResponse_results(writer: SerializationWriter, companiesGetResponse_results: Partial<CompaniesGetResponse_results> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesGetResponse_results || isSerializingDerivedType) { return; }
    writer.writeGuidValue("accountId", companiesGetResponse_results.accountId);
    writer.writeCollectionOfObjectValues<CompaniesGetResponse_results_addresses>("addresses", companiesGetResponse_results.addresses, serializeCompaniesGetResponse_results_addresses);
    writer.writeDateValue("createdAt", companiesGetResponse_results.createdAt);
    writer.writeStringValue("description", companiesGetResponse_results.description);
    writer.writeStringValue("erpId", companiesGetResponse_results.erpId);
    writer.writeGuidValue("id", companiesGetResponse_results.id);
    writer.writeStringValue("imageUrl", companiesGetResponse_results.imageUrl);
    writer.writeStringValue("name", companiesGetResponse_results.name);
    writer.writeStringValue("originalName", companiesGetResponse_results.originalName);
    writer.writeNumberValue("projectSize", companiesGetResponse_results.projectSize);
    writer.writeEnumValue<CompaniesGetResponse_results_status>("status", companiesGetResponse_results.status);
    writer.writeStringValue("taxId", companiesGetResponse_results.taxId);
    writer.writeStringValue("trade", companiesGetResponse_results.trade);
    writer.writeDateValue("updatedAt", companiesGetResponse_results.updatedAt);
    writer.writeNumberValue("userSize", companiesGetResponse_results.userSize);
    writer.writeStringValue("websiteUrl", companiesGetResponse_results.websiteUrl);
    writer.writeAdditionalData(companiesGetResponse_results.additionalData);
}
/**
 * Serializes information the current object
 * @param CompaniesGetResponse_results_addresses The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesGetResponse_results_addresses(writer: SerializationWriter, companiesGetResponse_results_addresses: Partial<CompaniesGetResponse_results_addresses> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesGetResponse_results_addresses || isSerializingDerivedType) { return; }
    writer.writeStringValue("addressLine1", companiesGetResponse_results_addresses.addressLine1);
    writer.writeStringValue("addressLine2", companiesGetResponse_results_addresses.addressLine2);
    writer.writeStringValue("city", companiesGetResponse_results_addresses.city);
    writer.writeStringValue("country", companiesGetResponse_results_addresses.country);
    writer.writeStringValue("phone", companiesGetResponse_results_addresses.phone);
    writer.writeStringValue("postalCode", companiesGetResponse_results_addresses.postalCode);
    writer.writeStringValue("stateOrProvince", companiesGetResponse_results_addresses.stateOrProvince);
    writer.writeEnumValue<CompaniesGetResponse_results_addresses_type>("type", companiesGetResponse_results_addresses.type);
    writer.writeAdditionalData(companiesGetResponse_results_addresses.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CompaniesRequestBuilderUriTemplate = "{+baseurl}/construction/admin/v1/accounts/{accountId}/companies{?fields*,filterTextMatch*,filter%5BerpId%5D*,filter%5Bname%5D*,filter%5BtaxId%5D*,filter%5Btrade%5D*,filter%5BupdatedAt%5D*,limit*,offset*,orFilters*,sort*}";
/**
 * The address type. Will always be: ``Main``
 */
export const CompaniesGetResponse_results_addresses_typeObject = {
    Main: "Main",
} as const;
/**
 * The status of the company.Possible values: ``deleted``, ``active``
 */
export const CompaniesGetResponse_results_statusObject = {
    Deleted: "deleted",
    Active: "active",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CompaniesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filtererpId": "filter%5BerpId%5D",
    "filtername": "filter%5Bname%5D",
    "filtertaxId": "filter%5BtaxId%5D",
    "filtertrade": "filter%5Btrade%5D",
    "filterupdatedAt": "filter%5BupdatedAt%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CompaniesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CompaniesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createCompaniesGetResponseFromDiscriminatorValue,
        queryParametersMapper: CompaniesRequestBuilderGetQueryParametersMapper,
    },
};
export const GetFilterTextMatchQueryParameterTypeObject = {
    FilterName: "filter[name]",
    FilterJobNumber: "filter[jobNumber]",
    FilterCompanyName: "filter[companyName]",
    Contains: "contains",
    StartsWith: "startsWith",
    EndsWith: "endsWith",
    Equals: "equals",
} as const;
/* tslint:enable */
/* eslint-enable */
