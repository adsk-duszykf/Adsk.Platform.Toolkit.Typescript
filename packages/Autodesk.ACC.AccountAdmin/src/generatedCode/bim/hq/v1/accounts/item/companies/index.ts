/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { ImportRequestBuilderRequestsMetadata, type ImportRequestBuilder } from './importEscaped/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CompaniesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Company address line 1 | | Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2 | | Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located | | Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company | | Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: string | null;
    /**
     * | Short description or overview for company | | Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * Company ID
     */
    id?: Guid | null;
    /**
     * | Company name should be unique under an account | | Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company | | Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location | | Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located | | Max length: 255 | | Note that the ``state_or_province`` value depends on the selected ``country`` value; see the valid values in the ``state_or_province`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization | | Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website | | Max length: 255
     */
    websiteUrl?: string | null;
}
export interface CompaniesPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * | Company address line 1 | | Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2 | | Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located | | Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company | | Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: string | null;
    /**
     * | Short description or overview for company | | Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * | Company name should be unique under an account | | Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company | | Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location | | Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located | | Max length: 255 | | Note that the ``state_or_province`` value depends on the selected ``country`` value; see the valid values in the ``state_or_province`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization | | Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website | | Max length: 255
     */
    websiteUrl?: string | null;
}
export interface CompaniesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Company address line 1 | | Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2 | | Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located | | Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company | | Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: string | null;
    /**
     * | Short description or overview for company | | Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * Company ID
     */
    id?: Guid | null;
    /**
     * | Company name should be unique under an account | | Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company | | Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location | | Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located | | Max length: 255 | | Note that the ``state_or_province`` value depends on the selected ``country`` value; see the valid values in the ``state_or_province`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization | | Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website | | Max length: 255
     */
    websiteUrl?: string | null;
}
/**
 * Builds and executes requests for operations under /hq/v1/accounts/{account_id}/companies
 */
export interface CompaniesRequestBuilder extends BaseRequestBuilder<CompaniesRequestBuilder> {
    /**
     * The import property
     */
    get importEscaped(): ImportRequestBuilder;
    /**
     * Query all the partner companies in a specific BIM 360 account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompaniesGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CompaniesGetResponse | undefined>;
    /**
     * Create a new partner company.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompaniesPostResponse>}
     */
     post(body: CompaniesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CompaniesPostResponse | undefined>;
    /**
     * Query all the partner companies in a specific BIM 360 account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new partner company.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CompaniesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesGetResponse}
 */
// @ts-ignore
export function createCompaniesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesPostRequestBody}
 */
// @ts-ignore
export function createCompaniesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompaniesPostResponse}
 */
// @ts-ignore
export function createCompaniesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompaniesPostResponse;
}
/**
 * The deserialization information for the current model
 * @param CompaniesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesGetResponse(companiesGetResponse: Partial<CompaniesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { companiesGetResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { companiesGetResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { companiesGetResponse.addressLine2 = n.getStringValue(); },
        "city": n => { companiesGetResponse.city = n.getStringValue(); },
        "country": n => { companiesGetResponse.country = n.getStringValue(); },
        "description": n => { companiesGetResponse.description = n.getStringValue(); },
        "erp_id": n => { companiesGetResponse.erpId = n.getStringValue(); },
        "id": n => { companiesGetResponse.id = n.getGuidValue(); },
        "name": n => { companiesGetResponse.name = n.getStringValue(); },
        "phone": n => { companiesGetResponse.phone = n.getStringValue(); },
        "postal_code": n => { companiesGetResponse.postalCode = n.getStringValue(); },
        "state_or_province": n => { companiesGetResponse.stateOrProvince = n.getStringValue(); },
        "tax_id": n => { companiesGetResponse.taxId = n.getStringValue(); },
        "trade": n => { companiesGetResponse.trade = n.getStringValue(); },
        "website_url": n => { companiesGetResponse.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CompaniesPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesPostRequestBody(companiesPostRequestBody: Partial<CompaniesPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address_line_1": n => { companiesPostRequestBody.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { companiesPostRequestBody.addressLine2 = n.getStringValue(); },
        "city": n => { companiesPostRequestBody.city = n.getStringValue(); },
        "country": n => { companiesPostRequestBody.country = n.getStringValue(); },
        "description": n => { companiesPostRequestBody.description = n.getStringValue(); },
        "erp_id": n => { companiesPostRequestBody.erpId = n.getStringValue(); },
        "name": n => { companiesPostRequestBody.name = n.getStringValue(); },
        "phone": n => { companiesPostRequestBody.phone = n.getStringValue(); },
        "postal_code": n => { companiesPostRequestBody.postalCode = n.getStringValue(); },
        "state_or_province": n => { companiesPostRequestBody.stateOrProvince = n.getStringValue(); },
        "tax_id": n => { companiesPostRequestBody.taxId = n.getStringValue(); },
        "trade": n => { companiesPostRequestBody.trade = n.getStringValue(); },
        "website_url": n => { companiesPostRequestBody.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CompaniesPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompaniesPostResponse(companiesPostResponse: Partial<CompaniesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { companiesPostResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { companiesPostResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { companiesPostResponse.addressLine2 = n.getStringValue(); },
        "city": n => { companiesPostResponse.city = n.getStringValue(); },
        "country": n => { companiesPostResponse.country = n.getStringValue(); },
        "description": n => { companiesPostResponse.description = n.getStringValue(); },
        "erp_id": n => { companiesPostResponse.erpId = n.getStringValue(); },
        "id": n => { companiesPostResponse.id = n.getGuidValue(); },
        "name": n => { companiesPostResponse.name = n.getStringValue(); },
        "phone": n => { companiesPostResponse.phone = n.getStringValue(); },
        "postal_code": n => { companiesPostResponse.postalCode = n.getStringValue(); },
        "state_or_province": n => { companiesPostResponse.stateOrProvince = n.getStringValue(); },
        "tax_id": n => { companiesPostResponse.taxId = n.getStringValue(); },
        "trade": n => { companiesPostResponse.trade = n.getStringValue(); },
        "website_url": n => { companiesPostResponse.websiteUrl = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param CompaniesGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesGetResponse(writer: SerializationWriter, companiesGetResponse: Partial<CompaniesGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesGetResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", companiesGetResponse.accountId);
    writer.writeStringValue("address_line_1", companiesGetResponse.addressLine1);
    writer.writeStringValue("address_line_2", companiesGetResponse.addressLine2);
    writer.writeStringValue("city", companiesGetResponse.city);
    writer.writeStringValue("country", companiesGetResponse.country);
    writer.writeStringValue("description", companiesGetResponse.description);
    writer.writeStringValue("erp_id", companiesGetResponse.erpId);
    writer.writeGuidValue("id", companiesGetResponse.id);
    writer.writeStringValue("name", companiesGetResponse.name);
    writer.writeStringValue("phone", companiesGetResponse.phone);
    writer.writeStringValue("postal_code", companiesGetResponse.postalCode);
    writer.writeStringValue("state_or_province", companiesGetResponse.stateOrProvince);
    writer.writeStringValue("tax_id", companiesGetResponse.taxId);
    writer.writeStringValue("trade", companiesGetResponse.trade);
    writer.writeStringValue("website_url", companiesGetResponse.websiteUrl);
    writer.writeAdditionalData(companiesGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param CompaniesPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesPostRequestBody(writer: SerializationWriter, companiesPostRequestBody: Partial<CompaniesPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("address_line_1", companiesPostRequestBody.addressLine1);
    writer.writeStringValue("address_line_2", companiesPostRequestBody.addressLine2);
    writer.writeStringValue("city", companiesPostRequestBody.city);
    writer.writeStringValue("country", companiesPostRequestBody.country);
    writer.writeStringValue("description", companiesPostRequestBody.description);
    writer.writeStringValue("erp_id", companiesPostRequestBody.erpId);
    writer.writeStringValue("name", companiesPostRequestBody.name);
    writer.writeStringValue("phone", companiesPostRequestBody.phone);
    writer.writeStringValue("postal_code", companiesPostRequestBody.postalCode);
    writer.writeStringValue("state_or_province", companiesPostRequestBody.stateOrProvince);
    writer.writeStringValue("tax_id", companiesPostRequestBody.taxId);
    writer.writeStringValue("trade", companiesPostRequestBody.trade);
    writer.writeStringValue("website_url", companiesPostRequestBody.websiteUrl);
    writer.writeAdditionalData(companiesPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param CompaniesPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompaniesPostResponse(writer: SerializationWriter, companiesPostResponse: Partial<CompaniesPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!companiesPostResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", companiesPostResponse.accountId);
    writer.writeStringValue("address_line_1", companiesPostResponse.addressLine1);
    writer.writeStringValue("address_line_2", companiesPostResponse.addressLine2);
    writer.writeStringValue("city", companiesPostResponse.city);
    writer.writeStringValue("country", companiesPostResponse.country);
    writer.writeStringValue("description", companiesPostResponse.description);
    writer.writeStringValue("erp_id", companiesPostResponse.erpId);
    writer.writeGuidValue("id", companiesPostResponse.id);
    writer.writeStringValue("name", companiesPostResponse.name);
    writer.writeStringValue("phone", companiesPostResponse.phone);
    writer.writeStringValue("postal_code", companiesPostResponse.postalCode);
    writer.writeStringValue("state_or_province", companiesPostResponse.stateOrProvince);
    writer.writeStringValue("tax_id", companiesPostResponse.taxId);
    writer.writeStringValue("trade", companiesPostResponse.trade);
    writer.writeStringValue("website_url", companiesPostResponse.websiteUrl);
    writer.writeAdditionalData(companiesPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CompaniesRequestBuilderUriTemplate = "{+baseurl}/hq/v1/accounts/{account_id}/companies";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CompaniesRequestBuilderNavigationMetadata: Record<Exclude<keyof CompaniesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    importEscaped: {
        requestsMetadata: ImportRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CompaniesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CompaniesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createCompaniesGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: CompaniesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createCompaniesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCompaniesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
