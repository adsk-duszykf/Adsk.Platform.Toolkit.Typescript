/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImportEscaped}
 */
// @ts-ignore
export function createImportEscapedFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportEscaped;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImportPostResponse_failure_items}
 */
// @ts-ignore
export function createImportPostResponse_failure_itemsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportPostResponse_failure_items;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImportPostResponse_success_items}
 */
// @ts-ignore
export function createImportPostResponse_success_itemsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportPostResponse_success_items;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImportPostResponse}
 */
// @ts-ignore
export function createImportPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ImportEscaped The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImportEscaped(importEscaped: Partial<ImportEscaped> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address_line_1": n => { importEscaped.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { importEscaped.addressLine2 = n.getStringValue(); },
        "city": n => { importEscaped.city = n.getStringValue(); },
        "country": n => { importEscaped.country = n.getEnumValue<Import_country>(Import_countryObject); },
        "description": n => { importEscaped.description = n.getStringValue(); },
        "erp_id": n => { importEscaped.erpId = n.getStringValue(); },
        "name": n => { importEscaped.name = n.getStringValue(); },
        "phone": n => { importEscaped.phone = n.getStringValue(); },
        "postal_code": n => { importEscaped.postalCode = n.getStringValue(); },
        "state_or_province": n => { importEscaped.stateOrProvince = n.getEnumValue<Import_state_or_province>(Import_state_or_provinceObject); },
        "tax_id": n => { importEscaped.taxId = n.getStringValue(); },
        "trade": n => { importEscaped.trade = n.getStringValue(); },
        "website_url": n => { importEscaped.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ImportPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImportPostResponse(importPostResponse: Partial<ImportPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "failure": n => { importPostResponse.failure = n.getNumberValue(); },
        "failure_items": n => { importPostResponse.failureItems = n.getCollectionOfObjectValues<ImportPostResponse_failure_items>(createImportPostResponse_failure_itemsFromDiscriminatorValue); },
        "success": n => { importPostResponse.success = n.getNumberValue(); },
        "success_items": n => { importPostResponse.successItems = n.getCollectionOfObjectValues<ImportPostResponse_success_items>(createImportPostResponse_success_itemsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ImportPostResponse_failure_items The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImportPostResponse_failure_items(importPostResponse_failure_items: Partial<ImportPostResponse_failure_items> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @param ImportPostResponse_success_items The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImportPostResponse_success_items(importPostResponse_success_items: Partial<ImportPostResponse_success_items> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { importPostResponse_success_items.accountId = n.getStringValue(); },
        "address_line_1": n => { importPostResponse_success_items.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { importPostResponse_success_items.addressLine2 = n.getStringValue(); },
        "city": n => { importPostResponse_success_items.city = n.getStringValue(); },
        "country": n => { importPostResponse_success_items.country = n.getStringValue(); },
        "created_at": n => { importPostResponse_success_items.createdAt = n.getStringValue(); },
        "description": n => { importPostResponse_success_items.description = n.getStringValue(); },
        "erp_id": n => { importPostResponse_success_items.erpId = n.getStringValue(); },
        "id": n => { importPostResponse_success_items.id = n.getStringValue(); },
        "name": n => { importPostResponse_success_items.name = n.getStringValue(); },
        "phone": n => { importPostResponse_success_items.phone = n.getStringValue(); },
        "postal_code": n => { importPostResponse_success_items.postalCode = n.getStringValue(); },
        "state_or_province": n => { importPostResponse_success_items.stateOrProvince = n.getStringValue(); },
        "tax_id": n => { importPostResponse_success_items.taxId = n.getStringValue(); },
        "trade": n => { importPostResponse_success_items.trade = n.getStringValue(); },
        "updated_at": n => { importPostResponse_success_items.updatedAt = n.getStringValue(); },
        "website_url": n => { importPostResponse_success_items.websiteUrl = n.getStringValue(); },
    }
}
export type Import_country = (typeof Import_countryObject)[keyof typeof Import_countryObject];
export type Import_state_or_province = (typeof Import_state_or_provinceObject)[keyof typeof Import_state_or_provinceObject];
export interface ImportEscaped extends AdditionalDataHolder, Parsable {
    /**
     * | Company address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: Import_country | null;
    /**
     * | Short description or overview for company|| Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * | Company name should be unique under an account|| Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company|| Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: Import_state_or_province | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website|| Max length: 255
     */
    websiteUrl?: string | null;
}
export interface ImportPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Import failure company count
     */
    failure?: number | null;
    /**
     * Array of `company objects </en/docs/bim360/v1/overview/field-guide>`_ that failed to import, along with content and error information
     */
    failureItems?: ImportPostResponse_failure_items[] | null;
    /**
     * Import success company count
     */
    success?: number | null;
    /**
     * Array of `company objects </en/docs/bim360/v1/overview/field-guide>`_ that were successfully imported
     */
    successItems?: ImportPostResponse_success_items[] | null;
}
export interface ImportPostResponse_failure_items extends AdditionalDataHolder, Parsable {
}
export interface ImportPostResponse_success_items extends AdditionalDataHolder, Parsable {
    /**
     * The account_id property
     */
    accountId?: string | null;
    /**
     * The address_line_1 property
     */
    addressLine1?: string | null;
    /**
     * The address_line_2 property
     */
    addressLine2?: string | null;
    /**
     * The city property
     */
    city?: string | null;
    /**
     * The country property
     */
    country?: string | null;
    /**
     * The created_at property
     */
    createdAt?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The erp_id property
     */
    erpId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The phone property
     */
    phone?: string | null;
    /**
     * The postal_code property
     */
    postalCode?: string | null;
    /**
     * The state_or_province property
     */
    stateOrProvince?: string | null;
    /**
     * The tax_id property
     */
    taxId?: string | null;
    /**
     * The trade property
     */
    trade?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: string | null;
    /**
     * The website_url property
     */
    websiteUrl?: string | null;
}
/**
 * Builds and executes requests for operations under /hq/v1/accounts/{account_id}/companies/import
 */
export interface ImportRequestBuilder extends BaseRequestBuilder<ImportRequestBuilder> {
    /**
     * Bulk import partner companies to the company directory in a specific BIM 360 account. (50 companies maximum can be included in each call.)
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ImportPostResponse>}
     */
     post(body: ImportEscaped[], requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ImportPostResponse | undefined>;
    /**
     * Bulk import partner companies to the company directory in a specific BIM 360 account. (50 companies maximum can be included in each call.)
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ImportEscaped[], requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ImportEscaped The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImportEscaped(writer: SerializationWriter, importEscaped: Partial<ImportEscaped> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!importEscaped || isSerializingDerivedType) { return; }
    writer.writeStringValue("address_line_1", importEscaped.addressLine1);
    writer.writeStringValue("address_line_2", importEscaped.addressLine2);
    writer.writeStringValue("city", importEscaped.city);
    writer.writeEnumValue<Import_country>("country", importEscaped.country);
    writer.writeStringValue("description", importEscaped.description);
    writer.writeStringValue("erp_id", importEscaped.erpId);
    writer.writeStringValue("name", importEscaped.name);
    writer.writeStringValue("phone", importEscaped.phone);
    writer.writeStringValue("postal_code", importEscaped.postalCode);
    writer.writeEnumValue<Import_state_or_province>("state_or_province", importEscaped.stateOrProvince);
    writer.writeStringValue("tax_id", importEscaped.taxId);
    writer.writeStringValue("trade", importEscaped.trade);
    writer.writeStringValue("website_url", importEscaped.websiteUrl);
    writer.writeAdditionalData(importEscaped.additionalData);
}
/**
 * Serializes information the current object
 * @param ImportPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImportPostResponse(writer: SerializationWriter, importPostResponse: Partial<ImportPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!importPostResponse || isSerializingDerivedType) { return; }
    writer.writeNumberValue("failure", importPostResponse.failure);
    writer.writeCollectionOfObjectValues<ImportPostResponse_failure_items>("failure_items", importPostResponse.failureItems, serializeImportPostResponse_failure_items);
    writer.writeNumberValue("success", importPostResponse.success);
    writer.writeCollectionOfObjectValues<ImportPostResponse_success_items>("success_items", importPostResponse.successItems, serializeImportPostResponse_success_items);
    writer.writeAdditionalData(importPostResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param ImportPostResponse_failure_items The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImportPostResponse_failure_items(writer: SerializationWriter, importPostResponse_failure_items: Partial<ImportPostResponse_failure_items> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!importPostResponse_failure_items || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(importPostResponse_failure_items.additionalData);
}
/**
 * Serializes information the current object
 * @param ImportPostResponse_success_items The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImportPostResponse_success_items(writer: SerializationWriter, importPostResponse_success_items: Partial<ImportPostResponse_success_items> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!importPostResponse_success_items || isSerializingDerivedType) { return; }
    writer.writeStringValue("account_id", importPostResponse_success_items.accountId);
    writer.writeStringValue("address_line_1", importPostResponse_success_items.addressLine1);
    writer.writeStringValue("address_line_2", importPostResponse_success_items.addressLine2);
    writer.writeStringValue("city", importPostResponse_success_items.city);
    writer.writeStringValue("country", importPostResponse_success_items.country);
    writer.writeStringValue("created_at", importPostResponse_success_items.createdAt);
    writer.writeStringValue("description", importPostResponse_success_items.description);
    writer.writeStringValue("erp_id", importPostResponse_success_items.erpId);
    writer.writeStringValue("id", importPostResponse_success_items.id);
    writer.writeStringValue("name", importPostResponse_success_items.name);
    writer.writeStringValue("phone", importPostResponse_success_items.phone);
    writer.writeStringValue("postal_code", importPostResponse_success_items.postalCode);
    writer.writeStringValue("state_or_province", importPostResponse_success_items.stateOrProvince);
    writer.writeStringValue("tax_id", importPostResponse_success_items.taxId);
    writer.writeStringValue("trade", importPostResponse_success_items.trade);
    writer.writeStringValue("updated_at", importPostResponse_success_items.updatedAt);
    writer.writeStringValue("website_url", importPostResponse_success_items.websiteUrl);
    writer.writeAdditionalData(importPostResponse_success_items.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ImportRequestBuilderUriTemplate = "{+baseurl}/hq/v1/accounts/{account_id}/companies/import";
/**
 * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const Import_countryObject = {
    Country: "country",
} as const;
/**
 * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const Import_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const ImportRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ImportRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createImportPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImportEscaped,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
