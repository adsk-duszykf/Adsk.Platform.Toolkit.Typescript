/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImagePatchResponse}
 */
// @ts-ignore
export function createImagePatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImagePatchResponse;
}
/**
 * The deserialization information for the current model
 * @param ImagePatchResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImagePatchResponse(imagePatchResponse: Partial<ImagePatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { imagePatchResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { imagePatchResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { imagePatchResponse.addressLine2 = n.getStringValue(); },
        "business_unit_id": n => { imagePatchResponse.businessUnitId = n.getGuidValue(); },
        "city": n => { imagePatchResponse.city = n.getStringValue(); },
        "construction_type": n => { imagePatchResponse.constructionType = n.getEnumValue<ImagePatchResponse_construction_type>(ImagePatchResponse_construction_typeObject); },
        "contract_type": n => { imagePatchResponse.contractType = n.getEnumValue<ImagePatchResponse_contract_type>(ImagePatchResponse_contract_typeObject); },
        "country": n => { imagePatchResponse.country = n.getEnumValue<ImagePatchResponse_country>(ImagePatchResponse_countryObject); },
        "currency": n => { imagePatchResponse.currency = n.getEnumValue<ImagePatchResponse_currency>(ImagePatchResponse_currencyObject); },
        "end_date": n => { imagePatchResponse.endDate = n.getStringValue(); },
        "id": n => { imagePatchResponse.id = n.getGuidValue(); },
        "job_number": n => { imagePatchResponse.jobNumber = n.getStringValue(); },
        "language": n => { imagePatchResponse.language = n.getEnumValue<ImagePatchResponse_language>(ImagePatchResponse_languageObject); },
        "last_sign_in": n => { imagePatchResponse.lastSignIn = n.getDateValue(); },
        "name": n => { imagePatchResponse.name = n.getStringValue(); },
        "postal_code": n => { imagePatchResponse.postalCode = n.getStringValue(); },
        "project_type": n => { imagePatchResponse.projectType = n.getStringValue(); },
        "start_date": n => { imagePatchResponse.startDate = n.getStringValue(); },
        "state_or_province": n => { imagePatchResponse.stateOrProvince = n.getEnumValue<ImagePatchResponse_state_or_province>(ImagePatchResponse_state_or_provinceObject); },
        "status": n => { imagePatchResponse.status = n.getEnumValue<ImagePatchResponse_status>(ImagePatchResponse_statusObject); },
        "timezone": n => { imagePatchResponse.timezone = n.getStringValue(); },
        "value": n => { imagePatchResponse.value = n.getNumberValue(); },
    }
}
export interface ImagePatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Project address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Project address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * The business unit ID of this project
     */
    businessUnitId?: Guid | null;
    /**
     * | City in which project is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Type of construction|| Refer to the ``construction_type`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    constructionType?: ImagePatchResponse_construction_type | null;
    /**
     * | Contract Type for your project|| Refer to the ``contract_type`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    contractType?: ImagePatchResponse_contract_type | null;
    /**
     * | Country for this project|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: ImagePatchResponse_country | null;
    /**
     * | Currency for project value|| Refer to the ``currency`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    currency?: ImagePatchResponse_currency | null;
    /**
     * | The ending date of a project; must be later than ``start_date``|| Format: ``YYYY-MM-DD``
     */
    endDate?: string | null;
    /**
     * Project ID
     */
    id?: Guid | null;
    /**
     * | Project job number to connect a BIM 360 project to project or job in a financial or ERP system.|| Max length: 100
     */
    jobNumber?: string | null;
    /**
     * | Language of the project; applicable to the BIM 360 Field service only|| Possible values:| ``en``: English| ``de``: German
     */
    language?: ImagePatchResponse_language | null;
    /**
     * Timestamp of the last sign in, ``YYYY-MM-DDThh:mm:ss.sssZ`` format
     */
    lastSignIn?: Date | null;
    /**
     * | Name of the project| Max length: 255
     */
    name?: string | null;
    /**
     * | Postal code for the project location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | The type of project; accepts preconfigured and customized project types|| Max length: 255|| Refer to the preconfigured ``project_type`` list in| the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    projectType?: string | null;
    /**
     * | The starting date of a project; must be earlier than ``end_date``|| Format: ``YYYY-MM-DD``
     */
    startDate?: string | null;
    /**
     * | State or province in which project is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value; see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: ImagePatchResponse_state_or_province | null;
    /**
     * | The status of project.|| Possible values:| ``active``: project is active with at least one project admin added| ``pending``: project has been created but pending becuase no project admin added| ``inactive``: project is suspended| ``archived``: project is archived and displayed only in the archived list
     */
    status?: ImagePatchResponse_status | null;
    /**
     * | Time zone for this project|| Refer to the ``timezone`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    timezone?: string | null;
    /**
     * Monetary value of the project
     */
    value?: number | null;
}
export type ImagePatchResponse_construction_type = (typeof ImagePatchResponse_construction_typeObject)[keyof typeof ImagePatchResponse_construction_typeObject];
export type ImagePatchResponse_contract_type = (typeof ImagePatchResponse_contract_typeObject)[keyof typeof ImagePatchResponse_contract_typeObject];
export type ImagePatchResponse_country = (typeof ImagePatchResponse_countryObject)[keyof typeof ImagePatchResponse_countryObject];
export type ImagePatchResponse_currency = (typeof ImagePatchResponse_currencyObject)[keyof typeof ImagePatchResponse_currencyObject];
export type ImagePatchResponse_language = (typeof ImagePatchResponse_languageObject)[keyof typeof ImagePatchResponse_languageObject];
export type ImagePatchResponse_state_or_province = (typeof ImagePatchResponse_state_or_provinceObject)[keyof typeof ImagePatchResponse_state_or_provinceObject];
export type ImagePatchResponse_status = (typeof ImagePatchResponse_statusObject)[keyof typeof ImagePatchResponse_statusObject];
/**
 * Builds and executes requests for operations under /hq/v1/accounts/{account_id}/projects/{project_id}/image
 */
export interface ImageRequestBuilder extends BaseRequestBuilder<ImageRequestBuilder> {
    /**
     * Create or update a project's image.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ImagePatchResponse>}
     */
     patch(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ImagePatchResponse | undefined>;
    /**
     * Create or update a project's image.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ImagePatchResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImagePatchResponse(writer: SerializationWriter, imagePatchResponse: Partial<ImagePatchResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!imagePatchResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", imagePatchResponse.accountId);
    writer.writeStringValue("address_line_1", imagePatchResponse.addressLine1);
    writer.writeStringValue("address_line_2", imagePatchResponse.addressLine2);
    writer.writeGuidValue("business_unit_id", imagePatchResponse.businessUnitId);
    writer.writeStringValue("city", imagePatchResponse.city);
    writer.writeEnumValue<ImagePatchResponse_construction_type>("construction_type", imagePatchResponse.constructionType);
    writer.writeEnumValue<ImagePatchResponse_contract_type>("contract_type", imagePatchResponse.contractType);
    writer.writeEnumValue<ImagePatchResponse_country>("country", imagePatchResponse.country);
    writer.writeEnumValue<ImagePatchResponse_currency>("currency", imagePatchResponse.currency);
    writer.writeStringValue("end_date", imagePatchResponse.endDate);
    writer.writeGuidValue("id", imagePatchResponse.id);
    writer.writeStringValue("job_number", imagePatchResponse.jobNumber);
    writer.writeEnumValue<ImagePatchResponse_language>("language", imagePatchResponse.language);
    writer.writeDateValue("last_sign_in", imagePatchResponse.lastSignIn);
    writer.writeStringValue("name", imagePatchResponse.name);
    writer.writeStringValue("postal_code", imagePatchResponse.postalCode);
    writer.writeStringValue("project_type", imagePatchResponse.projectType);
    writer.writeStringValue("start_date", imagePatchResponse.startDate);
    writer.writeEnumValue<ImagePatchResponse_state_or_province>("state_or_province", imagePatchResponse.stateOrProvince);
    writer.writeEnumValue<ImagePatchResponse_status>("status", imagePatchResponse.status);
    writer.writeStringValue("timezone", imagePatchResponse.timezone);
    writer.writeNumberValue("value", imagePatchResponse.value);
    writer.writeAdditionalData(imagePatchResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ImageRequestBuilderUriTemplate = "{+baseurl}/hq/v1/accounts/{account_id}/projects/{project_id}/image";
/**
 * | Type of construction|| Refer to the ``construction_type`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_construction_typeObject = {
    Construction_type: "construction_type",
} as const;
/**
 * | Contract Type for your project|| Refer to the ``contract_type`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_contract_typeObject = {
    Contract_type: "contract_type",
} as const;
/**
 * | Country for this project|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_countryObject = {
    Country: "country",
} as const;
/**
 * | Currency for project value|| Refer to the ``currency`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_currencyObject = {
    Currency: "currency",
} as const;
/**
 * | Language of the project; applicable to the BIM 360 Field service only|| Possible values:| ``en``: English| ``de``: German
 */
export const ImagePatchResponse_languageObject = {
    En: "en",
    De: "de",
} as const;
/**
 * | State or province in which project is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value; see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/**
 * | The status of project.|| Possible values:| ``active``: project is active with at least one project admin added| ``pending``: project has been created but pending becuase no project admin added| ``inactive``: project is suspended| ``archived``: project is archived and displayed only in the archived list
 */
export const ImagePatchResponse_statusObject = {
    Active: "active",
    Pending: "pending",
    Inactive: "inactive",
    Archived: "archived",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const ImageRequestBuilderRequestsMetadata: RequestsMetadata = {
    patch: {
        uriTemplate: ImageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createImagePatchResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
