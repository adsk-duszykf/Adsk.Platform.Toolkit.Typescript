/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { ImageRequestBuilderRequestsMetadata, type ImageRequestBuilder } from './image/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCompany_GetResponse}
 */
// @ts-ignore
export function createWithCompany_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCompany_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCompany_PatchRequestBody}
 */
// @ts-ignore
export function createWithCompany_PatchRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCompany_PatchRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCompany_PatchResponse}
 */
// @ts-ignore
export function createWithCompany_PatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCompany_PatchResponse;
}
/**
 * The deserialization information for the current model
 * @param WithCompany_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCompany_GetResponse(withCompany_GetResponse: Partial<WithCompany_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { withCompany_GetResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { withCompany_GetResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { withCompany_GetResponse.addressLine2 = n.getStringValue(); },
        "city": n => { withCompany_GetResponse.city = n.getStringValue(); },
        "country": n => { withCompany_GetResponse.country = n.getEnumValue<WithCompany_GetResponse_country>(WithCompany_GetResponse_countryObject); },
        "description": n => { withCompany_GetResponse.description = n.getStringValue(); },
        "erp_id": n => { withCompany_GetResponse.erpId = n.getStringValue(); },
        "id": n => { withCompany_GetResponse.id = n.getGuidValue(); },
        "name": n => { withCompany_GetResponse.name = n.getStringValue(); },
        "phone": n => { withCompany_GetResponse.phone = n.getStringValue(); },
        "postal_code": n => { withCompany_GetResponse.postalCode = n.getStringValue(); },
        "state_or_province": n => { withCompany_GetResponse.stateOrProvince = n.getEnumValue<WithCompany_GetResponse_state_or_province>(WithCompany_GetResponse_state_or_provinceObject); },
        "tax_id": n => { withCompany_GetResponse.taxId = n.getStringValue(); },
        "trade": n => { withCompany_GetResponse.trade = n.getStringValue(); },
        "website_url": n => { withCompany_GetResponse.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithCompany_PatchRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCompany_PatchRequestBody(withCompany_PatchRequestBody: Partial<WithCompany_PatchRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "address_line_1": n => { withCompany_PatchRequestBody.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { withCompany_PatchRequestBody.addressLine2 = n.getStringValue(); },
        "city": n => { withCompany_PatchRequestBody.city = n.getStringValue(); },
        "country": n => { withCompany_PatchRequestBody.country = n.getEnumValue<WithCompany_PatchRequestBody_country>(WithCompany_PatchRequestBody_countryObject); },
        "description": n => { withCompany_PatchRequestBody.description = n.getStringValue(); },
        "erp_id": n => { withCompany_PatchRequestBody.erpId = n.getStringValue(); },
        "name": n => { withCompany_PatchRequestBody.name = n.getStringValue(); },
        "phone": n => { withCompany_PatchRequestBody.phone = n.getStringValue(); },
        "postal_code": n => { withCompany_PatchRequestBody.postalCode = n.getStringValue(); },
        "state_or_province": n => { withCompany_PatchRequestBody.stateOrProvince = n.getEnumValue<WithCompany_PatchRequestBody_state_or_province>(WithCompany_PatchRequestBody_state_or_provinceObject); },
        "tax_id": n => { withCompany_PatchRequestBody.taxId = n.getStringValue(); },
        "trade": n => { withCompany_PatchRequestBody.trade = n.getStringValue(); },
        "website_url": n => { withCompany_PatchRequestBody.websiteUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithCompany_PatchResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCompany_PatchResponse(withCompany_PatchResponse: Partial<WithCompany_PatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { withCompany_PatchResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { withCompany_PatchResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { withCompany_PatchResponse.addressLine2 = n.getStringValue(); },
        "city": n => { withCompany_PatchResponse.city = n.getStringValue(); },
        "country": n => { withCompany_PatchResponse.country = n.getEnumValue<WithCompany_PatchResponse_country>(WithCompany_PatchResponse_countryObject); },
        "description": n => { withCompany_PatchResponse.description = n.getStringValue(); },
        "erp_id": n => { withCompany_PatchResponse.erpId = n.getStringValue(); },
        "id": n => { withCompany_PatchResponse.id = n.getGuidValue(); },
        "name": n => { withCompany_PatchResponse.name = n.getStringValue(); },
        "phone": n => { withCompany_PatchResponse.phone = n.getStringValue(); },
        "postal_code": n => { withCompany_PatchResponse.postalCode = n.getStringValue(); },
        "state_or_province": n => { withCompany_PatchResponse.stateOrProvince = n.getEnumValue<WithCompany_PatchResponse_state_or_province>(WithCompany_PatchResponse_state_or_provinceObject); },
        "tax_id": n => { withCompany_PatchResponse.taxId = n.getStringValue(); },
        "trade": n => { withCompany_PatchResponse.trade = n.getStringValue(); },
        "website_url": n => { withCompany_PatchResponse.websiteUrl = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithCompany_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCompany_GetResponse(writer: SerializationWriter, withCompany_GetResponse: Partial<WithCompany_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withCompany_GetResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", withCompany_GetResponse.accountId);
    writer.writeStringValue("address_line_1", withCompany_GetResponse.addressLine1);
    writer.writeStringValue("address_line_2", withCompany_GetResponse.addressLine2);
    writer.writeStringValue("city", withCompany_GetResponse.city);
    writer.writeEnumValue<WithCompany_GetResponse_country>("country", withCompany_GetResponse.country);
    writer.writeStringValue("description", withCompany_GetResponse.description);
    writer.writeStringValue("erp_id", withCompany_GetResponse.erpId);
    writer.writeGuidValue("id", withCompany_GetResponse.id);
    writer.writeStringValue("name", withCompany_GetResponse.name);
    writer.writeStringValue("phone", withCompany_GetResponse.phone);
    writer.writeStringValue("postal_code", withCompany_GetResponse.postalCode);
    writer.writeEnumValue<WithCompany_GetResponse_state_or_province>("state_or_province", withCompany_GetResponse.stateOrProvince);
    writer.writeStringValue("tax_id", withCompany_GetResponse.taxId);
    writer.writeStringValue("trade", withCompany_GetResponse.trade);
    writer.writeStringValue("website_url", withCompany_GetResponse.websiteUrl);
    writer.writeAdditionalData(withCompany_GetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithCompany_PatchRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCompany_PatchRequestBody(writer: SerializationWriter, withCompany_PatchRequestBody: Partial<WithCompany_PatchRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withCompany_PatchRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("address_line_1", withCompany_PatchRequestBody.addressLine1);
    writer.writeStringValue("address_line_2", withCompany_PatchRequestBody.addressLine2);
    writer.writeStringValue("city", withCompany_PatchRequestBody.city);
    writer.writeEnumValue<WithCompany_PatchRequestBody_country>("country", withCompany_PatchRequestBody.country);
    writer.writeStringValue("description", withCompany_PatchRequestBody.description);
    writer.writeStringValue("erp_id", withCompany_PatchRequestBody.erpId);
    writer.writeStringValue("name", withCompany_PatchRequestBody.name);
    writer.writeStringValue("phone", withCompany_PatchRequestBody.phone);
    writer.writeStringValue("postal_code", withCompany_PatchRequestBody.postalCode);
    writer.writeEnumValue<WithCompany_PatchRequestBody_state_or_province>("state_or_province", withCompany_PatchRequestBody.stateOrProvince);
    writer.writeStringValue("tax_id", withCompany_PatchRequestBody.taxId);
    writer.writeStringValue("trade", withCompany_PatchRequestBody.trade);
    writer.writeStringValue("website_url", withCompany_PatchRequestBody.websiteUrl);
    writer.writeAdditionalData(withCompany_PatchRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithCompany_PatchResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCompany_PatchResponse(writer: SerializationWriter, withCompany_PatchResponse: Partial<WithCompany_PatchResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withCompany_PatchResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", withCompany_PatchResponse.accountId);
    writer.writeStringValue("address_line_1", withCompany_PatchResponse.addressLine1);
    writer.writeStringValue("address_line_2", withCompany_PatchResponse.addressLine2);
    writer.writeStringValue("city", withCompany_PatchResponse.city);
    writer.writeEnumValue<WithCompany_PatchResponse_country>("country", withCompany_PatchResponse.country);
    writer.writeStringValue("description", withCompany_PatchResponse.description);
    writer.writeStringValue("erp_id", withCompany_PatchResponse.erpId);
    writer.writeGuidValue("id", withCompany_PatchResponse.id);
    writer.writeStringValue("name", withCompany_PatchResponse.name);
    writer.writeStringValue("phone", withCompany_PatchResponse.phone);
    writer.writeStringValue("postal_code", withCompany_PatchResponse.postalCode);
    writer.writeEnumValue<WithCompany_PatchResponse_state_or_province>("state_or_province", withCompany_PatchResponse.stateOrProvince);
    writer.writeStringValue("tax_id", withCompany_PatchResponse.taxId);
    writer.writeStringValue("trade", withCompany_PatchResponse.trade);
    writer.writeStringValue("website_url", withCompany_PatchResponse.websiteUrl);
    writer.writeAdditionalData(withCompany_PatchResponse.additionalData);
}
export interface WithCompany_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Company address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: WithCompany_GetResponse_country | null;
    /**
     * | Short description or overview for company|| Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * Company ID
     */
    id?: Guid | null;
    /**
     * | Company name should be unique under an account|| Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company|| Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: WithCompany_GetResponse_state_or_province | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website|| Max length: 255
     */
    websiteUrl?: string | null;
}
export type WithCompany_GetResponse_country = (typeof WithCompany_GetResponse_countryObject)[keyof typeof WithCompany_GetResponse_countryObject];
export type WithCompany_GetResponse_state_or_province = (typeof WithCompany_GetResponse_state_or_provinceObject)[keyof typeof WithCompany_GetResponse_state_or_provinceObject];
/**
 * Builds and executes requests for operations under /hq/v1/accounts/{account_id}/companies/{company_id}
 */
export interface WithCompany_ItemRequestBuilder extends BaseRequestBuilder<WithCompany_ItemRequestBuilder> {
    /**
     * The image property
     */
    get image(): ImageRequestBuilder;
    /**
     * Query the details of a specific partner company.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCompany_GetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCompany_GetResponse | undefined>;
    /**
     * Update the properties of only the specified attributes of a specific partner company.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCompany_PatchResponse>}
     */
     patch(body: WithCompany_PatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCompany_PatchResponse | undefined>;
    /**
     * Query the details of a specific partner company.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Update the properties of only the specified attributes of a specific partner company.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WithCompany_PatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithCompany_PatchRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * | Company address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: WithCompany_PatchRequestBody_country | null;
    /**
     * | Short description or overview for company|| Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * | Company name should be unique under an account|| Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company|| Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: WithCompany_PatchRequestBody_state_or_province | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website|| Max length: 255
     */
    websiteUrl?: string | null;
}
export type WithCompany_PatchRequestBody_country = (typeof WithCompany_PatchRequestBody_countryObject)[keyof typeof WithCompany_PatchRequestBody_countryObject];
export type WithCompany_PatchRequestBody_state_or_province = (typeof WithCompany_PatchRequestBody_state_or_provinceObject)[keyof typeof WithCompany_PatchRequestBody_state_or_provinceObject];
export interface WithCompany_PatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Company address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: WithCompany_PatchResponse_country | null;
    /**
     * | Short description or overview for company|| Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * Company ID
     */
    id?: Guid | null;
    /**
     * | Company name should be unique under an account|| Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company|| Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: WithCompany_PatchResponse_state_or_province | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website|| Max length: 255
     */
    websiteUrl?: string | null;
}
export type WithCompany_PatchResponse_country = (typeof WithCompany_PatchResponse_countryObject)[keyof typeof WithCompany_PatchResponse_countryObject];
export type WithCompany_PatchResponse_state_or_province = (typeof WithCompany_PatchResponse_state_or_provinceObject)[keyof typeof WithCompany_PatchResponse_state_or_provinceObject];
/**
 * Uri template for the request builder.
 */
export const WithCompany_ItemRequestBuilderUriTemplate = "{+baseurl}/hq/v1/accounts/{account_id}/companies/{company_id}";
/**
 * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_GetResponse_countryObject = {
    Country: "country",
} as const;
/**
 * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_GetResponse_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCompany_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithCompany_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    image: {
        requestsMetadata: ImageRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCompany_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithCompany_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithCompany_GetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithCompany_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithCompany_PatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithCompany_PatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_PatchRequestBody_countryObject = {
    Country: "country",
} as const;
/**
 * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_PatchRequestBody_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/**
 * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_PatchResponse_countryObject = {
    Country: "country",
} as const;
/**
 * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const WithCompany_PatchResponse_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/* tslint:enable */
/* eslint-enable */
