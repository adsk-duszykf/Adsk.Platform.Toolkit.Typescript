/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImagePatchResponse}
 */
// @ts-ignore
export function createImagePatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImagePatchResponse;
}
/**
 * The deserialization information for the current model
 * @param ImagePatchResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImagePatchResponse(imagePatchResponse: Partial<ImagePatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account_id": n => { imagePatchResponse.accountId = n.getGuidValue(); },
        "address_line_1": n => { imagePatchResponse.addressLine1 = n.getStringValue(); },
        "address_line_2": n => { imagePatchResponse.addressLine2 = n.getStringValue(); },
        "city": n => { imagePatchResponse.city = n.getStringValue(); },
        "country": n => { imagePatchResponse.country = n.getEnumValue<ImagePatchResponse_country>(ImagePatchResponse_countryObject); },
        "description": n => { imagePatchResponse.description = n.getStringValue(); },
        "erp_id": n => { imagePatchResponse.erpId = n.getStringValue(); },
        "id": n => { imagePatchResponse.id = n.getGuidValue(); },
        "name": n => { imagePatchResponse.name = n.getStringValue(); },
        "phone": n => { imagePatchResponse.phone = n.getStringValue(); },
        "postal_code": n => { imagePatchResponse.postalCode = n.getStringValue(); },
        "state_or_province": n => { imagePatchResponse.stateOrProvince = n.getEnumValue<ImagePatchResponse_state_or_province>(ImagePatchResponse_state_or_provinceObject); },
        "tax_id": n => { imagePatchResponse.taxId = n.getStringValue(); },
        "trade": n => { imagePatchResponse.trade = n.getStringValue(); },
        "website_url": n => { imagePatchResponse.websiteUrl = n.getStringValue(); },
    }
}
export interface ImagePatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Account ID
     */
    accountId?: Guid | null;
    /**
     * | Company address line 1|| Max length: 255
     */
    addressLine1?: string | null;
    /**
     * | Company address line 2|| Max length: 255
     */
    addressLine2?: string | null;
    /**
     * | City in which company is located|| Max length: 255
     */
    city?: string | null;
    /**
     * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    country?: ImagePatchResponse_country | null;
    /**
     * | Short description or overview for company|| Max length: 255
     */
    description?: string | null;
    /**
     * Used to associate a company in BIM 360 with the company data in an ERP system
     */
    erpId?: string | null;
    /**
     * Company ID
     */
    id?: Guid | null;
    /**
     * | Company name should be unique under an account|| Max length: 255
     */
    name?: string | null;
    /**
     * | Business phone number for the company|| Max length: 255
     */
    phone?: string | null;
    /**
     * | Postal code for the company location|| Max length: 255
     */
    postalCode?: string | null;
    /**
     * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    stateOrProvince?: ImagePatchResponse_state_or_province | null;
    /**
     * Used to associate a company in BIM 360 with the company data from public and industry sources
     */
    taxId?: string | null;
    /**
     * | Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
     */
    trade?: string | null;
    /**
     * | Company website|| Max length: 255
     */
    websiteUrl?: string | null;
}
export type ImagePatchResponse_country = (typeof ImagePatchResponse_countryObject)[keyof typeof ImagePatchResponse_countryObject];
export type ImagePatchResponse_state_or_province = (typeof ImagePatchResponse_state_or_provinceObject)[keyof typeof ImagePatchResponse_state_or_provinceObject];
/**
 * Builds and executes requests for operations under /hq/v1/accounts/{account_id}/companies/{company_id}/image
 */
export interface ImageRequestBuilder extends BaseRequestBuilder<ImageRequestBuilder> {
    /**
     * Create or update a specific partner company's image.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ImagePatchResponse>}
     */
     patch(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ImagePatchResponse | undefined>;
    /**
     * Create or update a specific partner company's image.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ImagePatchResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImagePatchResponse(writer: SerializationWriter, imagePatchResponse: Partial<ImagePatchResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!imagePatchResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("account_id", imagePatchResponse.accountId);
    writer.writeStringValue("address_line_1", imagePatchResponse.addressLine1);
    writer.writeStringValue("address_line_2", imagePatchResponse.addressLine2);
    writer.writeStringValue("city", imagePatchResponse.city);
    writer.writeEnumValue<ImagePatchResponse_country>("country", imagePatchResponse.country);
    writer.writeStringValue("description", imagePatchResponse.description);
    writer.writeStringValue("erp_id", imagePatchResponse.erpId);
    writer.writeGuidValue("id", imagePatchResponse.id);
    writer.writeStringValue("name", imagePatchResponse.name);
    writer.writeStringValue("phone", imagePatchResponse.phone);
    writer.writeStringValue("postal_code", imagePatchResponse.postalCode);
    writer.writeEnumValue<ImagePatchResponse_state_or_province>("state_or_province", imagePatchResponse.stateOrProvince);
    writer.writeStringValue("tax_id", imagePatchResponse.taxId);
    writer.writeStringValue("trade", imagePatchResponse.trade);
    writer.writeStringValue("website_url", imagePatchResponse.websiteUrl);
    writer.writeAdditionalData(imagePatchResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ImageRequestBuilderUriTemplate = "{+baseurl}/hq/v1/accounts/{account_id}/companies/{company_id}/image";
/**
 * | Country for this company|| Refer to the ``country`` list in the `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_countryObject = {
    Country: "country",
} as const;
/**
 * | State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters </en/docs/bim360/v1/overview/parameters>`_ guide.
 */
export const ImagePatchResponse_state_or_provinceObject = {
    State_or_province: "state_or_province",
    Country: "country",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const ImageRequestBuilderRequestsMetadata: RequestsMetadata = {
    patch: {
        uriTemplate: ImageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createImagePatchResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
