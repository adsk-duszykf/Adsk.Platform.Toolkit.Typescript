/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_pagination}
 */
// @ts-ignore
export function createProjectsGetResponse_paginationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_pagination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_results_projectValue}
 */
// @ts-ignore
export function createProjectsGetResponse_results_projectValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_results_projectValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse_results}
 */
// @ts-ignore
export function createProjectsGetResponse_resultsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse_results;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse}
 */
// @ts-ignore
export function createProjectsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostRequestBody_projectValue}
 */
// @ts-ignore
export function createProjectsPostRequestBody_projectValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostRequestBody_projectValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostRequestBody_template_options_field}
 */
// @ts-ignore
export function createProjectsPostRequestBody_template_options_fieldFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostRequestBody_template_options_field;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostRequestBody_template_options}
 */
// @ts-ignore
export function createProjectsPostRequestBody_template_optionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostRequestBody_template_options;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostRequestBody_template}
 */
// @ts-ignore
export function createProjectsPostRequestBody_templateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostRequestBody_template;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostRequestBody}
 */
// @ts-ignore
export function createProjectsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostResponse_projectValue}
 */
// @ts-ignore
export function createProjectsPostResponse_projectValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostResponse_projectValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostResponse}
 */
// @ts-ignore
export function createProjectsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse(projectsGetResponse: Partial<ProjectsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pagination": n => { projectsGetResponse.pagination = n.getObjectValue<ProjectsGetResponse_pagination>(createProjectsGetResponse_paginationFromDiscriminatorValue); },
        "results": n => { projectsGetResponse.results = n.getCollectionOfObjectValues<ProjectsGetResponse_results>(createProjectsGetResponse_resultsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_pagination The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_pagination(projectsGetResponse_pagination: Partial<ProjectsGetResponse_pagination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "limit": n => { projectsGetResponse_pagination.limit = n.getNumberValue(); },
        "nextUrl": n => { projectsGetResponse_pagination.nextUrl = n.getStringValue(); },
        "offset": n => { projectsGetResponse_pagination.offset = n.getNumberValue(); },
        "previousUrl": n => { projectsGetResponse_pagination.previousUrl = n.getStringValue(); },
        "totalResults": n => { projectsGetResponse_pagination.totalResults = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_results The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_results(projectsGetResponse_results: Partial<ProjectsGetResponse_results> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accountId": n => { projectsGetResponse_results.accountId = n.getGuidValue(); },
        "addressLine1": n => { projectsGetResponse_results.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { projectsGetResponse_results.addressLine2 = n.getStringValue(); },
        "adminGroupId": n => { projectsGetResponse_results.adminGroupId = n.getStringValue(); },
        "businessUnitId": n => { projectsGetResponse_results.businessUnitId = n.getGuidValue(); },
        "city": n => { projectsGetResponse_results.city = n.getStringValue(); },
        "classification": n => { projectsGetResponse_results.classification = n.getStringValue(); },
        "companyCount": n => { projectsGetResponse_results.companyCount = n.getNumberValue(); },
        "constructionType": n => { projectsGetResponse_results.constructionType = n.getStringValue(); },
        "contractType": n => { projectsGetResponse_results.contractType = n.getStringValue(); },
        "country": n => { projectsGetResponse_results.country = n.getStringValue(); },
        "createdAt": n => { projectsGetResponse_results.createdAt = n.getDateValue(); },
        "currentPhase": n => { projectsGetResponse_results.currentPhase = n.getStringValue(); },
        "deliveryMethod": n => { projectsGetResponse_results.deliveryMethod = n.getStringValue(); },
        "endDate": n => { projectsGetResponse_results.endDate = n.getStringValue(); },
        "id": n => { projectsGetResponse_results.id = n.getGuidValue(); },
        "imageUrl": n => { projectsGetResponse_results.imageUrl = n.getStringValue(); },
        "jobNumber": n => { projectsGetResponse_results.jobNumber = n.getStringValue(); },
        "lastSignIn": n => { projectsGetResponse_results.lastSignIn = n.getDateValue(); },
        "latitude": n => { projectsGetResponse_results.latitude = n.getStringValue(); },
        "longitude": n => { projectsGetResponse_results.longitude = n.getStringValue(); },
        "memberCount": n => { projectsGetResponse_results.memberCount = n.getNumberValue(); },
        "memberGroupId": n => { projectsGetResponse_results.memberGroupId = n.getStringValue(); },
        "name": n => { projectsGetResponse_results.name = n.getStringValue(); },
        "platform": n => { projectsGetResponse_results.platform = n.getEnumValue<ProjectsGetResponse_results_platform>(ProjectsGetResponse_results_platformObject); },
        "postalCode": n => { projectsGetResponse_results.postalCode = n.getStringValue(); },
        "products": n => { projectsGetResponse_results.products = n.getCollectionOfPrimitiveValues<string>(); },
        "projectValue": n => { projectsGetResponse_results.projectValue = n.getObjectValue<ProjectsGetResponse_results_projectValue>(createProjectsGetResponse_results_projectValueFromDiscriminatorValue); },
        "sheetCount": n => { projectsGetResponse_results.sheetCount = n.getNumberValue(); },
        "startDate": n => { projectsGetResponse_results.startDate = n.getStringValue(); },
        "stateOrProvince": n => { projectsGetResponse_results.stateOrProvince = n.getStringValue(); },
        "status": n => { projectsGetResponse_results.status = n.getStringValue(); },
        "templateId": n => { projectsGetResponse_results.templateId = n.getGuidValue(); },
        "thumbnailImageUrl": n => { projectsGetResponse_results.thumbnailImageUrl = n.getStringValue(); },
        "timezone": n => { projectsGetResponse_results.timezone = n.getStringValue(); },
        "type": n => { projectsGetResponse_results.type = n.getStringValue(); },
        "updatedAt": n => { projectsGetResponse_results.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse_results_projectValue The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse_results_projectValue(projectsGetResponse_results_projectValue: Partial<ProjectsGetResponse_results_projectValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { projectsGetResponse_results_projectValue.currency = n.getEnumValue<ProjectsGetResponse_results_projectValue_currency>(ProjectsGetResponse_results_projectValue_currencyObject) ?? ProjectsGetResponse_results_projectValue_currencyObject.USD; },
        "value": n => { projectsGetResponse_results_projectValue.value = n.getNumberValue() ?? 0; },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostRequestBody(projectsPostRequestBody: Partial<ProjectsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "addressLine1": n => { projectsPostRequestBody.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { projectsPostRequestBody.addressLine2 = n.getStringValue(); },
        "businessUnitId": n => { projectsPostRequestBody.businessUnitId = n.getGuidValue(); },
        "city": n => { projectsPostRequestBody.city = n.getStringValue(); },
        "classification": n => { projectsPostRequestBody.classification = n.getStringValue(); },
        "companyCount": n => { projectsPostRequestBody.companyCount = n.getNumberValue(); },
        "constructionType": n => { projectsPostRequestBody.constructionType = n.getStringValue(); },
        "contractType": n => { projectsPostRequestBody.contractType = n.getStringValue(); },
        "country": n => { projectsPostRequestBody.country = n.getStringValue(); },
        "currentPhase": n => { projectsPostRequestBody.currentPhase = n.getStringValue(); },
        "deliveryMethod": n => { projectsPostRequestBody.deliveryMethod = n.getStringValue(); },
        "endDate": n => { projectsPostRequestBody.endDate = n.getStringValue(); },
        "jobNumber": n => { projectsPostRequestBody.jobNumber = n.getStringValue(); },
        "latitude": n => { projectsPostRequestBody.latitude = n.getStringValue(); },
        "longitude": n => { projectsPostRequestBody.longitude = n.getStringValue(); },
        "memberCount": n => { projectsPostRequestBody.memberCount = n.getNumberValue(); },
        "name": n => { projectsPostRequestBody.name = n.getStringValue(); },
        "platform": n => { projectsPostRequestBody.platform = n.getEnumValue<ProjectsPostRequestBody_platform>(ProjectsPostRequestBody_platformObject); },
        "postalCode": n => { projectsPostRequestBody.postalCode = n.getStringValue(); },
        "projectValue": n => { projectsPostRequestBody.projectValue = n.getObjectValue<ProjectsPostRequestBody_projectValue>(createProjectsPostRequestBody_projectValueFromDiscriminatorValue); },
        "sheetCount": n => { projectsPostRequestBody.sheetCount = n.getNumberValue(); },
        "startDate": n => { projectsPostRequestBody.startDate = n.getStringValue(); },
        "stateOrProvince": n => { projectsPostRequestBody.stateOrProvince = n.getStringValue(); },
        "template": n => { projectsPostRequestBody.template = n.getObjectValue<ProjectsPostRequestBody_template>(createProjectsPostRequestBody_templateFromDiscriminatorValue); },
        "timezone": n => { projectsPostRequestBody.timezone = n.getStringValue(); },
        "type": n => { projectsPostRequestBody.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostRequestBody_projectValue The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostRequestBody_projectValue(projectsPostRequestBody_projectValue: Partial<ProjectsPostRequestBody_projectValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { projectsPostRequestBody_projectValue.currency = n.getEnumValue<ProjectsPostRequestBody_projectValue_currency>(ProjectsPostRequestBody_projectValue_currencyObject) ?? ProjectsPostRequestBody_projectValue_currencyObject.USD; },
        "value": n => { projectsPostRequestBody_projectValue.value = n.getNumberValue() ?? 0; },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostRequestBody_template The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostRequestBody_template(projectsPostRequestBody_template: Partial<ProjectsPostRequestBody_template> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "options": n => { projectsPostRequestBody_template.options = n.getObjectValue<ProjectsPostRequestBody_template_options>(createProjectsPostRequestBody_template_optionsFromDiscriminatorValue); },
        "projectId": n => { projectsPostRequestBody_template.projectId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostRequestBody_template_options The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostRequestBody_template_options(projectsPostRequestBody_template_options: Partial<ProjectsPostRequestBody_template_options> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "field": n => { projectsPostRequestBody_template_options.field = n.getObjectValue<ProjectsPostRequestBody_template_options_field>(createProjectsPostRequestBody_template_options_fieldFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostRequestBody_template_options_field The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostRequestBody_template_options_field(projectsPostRequestBody_template_options_field: Partial<ProjectsPostRequestBody_template_options_field> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "includeCompanies": n => { projectsPostRequestBody_template_options_field.includeCompanies = n.getBooleanValue(); },
        "includeLocations": n => { projectsPostRequestBody_template_options_field.includeLocations = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostResponse(projectsPostResponse: Partial<ProjectsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accountId": n => { projectsPostResponse.accountId = n.getGuidValue(); },
        "addressLine1": n => { projectsPostResponse.addressLine1 = n.getStringValue(); },
        "addressLine2": n => { projectsPostResponse.addressLine2 = n.getStringValue(); },
        "adminGroupId": n => { projectsPostResponse.adminGroupId = n.getStringValue(); },
        "businessUnitId": n => { projectsPostResponse.businessUnitId = n.getGuidValue(); },
        "city": n => { projectsPostResponse.city = n.getStringValue(); },
        "classification": n => { projectsPostResponse.classification = n.getStringValue(); },
        "companyCount": n => { projectsPostResponse.companyCount = n.getNumberValue(); },
        "constructionType": n => { projectsPostResponse.constructionType = n.getStringValue(); },
        "contractType": n => { projectsPostResponse.contractType = n.getStringValue(); },
        "country": n => { projectsPostResponse.country = n.getStringValue(); },
        "createdAt": n => { projectsPostResponse.createdAt = n.getDateValue(); },
        "currentPhase": n => { projectsPostResponse.currentPhase = n.getStringValue(); },
        "deliveryMethod": n => { projectsPostResponse.deliveryMethod = n.getStringValue(); },
        "endDate": n => { projectsPostResponse.endDate = n.getStringValue(); },
        "id": n => { projectsPostResponse.id = n.getGuidValue(); },
        "imageUrl": n => { projectsPostResponse.imageUrl = n.getStringValue(); },
        "jobId": n => { projectsPostResponse.jobId = n.getGuidValue(); },
        "jobNumber": n => { projectsPostResponse.jobNumber = n.getStringValue(); },
        "lastSignIn": n => { projectsPostResponse.lastSignIn = n.getDateValue(); },
        "latitude": n => { projectsPostResponse.latitude = n.getStringValue(); },
        "longitude": n => { projectsPostResponse.longitude = n.getStringValue(); },
        "memberCount": n => { projectsPostResponse.memberCount = n.getNumberValue(); },
        "memberGroupId": n => { projectsPostResponse.memberGroupId = n.getStringValue(); },
        "name": n => { projectsPostResponse.name = n.getStringValue(); },
        "platform": n => { projectsPostResponse.platform = n.getEnumValue<ProjectsPostResponse_platform>(ProjectsPostResponse_platformObject); },
        "postalCode": n => { projectsPostResponse.postalCode = n.getStringValue(); },
        "products": n => { projectsPostResponse.products = n.getCollectionOfPrimitiveValues<string>(); },
        "projectValue": n => { projectsPostResponse.projectValue = n.getObjectValue<ProjectsPostResponse_projectValue>(createProjectsPostResponse_projectValueFromDiscriminatorValue); },
        "sheetCount": n => { projectsPostResponse.sheetCount = n.getNumberValue(); },
        "startDate": n => { projectsPostResponse.startDate = n.getStringValue(); },
        "stateOrProvince": n => { projectsPostResponse.stateOrProvince = n.getStringValue(); },
        "status": n => { projectsPostResponse.status = n.getStringValue(); },
        "templateId": n => { projectsPostResponse.templateId = n.getGuidValue(); },
        "thumbnailImageUrl": n => { projectsPostResponse.thumbnailImageUrl = n.getStringValue(); },
        "timezone": n => { projectsPostResponse.timezone = n.getStringValue(); },
        "type": n => { projectsPostResponse.type = n.getStringValue(); },
        "updatedAt": n => { projectsPostResponse.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostResponse_projectValue The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostResponse_projectValue(projectsPostResponse_projectValue: Partial<ProjectsPostResponse_projectValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "currency": n => { projectsPostResponse_projectValue.currency = n.getEnumValue<ProjectsPostResponse_projectValue_currency>(ProjectsPostResponse_projectValue_currencyObject) ?? ProjectsPostResponse_projectValue_currencyObject.USD; },
        "value": n => { projectsPostResponse_projectValue.value = n.getNumberValue() ?? 0; },
    }
}
export interface ProjectsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains pagination details for the records returned by the endpoint.
     */
    pagination?: ProjectsGetResponse_pagination | null;
    /**
     * The requested page of projects.
     */
    results?: ProjectsGetResponse_results[] | null;
}
/**
 * Contains pagination details for the records returned by the endpoint.
 */
export interface ProjectsGetResponse_pagination extends AdditionalDataHolder, Parsable {
    /**
     * The maximum number of records returned per page. The last page may contain fewer records than the specified limit.
     */
    limit?: number | null;
    /**
     * The URL for the next page of records, if more results are available. Max length: 2000 characters.
     */
    nextUrl?: string | null;
    /**
     * The index of the first record in the returned page. Used for pagination.
     */
    offset?: number | null;
    /**
     * The URL for the previous page of records, if applicable. Max length: 2000 characters.
     */
    previousUrl?: string | null;
    /**
     * The total number of records matching the request.
     */
    totalResults?: number | null;
}
export interface ProjectsGetResponse_results extends AdditionalDataHolder, Parsable {
    /**
     * The account ID associated with the project.
     */
    accountId?: Guid | null;
    /**
     * The first line of the project’s address.
     */
    addressLine1?: string | null;
    /**
     * Additional address details for the project location.
     */
    addressLine2?: string | null;
    /**
     * Not relevant
     */
    adminGroupId?: string | null;
    /**
     * The ID of the business unit that the project is associated with.
     */
    businessUnitId?: Guid | null;
    /**
     * The city wher the project is located.
     */
    city?: string | null;
    /**
     * The classification of the project. Possible values:
     */
    classification?: string | null;
    /**
     * The total number of companies associated with the project.
     */
    companyCount?: number | null;
    /**
     * The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.
     */
    constructionType?: string | null;
    /**
     * The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.
     */
    contractType?: string | null;
    /**
     * The country where the project is located, using an ISO 3166-1 code.
     */
    country?: string | null;
    /**
     * The timestamp when the project was created, in ISO 8601 format. This value is set at creation and does not change.
     */
    createdAt?: Date | null;
    /**
     * The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.
     */
    currentPhase?: string | null;
    /**
     * The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.
     */
    deliveryMethod?: string | null;
    /**
     * The estimated end date for the project, in ISO 8601 format.
     */
    endDate?: string | null;
    /**
     * The internally generated ID for the project.
     */
    id?: Guid | null;
    /**
     * The URL of the main image associated with the project. This field can be ``null``.
     */
    imageUrl?: string | null;
    /**
     * A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.
     */
    jobNumber?: string | null;
    /**
     * The timestamp of the last time someone signed into the project.
     */
    lastSignIn?: Date | null;
    /**
     * The latitude coordinate of the project location.
     */
    latitude?: string | null;
    /**
     * The longitude coordinate of the project location.
     */
    longitude?: string | null;
    /**
     * The total number of members on the project.
     */
    memberCount?: number | null;
    /**
     * Not relevant
     */
    memberGroupId?: string | null;
    /**
     * The name of the project.
     */
    name?: string | null;
    /**
     * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
     */
    platform?: ProjectsGetResponse_results_platform | null;
    /**
     * The postal or ZIP code of the project location.
     */
    postalCode?: string | null;
    /**
     * An array of the product objects associated with the project.
     */
    products?: string[] | null;
    /**
     * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
     */
    projectValue?: ProjectsGetResponse_results_projectValue | null;
    /**
     * The total number of sheets associated with the project.
     */
    sheetCount?: number | null;
    /**
     * The estimated start date for the project, in ISO 8601 format.
     */
    startDate?: string | null;
    /**
     * The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.
     */
    stateOrProvince?: string | null;
    /**
     * The status of the project.
     */
    status?: string | null;
    /**
     * The ID of the project that was used as a template to create this project.
     */
    templateId?: Guid | null;
    /**
     * The URL of the project’s thumbnail image. This field can be ``null``.
     */
    thumbnailImageUrl?: string | null;
    /**
     * The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database <https://www.iana.org/time-zones>`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``. Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``
     */
    timezone?: string | null;
    /**
     * The type of the project. Any value is accepted, but the following are recommended:
     */
    type?: string | null;
    /**
     * The timestamp when the project was last updated, in ISO 8601 format. This reflects changes to project fields but not updates to resources within the project.
     */
    updatedAt?: Date | null;
}
export type ProjectsGetResponse_results_platform = (typeof ProjectsGetResponse_results_platformObject)[keyof typeof ProjectsGetResponse_results_platformObject];
/**
 * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
 */
export interface ProjectsGetResponse_results_projectValue extends AdditionalDataHolder, Parsable {
    /**
     * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
     */
    currency?: ProjectsGetResponse_results_projectValue_currency | null;
    /**
     * The estimated cost of the project, based on the ``currency`` specified in the currency field. Default: ``0``.
     */
    value?: number | null;
}
export type ProjectsGetResponse_results_projectValue_currency = (typeof ProjectsGetResponse_results_projectValue_currencyObject)[keyof typeof ProjectsGetResponse_results_projectValue_currencyObject];
export interface ProjectsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The first line of the project’s address.
     */
    addressLine1?: string | null;
    /**
     * Additional address details for the project location.
     */
    addressLine2?: string | null;
    /**
     * The ID of the business unit that the project is associated with.
     */
    businessUnitId?: Guid | null;
    /**
     * The city wher the project is located.
     */
    city?: string | null;
    /**
     * The classification of the project. Possible values:
     */
    classification?: string | null;
    /**
     * The total number of companies associated with the project.
     */
    companyCount?: number | null;
    /**
     * The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.
     */
    constructionType?: string | null;
    /**
     * The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.
     */
    contractType?: string | null;
    /**
     * The country where the project is located, using an ISO 3166-1 code.
     */
    country?: string | null;
    /**
     * The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.
     */
    currentPhase?: string | null;
    /**
     * The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.
     */
    deliveryMethod?: string | null;
    /**
     * The estimated end date for the project, in ISO 8601 format.
     */
    endDate?: string | null;
    /**
     * A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.
     */
    jobNumber?: string | null;
    /**
     * The latitude coordinate of the project location.
     */
    latitude?: string | null;
    /**
     * The longitude coordinate of the project location.
     */
    longitude?: string | null;
    /**
     * The total number of members on the project.
     */
    memberCount?: number | null;
    /**
     * The name of the project.
     */
    name?: string | null;
    /**
     * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
     */
    platform?: ProjectsPostRequestBody_platform | null;
    /**
     * The postal or ZIP code of the project location.
     */
    postalCode?: string | null;
    /**
     * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
     */
    projectValue?: ProjectsPostRequestBody_projectValue | null;
    /**
     * The total number of sheets associated with the project.
     */
    sheetCount?: number | null;
    /**
     * The estimated start date for the project, in ISO 8601 format.
     */
    startDate?: string | null;
    /**
     * The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.
     */
    stateOrProvince?: string | null;
    /**
     * Information about a project in the current user's account that is configured as a template from which to copy products and settings when creating a new project:
     */
    template?: ProjectsPostRequestBody_template | null;
    /**
     * The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database <https://www.iana.org/time-zones>`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``. Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``
     */
    timezone?: string | null;
    /**
     * The type of the project. Any value is accepted, but the following are recommended:
     */
    type?: string | null;
}
export type ProjectsPostRequestBody_platform = (typeof ProjectsPostRequestBody_platformObject)[keyof typeof ProjectsPostRequestBody_platformObject];
/**
 * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
 */
export interface ProjectsPostRequestBody_projectValue extends AdditionalDataHolder, Parsable {
    /**
     * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
     */
    currency?: ProjectsPostRequestBody_projectValue_currency | null;
    /**
     * The estimated cost of the project, based on the ``currency`` specified in the currency field. Default: ``0``.
     */
    value?: number | null;
}
export type ProjectsPostRequestBody_projectValue_currency = (typeof ProjectsPostRequestBody_projectValue_currencyObject)[keyof typeof ProjectsPostRequestBody_projectValue_currencyObject];
/**
 * Information about a project in the current user's account that is configured as a template from which to copy products and settings when creating a new project:
 */
export interface ProjectsPostRequestBody_template extends AdditionalDataHolder, Parsable {
    /**
     * Information about what to include when cloning a project template.
     */
    options?: ProjectsPostRequestBody_template_options | null;
    /**
     * The ID of a project template in the current ACC account from which to clone the new project and copy products and settings.
     */
    projectId?: Guid | null;
}
/**
 * Information about what to include when cloning a project template.
 */
export interface ProjectsPostRequestBody_template_options extends AdditionalDataHolder, Parsable {
    /**
     * Project template options specific to classic field.
     */
    field?: ProjectsPostRequestBody_template_options_field | null;
}
/**
 * Project template options specific to classic field.
 */
export interface ProjectsPostRequestBody_template_options_field extends AdditionalDataHolder, Parsable {
    /**
     * Indicates whether to include company data when copying from the project template.
     */
    includeCompanies?: boolean | null;
    /**
     * Indicates whether to include location data when copying from the project template.
     */
    includeLocations?: boolean | null;
}
export interface ProjectsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The account ID associated with the project.
     */
    accountId?: Guid | null;
    /**
     * The first line of the project’s address.
     */
    addressLine1?: string | null;
    /**
     * Additional address details for the project location.
     */
    addressLine2?: string | null;
    /**
     * Not relevant
     */
    adminGroupId?: string | null;
    /**
     * The ID of the business unit that the project is associated with.
     */
    businessUnitId?: Guid | null;
    /**
     * The city wher the project is located.
     */
    city?: string | null;
    /**
     * The classification of the project. Possible values:
     */
    classification?: string | null;
    /**
     * The total number of companies associated with the project.
     */
    companyCount?: number | null;
    /**
     * The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.
     */
    constructionType?: string | null;
    /**
     * The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.
     */
    contractType?: string | null;
    /**
     * The country where the project is located, using an ISO 3166-1 code.
     */
    country?: string | null;
    /**
     * The timestamp when the project was created, in ISO 8601 format. This value is set at creation and does not change.
     */
    createdAt?: Date | null;
    /**
     * The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.
     */
    currentPhase?: string | null;
    /**
     * The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.
     */
    deliveryMethod?: string | null;
    /**
     * The estimated end date for the project, in ISO 8601 format.
     */
    endDate?: string | null;
    /**
     * The internally generated ID for the project.
     */
    id?: Guid | null;
    /**
     * The URL of the main image associated with the project. This field can be ``null``.
     */
    imageUrl?: string | null;
    /**
     * Not relevant - we don't currently support this field.
     */
    jobId?: Guid | null;
    /**
     * A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.
     */
    jobNumber?: string | null;
    /**
     * The timestamp of the last time someone signed into the project.
     */
    lastSignIn?: Date | null;
    /**
     * The latitude coordinate of the project location.
     */
    latitude?: string | null;
    /**
     * The longitude coordinate of the project location.
     */
    longitude?: string | null;
    /**
     * The total number of members on the project.
     */
    memberCount?: number | null;
    /**
     * Not relevant
     */
    memberGroupId?: string | null;
    /**
     * The name of the project.
     */
    name?: string | null;
    /**
     * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
     */
    platform?: ProjectsPostResponse_platform | null;
    /**
     * The postal or ZIP code of the project location.
     */
    postalCode?: string | null;
    /**
     * An array of the product objects associated with the project.
     */
    products?: string[] | null;
    /**
     * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
     */
    projectValue?: ProjectsPostResponse_projectValue | null;
    /**
     * The total number of sheets associated with the project.
     */
    sheetCount?: number | null;
    /**
     * The estimated start date for the project, in ISO 8601 format.
     */
    startDate?: string | null;
    /**
     * The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.
     */
    stateOrProvince?: string | null;
    /**
     * The status of the project.
     */
    status?: string | null;
    /**
     * The ID of the project that was used as a template to create this project.
     */
    templateId?: Guid | null;
    /**
     * The URL of the project’s thumbnail image. This field can be ``null``.
     */
    thumbnailImageUrl?: string | null;
    /**
     * The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database <https://www.iana.org/time-zones>`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``. Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``
     */
    timezone?: string | null;
    /**
     * The type of the project. Any value is accepted, but the following are recommended:
     */
    type?: string | null;
    /**
     * The timestamp when the project was last updated, in ISO 8601 format. This reflects changes to project fields but not updates to resources within the project.
     */
    updatedAt?: Date | null;
}
export type ProjectsPostResponse_platform = (typeof ProjectsPostResponse_platformObject)[keyof typeof ProjectsPostResponse_platformObject];
/**
 * Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).
 */
export interface ProjectsPostResponse_projectValue extends AdditionalDataHolder, Parsable {
    /**
     * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
     */
    currency?: ProjectsPostResponse_projectValue_currency | null;
    /**
     * The estimated cost of the project, based on the ``currency`` specified in the currency field. Default: ``0``.
     */
    value?: number | null;
}
export type ProjectsPostResponse_projectValue_currency = (typeof ProjectsPostResponse_projectValue_currencyObject)[keyof typeof ProjectsPostResponse_projectValue_currencyObject];
/**
 * Builds and executes requests for operations under /construction/admin/v1/accounts/{accountId}/projects
 */
export interface ProjectsRequestBuilder extends BaseRequestBuilder<ProjectsRequestBuilder> {
    /**
     * You can also use this endpoint to retrieve a list of project templates by setting the ``filter[classification]`` parameter to ``template`` or the ``filter[type]`` parameter to ``Template Project``.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProjectsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : Promise<ProjectsGetResponse | undefined>;
    /**
     * Creates a new project in the specified account. You can create the project directly, or clone it from a project template.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProjectsPostResponse>}
     */
     post(body: ProjectsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProjectsPostResponse | undefined>;
    /**
     * You can also use this endpoint to retrieve a list of project templates by setting the ``filter[classification]`` parameter to ``template`` or the ``filter[type]`` parameter to ``Template Project``.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Creates a new project in the specified account. You can create the project directly, or clone it from a project template.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ProjectsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * You can also use this endpoint to retrieve a list of project templates by setting the ``filter[classification]`` parameter to ``template`` or the ``filter[type]`` parameter to ``Template Project``.
 */
export interface ProjectsRequestBuilderGetQueryParameters {
    /**
     * A comma-separated list of the project fields to include in the response. Default value: all fields.
     */
    fields?: string[];
    /**
     * The ID of the business unit that returned projects must be associated with.
     */
    filterbusinessUnitId?: Guid;
    /**
     * Filters projects by classification. Possible values:
     */
    filterclassification?: string[];
    /**
     * Filters by a user-defined project identifier. Supports partial matches when used with ``filterTextMatch``. For example, ``filter[jobNumber]=HP-0002&filterTextMatch=equals`` returns projects where the job number is exactly ``HP-0002``.
     */
    filterjobNumber?: string;
    /**
     * Filters projects by name. Supports partial matches when used with ``filterTextMatch``. For example ``filter[name]=ABCco&filterTextMatch=startsWith`` returns projects whose names start with ``ABCco``.
     */
    filtername?: string;
    /**
     * Filters by platform. Possible values: ``acc`` (Autodesk Construction Cloud) and ``bim360`` (BIM 360).
     */
    filterplatform?: string[];
    /**
     * A comma-separated list of the products that the returned projects must use. Only projects that use one or more of the listed products are returned.
     */
    filterproducts?: string[];
    /**
     * Filters projects by status. Possible values: ``active``, ``pending``, ``archived``, ``suspended``.
     */
    filterstatus?: string[];
    /**
     * Specifies how text-based filters should match values in supported fields.
     */
    filterTextMatch?: string;
    /**
     * Filters by project type. To exclude a type, prefix it with ``-`` (e.g., ``-Bridge`` excludes bridge projects).
     */
    filtertype?: string[];
    /**
     * Filters projects updated within a specific date range in ISO 8601 format. For example:
     */
    filterupdatedAt?: string;
    /**
     * The maximum number of records to return in the response.
     */
    limit?: number;
    /**
     * The index of the first record to return.
     */
    offset?: number;
    /**
     * Sorts results by specified fields. Multiple fields can be used in order of priority. Each field can be followed by ``asc`` (ascending) or ``desc`` (descending). Default: ``asc``.
     */
    sort?: string[];
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse(writer: SerializationWriter, projectsGetResponse: Partial<ProjectsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ProjectsGetResponse_pagination>("pagination", projectsGetResponse.pagination, serializeProjectsGetResponse_pagination);
    writer.writeCollectionOfObjectValues<ProjectsGetResponse_results>("results", projectsGetResponse.results, serializeProjectsGetResponse_results);
    writer.writeAdditionalData(projectsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_pagination The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_pagination(writer: SerializationWriter, projectsGetResponse_pagination: Partial<ProjectsGetResponse_pagination> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_pagination || isSerializingDerivedType) { return; }
    writer.writeNumberValue("limit", projectsGetResponse_pagination.limit);
    writer.writeStringValue("nextUrl", projectsGetResponse_pagination.nextUrl);
    writer.writeNumberValue("offset", projectsGetResponse_pagination.offset);
    writer.writeStringValue("previousUrl", projectsGetResponse_pagination.previousUrl);
    writer.writeNumberValue("totalResults", projectsGetResponse_pagination.totalResults);
    writer.writeAdditionalData(projectsGetResponse_pagination.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_results The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_results(writer: SerializationWriter, projectsGetResponse_results: Partial<ProjectsGetResponse_results> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_results || isSerializingDerivedType) { return; }
    writer.writeGuidValue("accountId", projectsGetResponse_results.accountId);
    writer.writeStringValue("addressLine1", projectsGetResponse_results.addressLine1);
    writer.writeStringValue("addressLine2", projectsGetResponse_results.addressLine2);
    writer.writeStringValue("adminGroupId", projectsGetResponse_results.adminGroupId);
    writer.writeGuidValue("businessUnitId", projectsGetResponse_results.businessUnitId);
    writer.writeStringValue("city", projectsGetResponse_results.city);
    writer.writeStringValue("classification", projectsGetResponse_results.classification);
    writer.writeNumberValue("companyCount", projectsGetResponse_results.companyCount);
    writer.writeStringValue("constructionType", projectsGetResponse_results.constructionType);
    writer.writeStringValue("contractType", projectsGetResponse_results.contractType);
    writer.writeStringValue("country", projectsGetResponse_results.country);
    writer.writeDateValue("createdAt", projectsGetResponse_results.createdAt);
    writer.writeStringValue("currentPhase", projectsGetResponse_results.currentPhase);
    writer.writeStringValue("deliveryMethod", projectsGetResponse_results.deliveryMethod);
    writer.writeStringValue("endDate", projectsGetResponse_results.endDate);
    writer.writeGuidValue("id", projectsGetResponse_results.id);
    writer.writeStringValue("imageUrl", projectsGetResponse_results.imageUrl);
    writer.writeStringValue("jobNumber", projectsGetResponse_results.jobNumber);
    writer.writeDateValue("lastSignIn", projectsGetResponse_results.lastSignIn);
    writer.writeStringValue("latitude", projectsGetResponse_results.latitude);
    writer.writeStringValue("longitude", projectsGetResponse_results.longitude);
    writer.writeNumberValue("memberCount", projectsGetResponse_results.memberCount);
    writer.writeStringValue("memberGroupId", projectsGetResponse_results.memberGroupId);
    writer.writeStringValue("name", projectsGetResponse_results.name);
    writer.writeEnumValue<ProjectsGetResponse_results_platform>("platform", projectsGetResponse_results.platform);
    writer.writeStringValue("postalCode", projectsGetResponse_results.postalCode);
    writer.writeCollectionOfPrimitiveValues<string>("products", projectsGetResponse_results.products);
    writer.writeObjectValue<ProjectsGetResponse_results_projectValue>("projectValue", projectsGetResponse_results.projectValue, serializeProjectsGetResponse_results_projectValue);
    writer.writeNumberValue("sheetCount", projectsGetResponse_results.sheetCount);
    writer.writeStringValue("startDate", projectsGetResponse_results.startDate);
    writer.writeStringValue("stateOrProvince", projectsGetResponse_results.stateOrProvince);
    writer.writeStringValue("status", projectsGetResponse_results.status);
    writer.writeGuidValue("templateId", projectsGetResponse_results.templateId);
    writer.writeStringValue("thumbnailImageUrl", projectsGetResponse_results.thumbnailImageUrl);
    writer.writeStringValue("timezone", projectsGetResponse_results.timezone);
    writer.writeStringValue("type", projectsGetResponse_results.type);
    writer.writeDateValue("updatedAt", projectsGetResponse_results.updatedAt);
    writer.writeAdditionalData(projectsGetResponse_results.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse_results_projectValue The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse_results_projectValue(writer: SerializationWriter, projectsGetResponse_results_projectValue: Partial<ProjectsGetResponse_results_projectValue> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsGetResponse_results_projectValue || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ProjectsGetResponse_results_projectValue_currency>("currency", projectsGetResponse_results_projectValue.currency ?? ProjectsGetResponse_results_projectValue_currencyObject.USD);
    writer.writeNumberValue("value", projectsGetResponse_results_projectValue.value ?? 0);
    writer.writeAdditionalData(projectsGetResponse_results_projectValue.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostRequestBody(writer: SerializationWriter, projectsPostRequestBody: Partial<ProjectsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("addressLine1", projectsPostRequestBody.addressLine1);
    writer.writeStringValue("addressLine2", projectsPostRequestBody.addressLine2);
    writer.writeGuidValue("businessUnitId", projectsPostRequestBody.businessUnitId);
    writer.writeStringValue("city", projectsPostRequestBody.city);
    writer.writeStringValue("classification", projectsPostRequestBody.classification);
    writer.writeNumberValue("companyCount", projectsPostRequestBody.companyCount);
    writer.writeStringValue("constructionType", projectsPostRequestBody.constructionType);
    writer.writeStringValue("contractType", projectsPostRequestBody.contractType);
    writer.writeStringValue("country", projectsPostRequestBody.country);
    writer.writeStringValue("currentPhase", projectsPostRequestBody.currentPhase);
    writer.writeStringValue("deliveryMethod", projectsPostRequestBody.deliveryMethod);
    writer.writeStringValue("endDate", projectsPostRequestBody.endDate);
    writer.writeStringValue("jobNumber", projectsPostRequestBody.jobNumber);
    writer.writeStringValue("latitude", projectsPostRequestBody.latitude);
    writer.writeStringValue("longitude", projectsPostRequestBody.longitude);
    writer.writeNumberValue("memberCount", projectsPostRequestBody.memberCount);
    writer.writeStringValue("name", projectsPostRequestBody.name);
    writer.writeEnumValue<ProjectsPostRequestBody_platform>("platform", projectsPostRequestBody.platform);
    writer.writeStringValue("postalCode", projectsPostRequestBody.postalCode);
    writer.writeObjectValue<ProjectsPostRequestBody_projectValue>("projectValue", projectsPostRequestBody.projectValue, serializeProjectsPostRequestBody_projectValue);
    writer.writeNumberValue("sheetCount", projectsPostRequestBody.sheetCount);
    writer.writeStringValue("startDate", projectsPostRequestBody.startDate);
    writer.writeStringValue("stateOrProvince", projectsPostRequestBody.stateOrProvince);
    writer.writeObjectValue<ProjectsPostRequestBody_template>("template", projectsPostRequestBody.template, serializeProjectsPostRequestBody_template);
    writer.writeStringValue("timezone", projectsPostRequestBody.timezone);
    writer.writeStringValue("type", projectsPostRequestBody.type);
    writer.writeAdditionalData(projectsPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostRequestBody_projectValue The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostRequestBody_projectValue(writer: SerializationWriter, projectsPostRequestBody_projectValue: Partial<ProjectsPostRequestBody_projectValue> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostRequestBody_projectValue || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ProjectsPostRequestBody_projectValue_currency>("currency", projectsPostRequestBody_projectValue.currency ?? ProjectsPostRequestBody_projectValue_currencyObject.USD);
    writer.writeNumberValue("value", projectsPostRequestBody_projectValue.value ?? 0);
    writer.writeAdditionalData(projectsPostRequestBody_projectValue.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostRequestBody_template The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostRequestBody_template(writer: SerializationWriter, projectsPostRequestBody_template: Partial<ProjectsPostRequestBody_template> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostRequestBody_template || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ProjectsPostRequestBody_template_options>("options", projectsPostRequestBody_template.options, serializeProjectsPostRequestBody_template_options);
    writer.writeGuidValue("projectId", projectsPostRequestBody_template.projectId);
    writer.writeAdditionalData(projectsPostRequestBody_template.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostRequestBody_template_options The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostRequestBody_template_options(writer: SerializationWriter, projectsPostRequestBody_template_options: Partial<ProjectsPostRequestBody_template_options> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostRequestBody_template_options || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ProjectsPostRequestBody_template_options_field>("field", projectsPostRequestBody_template_options.field, serializeProjectsPostRequestBody_template_options_field);
    writer.writeAdditionalData(projectsPostRequestBody_template_options.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostRequestBody_template_options_field The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostRequestBody_template_options_field(writer: SerializationWriter, projectsPostRequestBody_template_options_field: Partial<ProjectsPostRequestBody_template_options_field> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostRequestBody_template_options_field || isSerializingDerivedType) { return; }
    writer.writeBooleanValue("includeCompanies", projectsPostRequestBody_template_options_field.includeCompanies);
    writer.writeBooleanValue("includeLocations", projectsPostRequestBody_template_options_field.includeLocations);
    writer.writeAdditionalData(projectsPostRequestBody_template_options_field.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostResponse(writer: SerializationWriter, projectsPostResponse: Partial<ProjectsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostResponse || isSerializingDerivedType) { return; }
    writer.writeGuidValue("accountId", projectsPostResponse.accountId);
    writer.writeStringValue("addressLine1", projectsPostResponse.addressLine1);
    writer.writeStringValue("addressLine2", projectsPostResponse.addressLine2);
    writer.writeStringValue("adminGroupId", projectsPostResponse.adminGroupId);
    writer.writeGuidValue("businessUnitId", projectsPostResponse.businessUnitId);
    writer.writeStringValue("city", projectsPostResponse.city);
    writer.writeStringValue("classification", projectsPostResponse.classification);
    writer.writeNumberValue("companyCount", projectsPostResponse.companyCount);
    writer.writeStringValue("constructionType", projectsPostResponse.constructionType);
    writer.writeStringValue("contractType", projectsPostResponse.contractType);
    writer.writeStringValue("country", projectsPostResponse.country);
    writer.writeDateValue("createdAt", projectsPostResponse.createdAt);
    writer.writeStringValue("currentPhase", projectsPostResponse.currentPhase);
    writer.writeStringValue("deliveryMethod", projectsPostResponse.deliveryMethod);
    writer.writeStringValue("endDate", projectsPostResponse.endDate);
    writer.writeGuidValue("id", projectsPostResponse.id);
    writer.writeStringValue("imageUrl", projectsPostResponse.imageUrl);
    writer.writeGuidValue("jobId", projectsPostResponse.jobId);
    writer.writeStringValue("jobNumber", projectsPostResponse.jobNumber);
    writer.writeDateValue("lastSignIn", projectsPostResponse.lastSignIn);
    writer.writeStringValue("latitude", projectsPostResponse.latitude);
    writer.writeStringValue("longitude", projectsPostResponse.longitude);
    writer.writeNumberValue("memberCount", projectsPostResponse.memberCount);
    writer.writeStringValue("memberGroupId", projectsPostResponse.memberGroupId);
    writer.writeStringValue("name", projectsPostResponse.name);
    writer.writeEnumValue<ProjectsPostResponse_platform>("platform", projectsPostResponse.platform);
    writer.writeStringValue("postalCode", projectsPostResponse.postalCode);
    writer.writeCollectionOfPrimitiveValues<string>("products", projectsPostResponse.products);
    writer.writeObjectValue<ProjectsPostResponse_projectValue>("projectValue", projectsPostResponse.projectValue, serializeProjectsPostResponse_projectValue);
    writer.writeNumberValue("sheetCount", projectsPostResponse.sheetCount);
    writer.writeStringValue("startDate", projectsPostResponse.startDate);
    writer.writeStringValue("stateOrProvince", projectsPostResponse.stateOrProvince);
    writer.writeStringValue("status", projectsPostResponse.status);
    writer.writeGuidValue("templateId", projectsPostResponse.templateId);
    writer.writeStringValue("thumbnailImageUrl", projectsPostResponse.thumbnailImageUrl);
    writer.writeStringValue("timezone", projectsPostResponse.timezone);
    writer.writeStringValue("type", projectsPostResponse.type);
    writer.writeDateValue("updatedAt", projectsPostResponse.updatedAt);
    writer.writeAdditionalData(projectsPostResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostResponse_projectValue The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostResponse_projectValue(writer: SerializationWriter, projectsPostResponse_projectValue: Partial<ProjectsPostResponse_projectValue> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!projectsPostResponse_projectValue || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ProjectsPostResponse_projectValue_currency>("currency", projectsPostResponse_projectValue.currency ?? ProjectsPostResponse_projectValue_currencyObject.USD);
    writer.writeNumberValue("value", projectsPostResponse_projectValue.value ?? 0);
    writer.writeAdditionalData(projectsPostResponse_projectValue.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ProjectsRequestBuilderUriTemplate = "{+baseurl}/construction/admin/v1/accounts/{accountId}/projects{?fields*,filterTextMatch*,filter%5BbusinessUnitId%5D*,filter%5Bclassification%5D*,filter%5BjobNumber%5D*,filter%5Bname%5D*,filter%5Bplatform%5D*,filter%5Bproducts%5D*,filter%5Bstatus%5D*,filter%5Btype%5D*,filter%5BupdatedAt%5D*,limit*,offset*,sort*}";
/**
 * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
 */
export const ProjectsGetResponse_results_platformObject = {
    Acc: "acc",
    Bim360: "bim360``.",
} as const;
/**
 * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
 */
export const ProjectsGetResponse_results_projectValue_currencyObject = {
    AED: "AED",
    AFN: "AFN",
    ALL: "ALL",
    AMD: "AMD",
    ANG: "ANG",
    AOA: "AOA",
    ARS: "ARS",
    AUD: "AUD",
    AWG: "AWG",
    AZN: "AZN",
    BAM: "BAM",
    BBD: "BBD",
    BDT: "BDT",
    BGN: "BGN",
    BHD: "BHD",
    BIF: "BIF",
    BMD: "BMD",
    BND: "BND",
    BOB: "BOB",
    BOV: "BOV",
    BRL: "BRL",
    BSD: "BSD",
    BTN: "BTN",
    BWP: "BWP",
    BYN: "BYN",
    BYR: "BYR",
    BZD: "BZD",
    CAD: "CAD",
    CDF: "CDF",
    CHE: "CHE",
    CHF: "CHF",
    CHW: "CHW",
    CLF: "CLF",
    CLP: "CLP",
    CNY: "CNY",
    COP: "COP",
    COU: "COU",
    CRC: "CRC",
    CUC: "CUC",
    CUP: "CUP",
    CVE: "CVE",
    CZK: "CZK",
    DJF: "DJF",
    DKK: "DKK",
    DOP: "DOP",
    DZD: "DZD",
    EEK: "EEK",
    EGP: "EGP",
    ERN: "ERN",
    ETB: "ETB",
    EUR: "EUR",
    FJD: "FJD",
    FKP: "FKP",
    GBP: "GBP",
    GEL: "GEL",
    GHS: "GHS",
    GIP: "GIP",
    GMD: "GMD",
    GNF: "GNF",
    GTQ: "GTQ",
    GYD: "GYD",
    HKD: "HKD",
    HNL: "HNL",
    HRK: "HRK",
    HTG: "HTG",
    HUF: "HUF",
    IDR: "IDR",
    ILS: "ILS",
    INR: "INR",
    IQD: "IQD",
    IRR: "IRR",
    ISK: "ISK",
    JMD: "JMD",
    JOD: "JOD",
    JPY: "JPY",
    KES: "KES",
    KGS: "KGS",
    KHR: "KHR",
    KMF: "KMF",
    KPW: "KPW",
    KRW: "KRW",
    KWD: "KWD",
    KYD: "KYD",
    KZT: "KZT",
    LAK: "LAK",
    LBP: "LBP",
    LKR: "LKR",
    LRD: "LRD",
    LSL: "LSL",
    LTL: "LTL",
    LVL: "LVL",
    LYD: "LYD",
    MAD: "MAD",
    MDL: "MDL",
    MGA: "MGA",
    MKD: "MKD",
    MMK: "MMK",
    MNT: "MNT",
    MOP: "MOP",
    MRU: "MRU",
    MUR: "MUR",
    MVR: "MVR",
    MWK: "MWK",
    MXN: "MXN",
    MXV: "MXV",
    MYR: "MYR",
    MZN: "MZN",
    NAD: "NAD",
    NGN: "NGN",
    NIO: "NIO",
    NOK: "NOK",
    NPR: "NPR",
    NZD: "NZD",
    OMR: "OMR",
    PAB: "PAB",
    PEN: "PEN",
    PGK: "PGK",
    PHP: "PHP",
    PKR: "PKR",
    PLN: "PLN",
    PYG: "PYG",
    QAR: "QAR",
    RON: "RON",
    RSD: "RSD",
    RUB: "RUB",
    RWF: "RWF",
    SAR: "SAR",
    SBD: "SBD",
    SCR: "SCR",
    SDG: "SDG",
    SEK: "SEK",
    SGD: "SGD",
    SHP: "SHP",
    SLE: "SLE",
    SLL: "SLL",
    SOS: "SOS",
    SRD: "SRD",
    SSP: "SSP",
    STN: "STN",
    SVC: "SVC",
    SYP: "SYP",
    SZL: "SZL",
    THB: "THB",
    TJS: "TJS",
    TMT: "TMT",
    TND: "TND",
    TOP: "TOP",
    TRL: "TRL",
    TRYEscaped: "TRY",
    TTD: "TTD",
    TWD: "TWD",
    TZS: "TZS",
    UAH: "UAH",
    UGX: "UGX",
    USD: "USD",
    USN: "USN",
    UYI: "UYI",
    UYU: "UYU",
    UYW: "UYW",
    UZS: "UZS",
    VED: "VED",
    VES: "VES",
    VND: "VND",
    VUV: "VUV",
    WST: "WST",
    XAF: "XAF",
    XAG: "XAG",
    XAU: "XAU",
    XBA: "XBA",
    XBB: "XBB",
    XBC: "XBC",
    XBD: "XBD",
    XCD: "XCD",
    XDR: "XDR",
    XOF: "XOF",
    XPD: "XPD",
    XPF: "XPF",
    XPT: "XPT",
    XSU: "XSU",
    XTS: "XTS",
    XUA: "XUA",
    XXX: "XXX",
    YER: "YER",
    ZAR: "ZAR",
    ZMW: "ZMW",
    ZWL: "ZWL",
} as const;
/**
 * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
 */
export const ProjectsPostRequestBody_platformObject = {
    Acc: "acc",
    Bim360: "bim360``.",
} as const;
/**
 * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
 */
export const ProjectsPostRequestBody_projectValue_currencyObject = {
    AED: "AED",
    AFN: "AFN",
    ALL: "ALL",
    AMD: "AMD",
    ANG: "ANG",
    AOA: "AOA",
    ARS: "ARS",
    AUD: "AUD",
    AWG: "AWG",
    AZN: "AZN",
    BAM: "BAM",
    BBD: "BBD",
    BDT: "BDT",
    BGN: "BGN",
    BHD: "BHD",
    BIF: "BIF",
    BMD: "BMD",
    BND: "BND",
    BOB: "BOB",
    BOV: "BOV",
    BRL: "BRL",
    BSD: "BSD",
    BTN: "BTN",
    BWP: "BWP",
    BYN: "BYN",
    BYR: "BYR",
    BZD: "BZD",
    CAD: "CAD",
    CDF: "CDF",
    CHE: "CHE",
    CHF: "CHF",
    CHW: "CHW",
    CLF: "CLF",
    CLP: "CLP",
    CNY: "CNY",
    COP: "COP",
    COU: "COU",
    CRC: "CRC",
    CUC: "CUC",
    CUP: "CUP",
    CVE: "CVE",
    CZK: "CZK",
    DJF: "DJF",
    DKK: "DKK",
    DOP: "DOP",
    DZD: "DZD",
    EEK: "EEK",
    EGP: "EGP",
    ERN: "ERN",
    ETB: "ETB",
    EUR: "EUR",
    FJD: "FJD",
    FKP: "FKP",
    GBP: "GBP",
    GEL: "GEL",
    GHS: "GHS",
    GIP: "GIP",
    GMD: "GMD",
    GNF: "GNF",
    GTQ: "GTQ",
    GYD: "GYD",
    HKD: "HKD",
    HNL: "HNL",
    HRK: "HRK",
    HTG: "HTG",
    HUF: "HUF",
    IDR: "IDR",
    ILS: "ILS",
    INR: "INR",
    IQD: "IQD",
    IRR: "IRR",
    ISK: "ISK",
    JMD: "JMD",
    JOD: "JOD",
    JPY: "JPY",
    KES: "KES",
    KGS: "KGS",
    KHR: "KHR",
    KMF: "KMF",
    KPW: "KPW",
    KRW: "KRW",
    KWD: "KWD",
    KYD: "KYD",
    KZT: "KZT",
    LAK: "LAK",
    LBP: "LBP",
    LKR: "LKR",
    LRD: "LRD",
    LSL: "LSL",
    LTL: "LTL",
    LVL: "LVL",
    LYD: "LYD",
    MAD: "MAD",
    MDL: "MDL",
    MGA: "MGA",
    MKD: "MKD",
    MMK: "MMK",
    MNT: "MNT",
    MOP: "MOP",
    MRU: "MRU",
    MUR: "MUR",
    MVR: "MVR",
    MWK: "MWK",
    MXN: "MXN",
    MXV: "MXV",
    MYR: "MYR",
    MZN: "MZN",
    NAD: "NAD",
    NGN: "NGN",
    NIO: "NIO",
    NOK: "NOK",
    NPR: "NPR",
    NZD: "NZD",
    OMR: "OMR",
    PAB: "PAB",
    PEN: "PEN",
    PGK: "PGK",
    PHP: "PHP",
    PKR: "PKR",
    PLN: "PLN",
    PYG: "PYG",
    QAR: "QAR",
    RON: "RON",
    RSD: "RSD",
    RUB: "RUB",
    RWF: "RWF",
    SAR: "SAR",
    SBD: "SBD",
    SCR: "SCR",
    SDG: "SDG",
    SEK: "SEK",
    SGD: "SGD",
    SHP: "SHP",
    SLE: "SLE",
    SLL: "SLL",
    SOS: "SOS",
    SRD: "SRD",
    SSP: "SSP",
    STN: "STN",
    SVC: "SVC",
    SYP: "SYP",
    SZL: "SZL",
    THB: "THB",
    TJS: "TJS",
    TMT: "TMT",
    TND: "TND",
    TOP: "TOP",
    TRL: "TRL",
    TRYEscaped: "TRY",
    TTD: "TTD",
    TWD: "TWD",
    TZS: "TZS",
    UAH: "UAH",
    UGX: "UGX",
    USD: "USD",
    USN: "USN",
    UYI: "UYI",
    UYU: "UYU",
    UYW: "UYW",
    UZS: "UZS",
    VED: "VED",
    VES: "VES",
    VND: "VND",
    VUV: "VUV",
    WST: "WST",
    XAF: "XAF",
    XAG: "XAG",
    XAU: "XAU",
    XBA: "XBA",
    XBB: "XBB",
    XBC: "XBC",
    XBD: "XBD",
    XCD: "XCD",
    XDR: "XDR",
    XOF: "XOF",
    XPD: "XPD",
    XPF: "XPF",
    XPT: "XPT",
    XSU: "XSU",
    XTS: "XTS",
    XUA: "XUA",
    XXX: "XXX",
    YER: "YER",
    ZAR: "ZAR",
    ZMW: "ZMW",
    ZWL: "ZWL",
} as const;
/**
 * The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.
 */
export const ProjectsPostResponse_platformObject = {
    Acc: "acc",
    Bim360: "bim360``.",
} as const;
/**
 * The currency of the project value. Default: ``USD``. Possible values: ``AED``, ``AFN``, ``ALL``, ``AMD``, ``ANG``, ``AOA``, ``ARS``, ``AUD``, ``AWG``, ``AZN``, ``BAM``, ``BBD``, ``BDT``, ``BGN``, ``BHD``, ``BIF``, ``BMD``, ``BND``, ``BOB``, ``BOV``, ``BRL``, ``BSD``, ``BTN``, ``BWP``, ``BYN``, ``BYR``, ``BZD``, ``CAD``, ``CDF``, ``CHE``, ``CHF``, ``CHW``, ``CLF``, ``CLP``, ``CNY``, ``COP``, ``COU``, ``CRC``, ``CUC``, ``CUP``, ``CVE``, ``CZK``, ``DJF``, ``DKK``, ``DOP``, ``DZD``, ``EEK``, ``EGP``, ``ERN``, ``ETB``, ``EUR``, ``FJD``, ``FKP``, ``GBP``, ``GEL``, ``GHS``, ``GIP``, ``GMD``, ``GNF``, ``GTQ``, ``GYD``, ``HKD``, ``HNL``, ``HRK``, ``HTG``, ``HUF``, ``IDR``, ``ILS``, ``INR``, ``IQD``, ``IRR``, ``ISK``, ``JMD``, ``JOD``, ``JPY``, ``KES``, ``KGS``, ``KHR``, ``KMF``, ``KPW``, ``KRW``, ``KWD``, ``KYD``, ``KZT``, ``LAK``, ``LBP``, ``LKR``, ``LRD``, ``LSL``, ``LTL``, ``LVL``, ``LYD``, ``MAD``, ``MDL``, ``MGA``, ``MKD``, ``MMK``, ``MNT``, ``MOP``, ``MRU``, ``MUR``, ``MVR``, ``MWK``, ``MXN``, ``MXV``, ``MYR``, ``MZN``, ``NAD``, ``NGN``, ``NIO``, ``NOK``, ``NPR``, ``NZD``, ``OMR``, ``PAB``, ``PEN``, ``PGK``, ``PHP``, ``PKR``, ``PLN``, ``PYG``, ``QAR``, ``RON``, ``RSD``, ``RUB``, ``RWF``, ``SAR``, ``SBD``, ``SCR``, ``SDG``, ``SEK``, ``SGD``, ``SHP``, ``SLE``, ``SLL``, ``SOS``, ``SRD``, ``SSP``, ``STN``, ``SVC``, ``SYP``, ``SZL``, ``THB``, ``TJS``, ``TMT``, ``TND``, ``TOP``, ``TRL``, ``TRY``, ``TTD``, ``TWD``, ``TZS``, ``UAH``, ``UGX``, ``USD``, ``USN``, ``UYI``, ``UYU``, ``UYW``, ``UZS``, ``VED``, ``VES``, ``VND``, ``VUV``, ``WST``, ``XAF``, ``XAG``, ``XAU``, ``XBA``, ``XBB``, ``XBC``, ``XBD``, ``XCD``, ``XDR``, ``XOF``, ``XPD``, ``XPF``, ``XPT``, ``XSU``, ``XTS``, ``XUA``, ``XXX``, ``YER``, ``ZAR``, ``ZMW``, ``ZWL``
 */
export const ProjectsPostResponse_projectValue_currencyObject = {
    AED: "AED",
    AFN: "AFN",
    ALL: "ALL",
    AMD: "AMD",
    ANG: "ANG",
    AOA: "AOA",
    ARS: "ARS",
    AUD: "AUD",
    AWG: "AWG",
    AZN: "AZN",
    BAM: "BAM",
    BBD: "BBD",
    BDT: "BDT",
    BGN: "BGN",
    BHD: "BHD",
    BIF: "BIF",
    BMD: "BMD",
    BND: "BND",
    BOB: "BOB",
    BOV: "BOV",
    BRL: "BRL",
    BSD: "BSD",
    BTN: "BTN",
    BWP: "BWP",
    BYN: "BYN",
    BYR: "BYR",
    BZD: "BZD",
    CAD: "CAD",
    CDF: "CDF",
    CHE: "CHE",
    CHF: "CHF",
    CHW: "CHW",
    CLF: "CLF",
    CLP: "CLP",
    CNY: "CNY",
    COP: "COP",
    COU: "COU",
    CRC: "CRC",
    CUC: "CUC",
    CUP: "CUP",
    CVE: "CVE",
    CZK: "CZK",
    DJF: "DJF",
    DKK: "DKK",
    DOP: "DOP",
    DZD: "DZD",
    EEK: "EEK",
    EGP: "EGP",
    ERN: "ERN",
    ETB: "ETB",
    EUR: "EUR",
    FJD: "FJD",
    FKP: "FKP",
    GBP: "GBP",
    GEL: "GEL",
    GHS: "GHS",
    GIP: "GIP",
    GMD: "GMD",
    GNF: "GNF",
    GTQ: "GTQ",
    GYD: "GYD",
    HKD: "HKD",
    HNL: "HNL",
    HRK: "HRK",
    HTG: "HTG",
    HUF: "HUF",
    IDR: "IDR",
    ILS: "ILS",
    INR: "INR",
    IQD: "IQD",
    IRR: "IRR",
    ISK: "ISK",
    JMD: "JMD",
    JOD: "JOD",
    JPY: "JPY",
    KES: "KES",
    KGS: "KGS",
    KHR: "KHR",
    KMF: "KMF",
    KPW: "KPW",
    KRW: "KRW",
    KWD: "KWD",
    KYD: "KYD",
    KZT: "KZT",
    LAK: "LAK",
    LBP: "LBP",
    LKR: "LKR",
    LRD: "LRD",
    LSL: "LSL",
    LTL: "LTL",
    LVL: "LVL",
    LYD: "LYD",
    MAD: "MAD",
    MDL: "MDL",
    MGA: "MGA",
    MKD: "MKD",
    MMK: "MMK",
    MNT: "MNT",
    MOP: "MOP",
    MRU: "MRU",
    MUR: "MUR",
    MVR: "MVR",
    MWK: "MWK",
    MXN: "MXN",
    MXV: "MXV",
    MYR: "MYR",
    MZN: "MZN",
    NAD: "NAD",
    NGN: "NGN",
    NIO: "NIO",
    NOK: "NOK",
    NPR: "NPR",
    NZD: "NZD",
    OMR: "OMR",
    PAB: "PAB",
    PEN: "PEN",
    PGK: "PGK",
    PHP: "PHP",
    PKR: "PKR",
    PLN: "PLN",
    PYG: "PYG",
    QAR: "QAR",
    RON: "RON",
    RSD: "RSD",
    RUB: "RUB",
    RWF: "RWF",
    SAR: "SAR",
    SBD: "SBD",
    SCR: "SCR",
    SDG: "SDG",
    SEK: "SEK",
    SGD: "SGD",
    SHP: "SHP",
    SLE: "SLE",
    SLL: "SLL",
    SOS: "SOS",
    SRD: "SRD",
    SSP: "SSP",
    STN: "STN",
    SVC: "SVC",
    SYP: "SYP",
    SZL: "SZL",
    THB: "THB",
    TJS: "TJS",
    TMT: "TMT",
    TND: "TND",
    TOP: "TOP",
    TRL: "TRL",
    TRYEscaped: "TRY",
    TTD: "TTD",
    TWD: "TWD",
    TZS: "TZS",
    UAH: "UAH",
    UGX: "UGX",
    USD: "USD",
    USN: "USN",
    UYI: "UYI",
    UYU: "UYU",
    UYW: "UYW",
    UZS: "UZS",
    VED: "VED",
    VES: "VES",
    VND: "VND",
    VUV: "VUV",
    WST: "WST",
    XAF: "XAF",
    XAG: "XAG",
    XAU: "XAU",
    XBA: "XBA",
    XBB: "XBB",
    XBC: "XBC",
    XBD: "XBD",
    XCD: "XCD",
    XDR: "XDR",
    XOF: "XOF",
    XPD: "XPD",
    XPF: "XPF",
    XPT: "XPT",
    XSU: "XSU",
    XTS: "XTS",
    XUA: "XUA",
    XXX: "XXX",
    YER: "YER",
    ZAR: "ZAR",
    ZMW: "ZMW",
    ZWL: "ZWL",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProjectsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filterbusinessUnitId": "filter%5BbusinessUnitId%5D",
    "filterclassification": "filter%5Bclassification%5D",
    "filterjobNumber": "filter%5BjobNumber%5D",
    "filtername": "filter%5Bname%5D",
    "filterplatform": "filter%5Bplatform%5D",
    "filterproducts": "filter%5Bproducts%5D",
    "filterstatus": "filter%5Bstatus%5D",
    "filtertype": "filter%5Btype%5D",
    "filterupdatedAt": "filter%5BupdatedAt%5D",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProjectsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createProjectsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ProjectsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createProjectsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProjectsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
